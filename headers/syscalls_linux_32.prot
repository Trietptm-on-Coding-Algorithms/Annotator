// System Calls for 32bit Linux system (Kernel 4.4.0)
int uname(struct utsname *buf);
ssize_t readlink(const char *path, char *buf, size_t bufsiz);
int getdomainname(char *name, size_t len);
int setdomainname(const char *name, size_t len);
int pciconfig_read(unsigned long bus, unsigned long dfn, unsigned long off, unsigned long len, void *buf);
int pciconfig_write(unsigned long bus, unsigned long dfn ,unsigned long off, unsigned long len, void *buf);
int pciconfig_iobase(long which, unsigned long bus ,unsigned long devfn);
int access(const char *pathname, int mode);
int getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache);
int kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);
int ipc(unsigned int call, int first, int second void *ptr, long fifth);
int timer_getoverrun(timer_t timerid);
int getrusage(int who, struct rusage *usage);
int timer_create(clockid_t clockid, struct sigevent *sevp, timer_t *timerid);
int fchmodat(int dirfd, const char *pathname, mode_t mode, int flags);
int symlinkat(const char *oldpath, int newdirfd, const char *newpath);
int io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event *events, struct timespec *timeout);
int socket(int domain, int type, int protocol);
int setresuid(uid_t ruid, uid_t euid, uid_t suid);
int setresgid(gid_t rgid, gid_t egid, gid_t sgid);
int ioctl(int d, int request, ...);
int fstatat(int dirfd, const char *pathname, struct stat *int flags);
void exit_group(int status);
int chmod(const char *path, mode_t mode);
int fchmod(int fd, mode_t mode);
int ustat(dev_t dev, struct ustat *ubuf);
int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
int getitimer(int which, struct itimerval *curr_value);
int setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value);
int unshare(int flags);
void *alloc_hugepages(int key, void *addr, size_t len, int prot, int flag);
int free_hugepages(void *addr);
int poll(struct pollfd *fds, nfds_t nfds, int timeout);
int ppoll(struct pollfd *fds, nfds_t nfds, const struct timespec *timeout_ts, const sigset_t *sigmask);
int sigwaitinfo(const sigset_t *set, siginfo_t *info);
int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout);
int getpriority(int which, int who);
int setpriority(int which, int who, int prio);
int chroot(const char *path);
int mknod(const char *pathname, mode_t mode, dev_t dev);
ssize_t readahead(int fd, off64_t offset, size_t count);
int tkill(int tid, int sig);
int tgkill(int tgid, int tid, int sig);
int setreuid(uid_t ruid, uid_t euid);
int setregid(gid_t rgid, gid_t egid);
long getunwind(void *buf, size_t buf_size);
int eventfd(unsigned int initval, int flags);
int chown(const char *path, uid_t owner, gid_t group);
int fchown(int fd, uid_t owner, gid_t group);
int lchown(const char *path, uid_t owner, gid_t group);
int mlock(const void *addr, size_t len);
int munlock(const void *addr, size_t len);
int mlockall(int flags);
void _exit(int status);
void _Exit(int status);
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
int accept4(int sockfd, struct sockaddr *addr, socklen_t *addrlen, int flags);
ssize_t splice(int fd_in, loff_t *off_in, int fd_out, loff_t *off_out, size_t len, unsigned int flags);
int sigaltstack(const stack_t *ss, stack_t *oss);
int rt_sigqueueinfo(pid_t tgid, int sig, siginfo_t *uinfo);
int rt_tgsigqueueinfo(pid_t tgid, pid_t tid, int sig, siginfo_t *uinfo);
long nfsservctl(int cmd, struct nfsctl_arg *argp, union nfsctl_res *resp);
int epoll_create(int size);
int epoll_create1(int flags);
int killpg(int pgrp, int sig);
int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *request, struct timespec *remain);
int inotify_rm_watch(int fd, int wd);
int lookup_dcookie(u64 cookie, char *buffer, size_t len);
int sched_setparam(pid_t pid, const struct sched_param *param);
int sched_getparam(pid_t pid, struct sched_param *param);
int openat(int dirfd, const char *pathname, int flags, mode_t mode);
int shmget(key_t key, size_t size, int shmflg);
int timerfd_create(int clockid, int flags);
int timerfd_settime(int fd, int flags, const struct itimerspec *new_value, struct itimerspec *old_value);
int timerfd_gettime(int fd, struct itimerspec *curr_value);
unsigned char inb(unsigned short int port);
unsigned char inb_p(unsigned short int port);
unsigned short int inw(unsigned short int port);
unsigned short int inw_p(unsigned short int port);
unsigned int inl(unsigned short int port);
unsigned int inl_p(unsigned short int port);
void outb(unsigned char value, unsigned short int port);
void outb_p(unsigned char value, unsigned short int port);
void outw(unsigned short int value, unsigned short int port);
void outw_p(unsigned short int value, unsigned short int port);
void outl(unsigned int value, unsigned short int port);
void outl_p(unsigned int value, unsigned short int port);
void insb(unsigned short int port, void *addr, unsigned long int count);
void insw(unsigned short int port, void *addr, unsigned long int count);
void insl(unsigned short int port, void *addr, unsigned long int count);
void outsb(unsigned short int port, const void *addr, unsigned long int count);
void outsw(unsigned short int port, const void *addr, unsigned long int count);
void outsl(unsigned short int port, const void *addr, unsigned long int count);
ssize_t vmsplice(int fd, const struct iovec *iov, unsigned long nr_segs, unsigned int flags);
int uselib(const char *library);
int inotify_init1(int flags);
int chdir(const char *path);
int fchdir(int fd);
int unlink(const char *pathname);
long perfmonctl(int fd, int cmd, void *arg, int narg);
int listen(int sockfd, int backlog);
void *shmat(int shmid, const void *shmaddr, int shmflg);
int shmdt(const void *shmaddr);
ssize_t process_vm_readv(pid_t pid, const struct iovec *local_iov, unsigned long liovcnt, const struct iovec *remote_iov, unsigned long riovcnt, unsigned long flags);
ssize_t process_vm_writev(pid_t pid, const struct iovec *local_iov, unsigned long liovcnt, const struct iovec *remote_iov, unsigned long riovcnt, unsigned long flags);
int symlink(const char *oldpath, const char *newpath);
int sysinfo(struct sysinfo *info);
int getgroups(int size, gid_t list []);
int setgroups(size_t size, const gid_t *list);
int s390_runtime_instr(int command, int signum);
int sync_file_range(int fd, off64_t offset, off64_t nbytes, unsigned int flags);
int sync_file_range2(int fd, unsigned int flags, off64_t offset, off64_t nbytes);
int syscall(int number, ...);
int open(const char *pathname, int flags, mode_t mode);
int creat(const char *pathname, mode_t mode);
int utime(const char *filename, const struct utimbuf *times);
int utimes(const char *filename, const struct timeval times [2]);
int set_thread_area(struct user_desc *u_info);
int seteuid(uid_t euid);
int setegid(gid_t egid);
int setns(int fd, int nstype);
ssize_t write(int fd, const void *buf, size_t count);
int truncate(const char *path, off_t length);
int ftruncate(int fd, off_t length);
int umount(const char *target);
int umount2(const char *target, int flags);
int capget(cap_user_header_t hdrp, cap_user_data_t datap);
int capset(cap_user_header_t hdrp, const cap_user_data_t datap);
int unlinkat(int dirfd, const char *pathname, int flags);
long get_robust_list(int pid, struct robust_list_head ** head_ptr, size_t *len_ptr);
long set_robust_list(struct robust_list_head *head, size_t len);
long ssetmask(long newmask);
pid_t wait3(int *status, int options, struct rusage *rusage);
pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);
key_serial_t request_key(const char *type, const char *description, const char *callout_info, key_serial_t keyring);
int rmdir(const char *pathname);
int socketcall(int call, unsigned long *args);
key_serial_t add_key(const char *type, const char *description, const void *payload, size_t plen, key_serial_t keyring);
int sigsuspend(const sigset_t *mask);
ssize_t recv(int sockfd, void *buf, size_t len, int flags);
ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);
ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
int semop(int semid, struct sembuf *sops, unsigned nsops);
int semtimedop(int semid, struct sembuf *sops, unsigned nsops, struct timespec *timeout);
int _sysctl(struct __sysctl_args *args);
int gettimeofday(struct timeval *tv, struct timezone *tz);
int settimeofday(const struct timeval *tv, const struct timezone *tz);
int inotify_add_watch(int fd, const char *pathname, uint32_t mask);
int nice(int inc);
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
void FD_CLR(int fd, fd_set *set);
int FD_ISSET(int fd, fd_set *set);
void FD_SET(int fd, fd_set *set);
void FD_ZERO(fd_set *set);
int pselect(int nfds, fd_set *readfds, fd_set *writefds,fd_set *exceptfds, const struct timespec *timeout, const sigset_t *sigmask);
int futex(int *uaddr, int op, int val, int *uaddr2, int val3);
int sigpending(sigset_t *set);
ssize_t tee(int fd_in, int fd_out, size_t len, unsigned int flags);
pid_t getsid(pid_t pid);
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
void *mmap(void *addr, size_t length, int fd, off_t offset);
int munmap(void *addr, size_t length);
int recvmmsg(int sockfd, struct mmsghdr *msgvec, unsigned int flags, struct timespec *timeout);
mode_t umask(mode_t mask);
int kill(pid_t pid, int sig);
int setuid(uid_t uid);
int brk(void *addr);
void *sbrk(intptr_t increment);
int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
int clock_getres(clockid_t clk_id, struct timespec *res);
int clock_gettime(clockid_t clk_id, struct timespec *tp);
int clock_settime(clockid_t clk_id, const struct timespec *tp);
int linkat(int olddirfd, const char *oldpath, int newdirfd, const char *newpath, int flags);
int sched_rr_get_interval(pid_t pid, struct timespec *tp);
int prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
int io_destroy(aio_context_t ctx_id);
int setgid(gid_t gid);
int fchownat(int dirfd, const char *pathname, uid_t owner, gid_t group, int flags);
int timer_delete(timer_t timerid);
int getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
int flock(int fd, int operation);
int faccessat(int dirfd, const char *pathname, int mode, int flags);
int renameat(int olddirfd, const char *oldpath, int newdirfd, const char *newpath);
int acct(const char *filename);
int reboot(int magic, int magic2, int cmd, void *arg);
int clone(int (*fn)(void *), void *child_stack, int flags, void *arg, ... /* pid_t *ptid, struct user_desc *tls, pid_t *ctid */ );
ssize_t pread(int fd, void *buf, size_t count, off_t offset);
ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);
int mprotect(void *addr, size_t len, int prot);
int ioperm(unsigned long from, unsigned long num, int turn_on);
int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
int iopl(int level);
int _llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t *result, unsigned int whence);
long move_pages(int pid, unsigned long count, void ** pages, const int *nodes, int *status, int flags);
int execve(const char *filename, char *const argv [], char *const envp []);
int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data);
int fcntl(int fd, int cmd, ... /* arg */);
long subpage_prot(unsigned long addr, unsigned long len, uint32_t *map);
int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
int epoll_pwait(int epfd, struct epoll_event *events, int maxevents, int timeout, const sigset_t *sigmask);
long migrate_pages(int pid, unsigned long maxnode, const unsigned long *old_nodes, const unsigned long *new_nodes);
int delete_module(const char *name, int flags);
int readdir(unsigned int fd, struct old_linux_dirent *dirp, unsigned int count);
int quotactl(int cmd, const char *special, int id \
int gethostname(char *name, size_t len);
int sethostname(const char *name, size_t len);
int mkdir(const char *pathname, mode_t mode);
int syncfs(int fd);
int posix_fadvise(int fd, off_t offset, off_t len \
long arm_fadvise64_64(int fd, int advice, loff_t offset, loff_t len);
int readlinkat(int dirfd, const char *pathname, char *buf, size_t bufsiz);
int cacheflush(char *addr, int nbytes, int cache);
int semctl(int semid, int semnum, int cmd, ...);
long keyctl(int cmd, ...);
long set_tid_address(int *tidptr);
int getrlimit(int resource, struct rlimit *rlim);
int setrlimit(int resource, const struct rlimit *rlim);
int prlimit(pid_t pid, int resource, const struct rlimit *new_limit, struct rlimit *old_limit);
int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg);
int mbind(void *addr, unsigned long len, int mode, unsigned long *nodemask, unsigned long maxnode, unsigned flags);
int mq_getsetattr(mqd_t mqdes, struct mq_attr *newattr, struct mq_attr *oldattr);
int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param);
int sched_getscheduler(pid_t pid);
sighandler_t signal(int signum, sighandler_t handler);
int dup(int oldfd);
int dup2(int oldfd, int newfd);
int dup3(int oldfd, int newfd, int flags);
int madvise(void *addr, size_t length, int advice);
int modify_ldt(int func, void *ptr, unsigned long bytecount);
int io_setup(unsigned nr_events, aio_context_t *ctx_idp);
nt semget(key_t key, int nsems, int semflg);
int setfsuid(uid_t fsuid);
int fallocate(int fd, int mode, off_t offset, off_t len);
int close(int fd);
int stat(const char *path, struct stat *buf);
int fstat(int fd, struct stat *buf);
int lstat(const char *path, struct stat *buf);
int getdents(unsigned int fd, struct linux_dirent *dirp, unsigned int count);
int pipe(int pipefd [2]);
int pipe2(int pipefd [2], int flags);
caddr_t create_module(const char *name, size_t size);
unsigned int alarm(unsigned int seconds);
int sysfs(int option, unsigned int fs_index, char *buf);
int sched_setaffinity(pid_t pid, size_t cpusetsize, cpu_set_t *mask);
int sched_getaffinity(pid_t pid, size_t cpusetsize, cpu_set_t *mask);
int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen);
int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
int statfs(const char *path, struct statfs *buf);
int fstatfs(int fd, struct statfs *buf);
int utimensat(int dirfd, const char *pathname, const struct timespec times [2], int flags);
int futimens(int fd, const struct timespec times [2]);
int mount(const char *source, const char *target, const char *filesystemtype, unsigned long mountflags, const void *data);
int personality(unsigned long persona);
int mincore(void *addr, size_t length, unsigned char *vec);
int nanosleep(const struct timespec *req, struct timespec *rem);
int setpgid(pid_t pid, pid_t pgid);
pid_t getpgid(pid_t pid);
pid_t getpgrp(pid_t pid);
int setpgrp(pid_t pid, pid_t pgid);\
int shmctl(int shmid, int cmd, struct shmid_ds *buf);
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
int pivot_root(const char *new_root, const char *put_old);
int remap_file_pages(void *addr, size_t size, int prot, ssize_t pgoff, int flags);
clock_t times(struct tms *buf);
int io_cancel(aio_context_t ctx_id, struct iocb *iocb, struct io_event *result);
int fsync(int fd);
int fdatasync(int fd);
int vm86old(struct vm86_struct *info);
int vm86(unsigned long fn, struct vm86plus_struct *v86);
void *mmap2(void *addr, size_t length, int prot, int flags, int fd, off_t pgoffset);
int msgget(key_t key, int msgflg);
pid_t wait(int *status);
pid_t waitpid(pid_t pid, int *status, int options);
int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
off_t lseek(int fd, off_t offset, int whence);
int futimesat(int dirfd, const char *pathname, const struct timeval times [2]);
int msync(void *addr, size_t length, int flags);
int signalfd(int fd, const sigset_t *mask, int flags);
int swapon(const char *path, int swapflags);
int swapoff(const char *path);
int perf_event_open(struct perf_event_attr *attr, pid_t pid, int cpu, int group_fd, unsigned long flags);
int sched_get_priority_max(int policy);
int sched_get_priority_min(int policy);
int sendmmsg(int sockfd, struct mmsghdr *msgvec, unsigned int flags);
int setfsgid(uid_t fsgid);
int socketpair(int domain, int type, int protocol, int sv[2]);
ssize_t readv(int fd, const struct iovec *iov, int iovcnt);
ssize_t writev(int fd, const struct iovec *iov, int iovcnt);
ssize_t preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset);
ssize_t pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset);
int get_mempolicy(int *mode, unsigned long *nodemask, unsigned long maxnode, unsigned long addr, unsigned long flags);
ssize_t read(int fd, void *buf, size_t count);
int sigreturn(unsigned long __unused);
int adjtimex(struct timex *buf);
ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);
int shutdown(int sockfd, int how);
int get_thread_area(struct user_desc *u_info);
int get_kernel_syms(struct kernel_sym *table);
int stime(time_t *t);
int timer_settime(timer_t timerid, int flags, const struct itimerspec *new_value, struct itimerspec *old_value);
int timer_gettime(timer_t timerid, struct itimerspec *curr_value);
int mkdirat(int dirfd, const char *pathname, mode_t mode);
time_t time(time_t *t);
int ioprio_get(int which, int who);
int ioprio_set(int which, int who, int ioprio);
int link(const char *oldpath, const char *newpath);
int msgctl(int msqid, int cmd, struct msqid_ds *buf);
void *mremap(void *old_address, size_t old_size, size_t new_size, int flags, ... /* void *new_address */);
int syslog(int type, char *bufp, int len);
int klogctl(int type, char *bufp, int len);
int finit_module(int fd, const char *param_values, int flags);
int init_module(const char *name, struct module *image);
ssize_t send(int sockfd, const void *buf, size_t len, int flags);
ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen);
ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);
