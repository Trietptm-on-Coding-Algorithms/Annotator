int SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, char *cmd);
int name_to_handle_at(int dfd, char *name, file_handle *handle, int *mnt_id, int flags);
int sysfs(int option);
td_err_e td_ta_set_event(td_thragent_t *ta, td_thr_events_t *event);
void CRYPTO_THREADID_get_callback();
int PKCS7_simple_smimecap(stack_st_X509_ALGOR *sk, int nid, int arg);
int getc_unlocked(FILE *stream);
size_t wcsftime(wchar_t *s, size_t maxsize, wchar_t *format, tm *tp);
int IO_putc(int c, IO_FILE *fp);
int BIO_set_ex_data(BIO *bio, int idx, void *data);
int RSA_padding_check_PKCS1_type_2(unsigned *to, int tlen, unsigned *f, int fl, int rsa_len);
void X509_VERIFY_PARAM_table_cleanup();
int RSA_padding_check_PKCS1_type_1(unsigned *to, int tlen, unsigned *f, int fl, int rsa_len);
unsigned sleep(unsigned seconds);
int fwscanf(FILE *stream, wchar_t *format, int vararg);
EVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY *x);
int bindresvport6(int sockfd, sockaddr_in6 *sock_in);
EC_METHOD *EC_GFp_nistp256_method();
u_char *p_cdnname(u_char *arg0, u_char *arg1, int arg2, FILE *arg3);
ASN1_TYPE *PKCS7_get_attribute(PKCS7_SIGNER_INFO *si, int nid);
EVP_MD *EVP_MD_CTX_md(EVP_MD_CTX *ctx);
int BN_mod_add_quick(BIGNUM *r, BIGNUM *a, BIGNUM *b, BIGNUM *m);
int get_thread_area(user_desc *u_info);
int pthread_attr_getstacksize(pthread_attr_t *attr, size_t *stacksize);
PKCS7_SIGNER_INFO *PKCS7_sign_add_signer(PKCS7 *p7, X509 *signcert, EVP_PKEY *pkey, EVP_MD *md, int flags);
EC_METHOD *EC_GFp_mont_method();
void swab(void *from, void *to, ssize_t n);
int pthread_attr_getscope(pthread_attr_t *attr, int *scope);
int clock_getres(clockid_t clock_id, timespec *res);
int ilogb(double x);
EVP_CIPHER *EVP_camellia_128_cfb128();
int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
void RSA_OAEP_PARAMS_free(RSA_OAEP_PARAMS *a);
int SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e);
PKCS7 *PEM_read_PKCS7(FILE *fp, PKCS7 *x, pem_password_cb *cb, void *u);
X509 *X509_new();
X509_SIG *PEM_read_PKCS8(FILE *fp, X509_SIG *x, pem_password_cb *cb, void *u);
unsigned CRYPTO_get_id_callback();
int renameat2(int olddirfd, char *oldpath, int newdirfd, char *newpath, unsigned flags);
void lh_doall_arg(LHASH *lh, LHASH_DOALL_ARG_FN_TYPE func, void *arg);
X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, EVP_MD *md);
void X509_ATTRIBUTE_free(X509_ATTRIBUTE *a);
dsa_st *EVP_PKEY_get1_DSA(EVP_PKEY *pkey);
int EVP_PKEY_assign(EVP_PKEY *pkey, int type, void *key);
int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval);
int getpt();
int getpw(uid_t uid, char *buffer);
char *ctime_r(time_t *timer, char *buf);
pid_t getppid();
int X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc);
int PKCS7_add_certificate(PKCS7 *p7, X509 *x509);
int getloadavg(double *loadavg, int nelem);
int PEM_write_X509(FILE *fp, X509 *x);
int iswblank_l(wint_t wc, locale_t locale);
X509_CRL *d2i_X509_CRL(X509_CRL *a, unsigned *in, long len);
int strcasecmp_l(char *s1, char *s2, locale_t loc);
int i2d_EC_PUBKEY(EC_KEY *a, unsigned *pp);
lzma_ret lzma_alone_decoder(lzma_stream *strm, uint64_t memlimit);
int PEM_write_DSA_PUBKEY(FILE *fp, DSA *x);
void *ASN1_d2i_fp(void *xnew, d2i_of_void *d2i, FILE *in, void *x);
EVP_CIPHER *EVP_des_ede();
ASN1_BMPSTRING *ASN1_BMPSTRING_new();
X509_VERIFY_PARAM *X509_VERIFY_PARAM_lookup(char *name);
int i2d_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING *a, unsigned *out);
void X509_REVOKED_free(X509_REVOKED *a);
int td_thr_iter_f(td_thrhandle_t *arg0, void *arg1);
double tanh(double x);
int getdate_r(char *string, tm *resbufp);
ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
hostent *gethostbyaddr(void *addr, socklen_t len, int type);
int X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, int type, unsigned *bytes, int len, X509_OBJECT *ret);
td_err_e td_thr_getxregsize(td_thrhandle_t *th, int *sizep);
int BN_mod_lshift1(BIGNUM *r, BIGNUM *a, BIGNUM *m, BN_CTX *ctx);
long arm_fadvise64_64(int fd, int advice, loff_t offset, loff_t len);
int msync(void *addr, size_t len, int flags);
uLong compressBound(uLong sourceLen);
int i2d_X509_bio(BIO *bp, X509 *x509);
long clog10l(long z);
int BN_rshift1(BIGNUM *r, BIGNUM *a);
unsigned gnu_dev_makedev(unsigned major, unsigned minor);
int fsetpos64(FILE *stream, fpos64_t *pos);
EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey);
int pthread_spin_trylock(pthread_spinlock_t *lock);
void OBJ_cleanup();
int getlogin_r(char *name, size_t name_len);
td_err_e td_thr_get_info(td_thrhandle_t *th, td_thrinfo_t *infop);
int BN_nist_mod_521(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
stack_st_X509_ALGOR *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si);
int EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx, EVP_MD *type, ENGINE *e, EVP_PKEY *pkey);
char *p_class(int arg0);
wchar_t *wcschr(wchar_t *wcs, wchar_t wc);
COMP_METHOD *SSL_get_current_compression(SSL *s);
int scandirat64(int dfd, char *dir, dirent64 *namelist, int selector, int cmp);
int X509_REQ_add1_attr_by_NID(X509_REQ *req, int nid, int type, unsigned *bytes, int len);
int i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa);
long nfsservctl(int cmd, nfsctl_arg *argp, nfsctl_res *resp);
int uname(utsname *name);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
EVP_CIPHER *EVP_des_cfb64();
int EC_GROUP_get_trinomial_basis(EC_GROUP *arg0, unsigned *k);
int BIO_nread0(BIO *bio, char *buf);
X509_OBJECT *X509_OBJECT_retrieve_by_subject(stack_st_X509_OBJECT *h, int type, X509_NAME *name);
void X509_OBJECT_free_contents(X509_OBJECT *a);
void *realloc(void *ptr, size_t size);
unsigned BN_get_word(BIGNUM *a);
int EVP_CIPHER_CTX_nid(EVP_CIPHER_CTX *ctx);
unsigned CRYPTO_THREADID_hash(CRYPTO_THREADID *id);
unsigned la_version(unsigned version);
int BIO_sock_non_fatal_error(int error);
int pthread_mutexattr_getprioceiling(pthread_mutexattr_t *attr, int *prioceiling);
void SSL_CTX_set_psk_client_callback(SSL_CTX *ctx, unsigned psk_client_callback);
void BUF_MEM_free(BUF_MEM *a);
int setlogmask(int mask);
int group_member(gid_t gid);
void endspent();
void BN_RECP_CTX_free(BN_RECP_CTX *recp);
int fesetexceptflag(fexcept_t *flagp, int excepts);
pitem *pqueue_insert(pqueue pq, pitem *item);
void insl(unsigned port, void *addr, unsigned count);
void BN_swap(BIGNUM *a, BIGNUM *b);
int DSA_generate_key(DSA *a);
int EC_POINT_set_affine_coordinates_GF2m(EC_GROUP *group, EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx);
int EC_KEY_set_public_key(EC_KEY *key, EC_POINT *pub);
void *BIO_get_ex_data(BIO *bio, int idx);
double catan(double z);
int fegetenv(fenv_t *envp);
int vwprintf(wchar_t *format, gnuc_va_list arg);
int EVP_PKEY_asn1_get0_info(int *ppkey_id, int *pkey_base_id, int *ppkey_flags, char *pinfo, char *ppem_str, EVP_PKEY_ASN1_METHOD *ameth);
int sscanf(char *s, char *format, int vararg);
double copysign(double x, double y);
int DSA_set_method(DSA *dsa, DSA_METHOD *arg1);
int PEM_write_DSAPrivateKey(FILE *fp, DSA *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cb, void *u);
double drem(double x, double y);
int setstate_r(char *statebuf, random_data *buf);
int PEM_write_bio_PKCS7(BIO *bp, PKCS7 *x);
int EVP_PKEY_size(EVP_PKEY *pkey);
int wcsncasecmp(wchar_t *s1, wchar_t *s2, size_t n);
void *CRYPTO_realloc(void *addr, int num, char *file, int line);
stack_st_X509_ATTRIBUTE *X509at_add1_attr_by_OBJ(stack_st_X509_ATTRIBUTE *x, ASN1_OBJECT *obj, int type, unsigned *bytes, int len);
void ASN1_BIT_STRING_free(ASN1_BIT_STRING *a);
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, char *name, int value, BIT_STRING_BITNAME *tbl);
u_long ns_get32(u_char *arg0);
int SSL_add_file_cert_subjects_to_stack(stack_st_X509_NAME *stackCAs, char *file);
int BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix, asn1_ps_func *suffix_free);
DH *DH_get_2048_256();
int pthread_mutex_setprioceiling(pthread_mutex_t *mutex, int prioceiling, int *old_ceiling);
double asin(double x);
int getnetgrent(char *hostp, char *userp, char *domainp);
void getutmp(utmpx *utmpx, utmp *utmp);
BIGNUM *bn_dup_expand(BIGNUM *a, int words);
int bwrite(BIO *arg0, char *arg1, int arg2);
in6_addr *inet6_rth_getaddr(void *bp, int index);
size_t wcsxfrm(wchar_t *s1, wchar_t *s2, size_t n);
int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key, ASN1_OBJECT *obj, int type, unsigned *bytes, int len);
int idle();
ASN1_OBJECT *ASN1_OBJECT_new();
int pthread_mutexattr_getprotocol(pthread_mutexattr_t *attr, int *protocol);
dirent64 *gl_readdir(void *arg0);
int sched_getcpu();
int ECDH_KDF_X9_62(unsigned *out, size_t outlen, unsigned *Z, size_t Zlen, unsigned *sinfo, size_t sinfolen, EVP_MD *md);
X509_VERIFY_PARAM *X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx);
int gl_lstat(char *arg0, stat64 *arg1);
stack_st_X509_NAME *SSL_dup_CA_list(stack_st_X509_NAME *sk);
void X509_CERT_PAIR_free(X509_CERT_PAIR *a);
int sigaltstack(sigaltstack *ss, sigaltstack *oss);
int pthread_rwlock_timedrdlock(pthread_rwlock_t *rwlock, timespec *abstime);
int ispunct_l(int arg0, locale_t arg1);
void mcheck_check_all();
void NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE *a);
char *strptime(char *s, char *fmt, tm *tp);
int re_match_2(re_pattern_buffer *buffer, char *string1, int length1, char *string2, int length2, int start, re_registers *regs, int stop);
int DSA_print(BIO *bp, DSA *x, int off);
EVP_PKEY *b2i_PrivateKey_bio(BIO *in);
void *PEM_ASN1_read(d2i_of_void *d2i, char *name, FILE *fp, void *x, pem_password_cb *cb, void *u);
void envz_remove(char *envz, size_t *envz_len, char *name);
int brk(void *addr);
stack_st_X509_CRL *lookup_crls(X509_STORE_CTX *ctx, X509_NAME *nm);
int printf(char *format, int vararg);
void EVP_EncodeInit(EVP_ENCODE_CTX *ctx);
X509_VAL *d2i_X509_VAL(X509_VAL *a, unsigned *in, long len);
void lzma_index_iter_init(lzma_index_iter *iter, lzma_index *i);
double wcstod(wchar_t *nptr, wchar_t *endptr);
ASN1_INTEGER *d2i_ASN1_INTEGER(ASN1_INTEGER *a, unsigned *in, long len);
int X509_REQ_get_attr_by_NID(X509_REQ *req, int nid, int lastpos);
int getchar();
int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx);
int OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid);
int DSA_up_ref(DSA *r);
double remainder(double x, double y);
int feupdateenv(fenv_t *envp);
int i2d_ASN1_OBJECT(ASN1_OBJECT *a, unsigned *pp);
int fputs_unlocked(char *s, FILE *stream);
int bdflush(int func, long data);
void endservent();
int getrpcbynumber_r(int number, rpcent *result_buf, char *buffer, size_t buflen, rpcent *result);
void ECDSA_METHOD_set_flags(ECDSA_METHOD *ecdsa_method, int flags);
wint_t getwchar_unlocked();
int isblank_l(int arg0, locale_t arg1);
PKCS7_ENCRYPT *d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT *a, unsigned *in, long len);
char *lzma_version_string();
int ECParameters_print(BIO *bp, EC_KEY *key);
td_err_e td_ta_delete(td_thragent_t *ta);
int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *file_actions);
char *dlerror();
int PEM_write_RSA_PUBKEY(FILE *fp, RSA *x);
uLong adler32(uLong adler, Bytef *buf, uInt len);
int i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cb, void *u);
int toupper_l(int c, locale_t l);
ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned *data, int len, char *sn, char *ln);
int nftw_func_t(char *filename, stat *status, int flag, FTW *info);
int fwide(FILE *fp, int mode);
void warn(char *format, int vararg);
int X509v3_get_ext_by_NID(stack_st_X509_EXTENSION *x, int nid, int lastpos);
int PEM_do_header(EVP_CIPHER_INFO *cipher, unsigned *data, long *len, pem_password_cb *callback, void *u);
int EC_KEY_print_fp(FILE *fp, EC_KEY *key, int off);
int CRYPTO_get_new_dynlockid();
lzma_vli lzma_index_hash_size(lzma_index_hash *index_hash);
int pthread_sigmask(int how, sigset_t *newmask, sigset_t *oldmask);
void res_close();
wint_t putwchar(wchar_t wc);
float wcstof_l(wchar_t *nptr, wchar_t *endptr, locale_t loc);
void X509_OBJECT_up_ref_count(X509_OBJECT *a);
int PEM_write_bio_X509(BIO *bp, X509 *x);
long strtold(char *nptr, char *endptr);
unsigned BN_div_word(BIGNUM *a, unsigned w);
int SHA224_Init(SHA256_CTX *c);
void err(int status, char *format, int vararg);
int PEM_write_bio_PKCS7_stream(BIO *out, PKCS7 *p7, BIO *in, int flags);
int inotify_init1(int flags);
int setup();
int CRYPTO_THREADID_cmp(CRYPTO_THREADID *a, CRYPTO_THREADID *b);
utmp *getutline(utmp *line);
char *strerror(int errnum);
int X509_NAME_add_entry_by_txt(X509_NAME *name, char *field, int type, unsigned *bytes, int len, int loc, int set);
int X509_STORE_set_trust(X509_STORE *ctx, int trust);
double erf(double arg0);
X509_SIG *d2i_PKCS8_fp(FILE *fp, X509_SIG *p8);
void PBEPARAM_free(PBEPARAM *a);
int fnmatch(char *pattern, char *name, int flags);
int nftw(char *dir, nftw_func_t func, int descriptors, int flag);
int innetgr(char *netgroup, char *host, char *user, char *domain);
tm *localtime(time_t *timer);
int openpty(int *amaster, int *aslave, char *name, termios *termp, winsize *winp);
int xstat(int ver, char *filename, stat *stat_buf);
ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO *bcont, ASN1_ITEM *it);
wctrans_t wctrans(char *property);
int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, unsigned *d, long len);
void *dlsym(void *handle, char *name);
X509_REVOKED *X509_REVOKED_new();
ssize_t readv(int fd, iovec *iovec, int count);
int swprintf(wchar_t *s, size_t n, wchar_t *format, int vararg);
char *SSL_get_cipher_list(SSL *s, int n);
int ASN1_BIT_STRING_num_asc(char *name, BIT_STRING_BITNAME *tbl);
int ttyname_r(int fd, char *buf, size_t buflen);
X509_ATTRIBUTE *X509at_get_attr(stack_st_X509_ATTRIBUTE *x, int loc);
int rand_r(unsigned *seed);
int timerfd_create(clockid_t clock_id, int flags);
int ntp_gettime(ntptimeval *ntv);
EVP_CIPHER *EVP_rc2_64_cbc();
int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *attr, int pref);
void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth, int verify_recover_init, int verify_recover);
PKCS7 *PKCS7_dup(PKCS7 *p7);
long ynl(int arg0, long arg1);
int SSL_CTX_use_certificate_file(SSL_CTX *ctx, char *file, int type);
int DH_up_ref(DH *dh);
int free_hugepages(void *addr);
void *memfrob(void *s, size_t n);
int i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *in, int flags);
int ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
EC_METHOD *EC_GROUP_method_of(EC_GROUP *group);
int HMAC_Init(HMAC_CTX *ctx, void *key, int len, EVP_MD *md);
void rewind(FILE *stream);
int mblen(char *s, size_t n);
X509_CERT_PAIR *X509_CERT_PAIR_new();
char *la_objsearch(char *name, uintptr_t *cookie, unsigned flag);
int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, char *identity_hint);
int i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME *a, unsigned *out);
int X509_CRL_match(X509_CRL *a, X509_CRL *b);
int i2a_ASN1_STRING(BIO *bp, ASN1_STRING *a, int type);
int SSL_get_fd(SSL *s);
int CRYPTO_EX_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx, long argl, void *argp);
int open64(char *file, int oflag, int vararg);
int BN_mod_exp_mont_word(BIGNUM *r, unsigned a, BIGNUM *p, BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
ssize_t pwrite64(int fd, void *buf, size_t n, off64_t offset);
int inet6_opt_find(void *extbuf, socklen_t extlen, int offset, uint8_t type, socklen_t *lenp, void *databufp);
int ungetc(int c, FILE *stream);
int ntp_adjtime(timex *tntx);
EVP_CIPHER *EVP_aes_192_ctr();
int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit);
int pthread_join(pthread_t th, void *thread_return);
X509_EXTENSION *X509_get_ext(X509 *x, int loc);
int at_quick_exit(void func);
int posix_fallocate64(int fd, off64_t offset, off64_t len);
int pthread_rwlockattr_getpshared(pthread_rwlockattr_t *attr, int *pshared);
void funlockfile(FILE *stream);
int X509_STORE_load_locations(X509_STORE *ctx, char *file, char *dir);
int get_by_alias(X509_LOOKUP *ctx, int type, char *str, int len, X509_OBJECT *ret);
int sigdelset(sigset_t *set, int signo);
void ASN1_TIME_free(ASN1_TIME *a);
int getutline_r(utmp *line, utmp *buffer, utmp *result);
float cexpf(float z);
int iscntrl(int arg0);
int EC_GROUP_copy(EC_GROUP *dst, EC_GROUP *src);
EVP_CIPHER *EVP_camellia_192_cfb8();
int PEM_write(FILE *fp, char *name, char *hdr, unsigned *data, long len);
protoent *getprotoent();
char *SSL_get_psk_identity_hint(SSL *s);
int mlockall(int flags);
int SHA384_Update(SHA512_CTX *c, void *data, size_t len);
EVP_CIPHER *EVP_camellia_192_cfb1();
stack_st_X509_EXTENSION *X509_REQ_get_extensions(X509_REQ *req);
int SSL_set_trust(SSL *s, int trust);
void muntrace();
int freadable(FILE *fp);
servent *getservent();
int getcpu(unsigned *cpu, unsigned *node, getcpu_cache *tcache);
char *qfcvt(long value, int ndigit, int *decpt, int *sign);
size_t SSL_get_peer_finished(SSL *s, void *buf, size_t count);
unsigned strtouq(char *nptr, char *endptr, int base);
int tcdrain(int fd);
int setsourcefilter(int s, uint32_t interface_addr, sockaddr *group, socklen_t grouplen, uint32_t fmode, uint32_t numsrc, sockaddr_storage *slist);
int BN_set_bit(BIGNUM *a, int n);
EVP_CIPHER *EVP_aes_256_xts();
int BN_GF2m_mod(BIGNUM *r, BIGNUM *a, BIGNUM *p);
wint_t btowc(int c);
int openat(int fd, char *file, int oflag, int vararg);
int finitef(float value);
X509_PKEY *X509_PKEY_new();
int EVP_PKEY_get_attr_by_OBJ(EVP_PKEY *key, ASN1_OBJECT *obj, int lastpos);
int sem_unlink(char *name);
int finitel(long value);
char *SSL_get_shared_ciphers(SSL *s, char *buf, int len);
u_int ns_get16(u_char *arg0);
int X509_alias_set1(X509 *x, unsigned *name, int len);
CRYPTO_EX_DATA_IMPL *CRYPTO_get_ex_data_implementation();
ssize_t IO_padn(IO_FILE *arg0, int arg1, ssize_t arg2);
size_t fwrite(void *ptr, size_t size, size_t n, FILE *s);
BIGNUM *get_rfc3526_prime_1536(BIGNUM *bn);
BIO_METHOD *BIO_s_file();
int X509_policy_check(X509_POLICY_TREE *ptree, int *pexplicit_policy, stack_st_X509 *certs, stack_st_ASN1_OBJECT *policy_oids, unsigned flags);
void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM *param, unsigned flags);
int s390_pci_mmio_read(unsigned mmio_addr, void *user_buffer, size_t length);
int X509_NAME_add_entry(X509_NAME *name, X509_NAME_ENTRY *ne, int loc, int set);
ASN1_NULL *ASN1_NULL_new();
long a64l(char *s);
int setgid(gid_t gid);
int EVP_CIPHER_key_length(EVP_CIPHER *cipher);
int res_mailok(char *arg0);
int utime(char *file, utimbuf *file_times);
ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT *a, unsigned *pp, long length);
long fmal(long x, long y, long z);
wchar_t *wcspbrk(wchar_t *wcs, wchar_t *accept);
wchar_t *wcsncpy(wchar_t *dest, wchar_t *src, size_t n);
lzma_vli lzma_index_uncompressed_size(lzma_index *i);
int SHA512_Init(SHA512_CTX *c);
int RSA_blinding_on(RSA *rsa, BN_CTX *ctx);
void CRYPTO_get_locked_mem_ex_functions(void *m, void f);
int libc_current_sigrtmax();
int sched_get_priority_min(int algorithm);
int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, EVP_CIPHER *cipher, ENGINE *impl, unsigned *key, unsigned *iv, int enc);
int fchown(int fd, uid_t owner, gid_t group);
int PEM_write_bio_X509_REQ_NEW(BIO *bp, X509_REQ *x);
int fstatvfs64(int fildes, statvfs64 *buf);
int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags, char *hdr, ASN1_ITEM *it);
char *BUF_strdup(char *str);
int PKCS5_PBKDF2_HMAC(char *pass, int passlen, unsigned *salt, int saltlen, int iter, EVP_MD *digest, int keylen, unsigned *out);
double strtod(char *nptr, char *endptr);
int bread(BIO *arg0, char *arg1, int arg2);
int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *param, unsigned *ip, size_t iplen);
int vfwscanf(FILE *s, wchar_t *format, gnuc_va_list arg);
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_new();
int get_by_issuer_serial(X509_LOOKUP *ctx, int type, X509_NAME *name, ASN1_INTEGER *serial, X509_OBJECT *ret);
EVP_PKEY *X509_get_pubkey(X509 *x);
char *OBJ_NAME_get(char *name, int type);
char *gcvt(double value, int ndigit, char *buf);
int pthread_cancel(pthread_t th);
int X509_get_ext_by_OBJ(X509 *x, ASN1_OBJECT *obj, int lastpos);
int register_printf_function(int spec, printf_function func, printf_arginfo_function arginfo);
int ASN1_STRING_cmp(ASN1_STRING *a, ASN1_STRING *b);
EVP_CIPHER *EVP_aes_128_gcm();
int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
int pthread_barrier_init(pthread_barrier_t *barrier, pthread_barrierattr_t *attr, unsigned count);
int restart_syscall();
int X509_set_notAfter(X509 *x, ASN1_TIME *tm);
SSL_METHOD *DTLS_client_method();
void CRYPTO_get_dynlock_destroy_callback();
int PKCS5_PBKDF2_HMAC_SHA1(char *pass, int passlen, unsigned *salt, int saltlen, int iter, int keylen, unsigned *out);
SSL_METHOD *TLSv1_1_server_method();
void obstack_newchunk(obstack *arg0, int arg1);
char *BN_options();
float logf(float x);
EC_KEY *EC_KEY_new();
double logb(double x);
float sinhf(float x);
int fileno_unlocked(FILE *stream);
void encrypt_r(char *glibc_block, int edflag, crypt_data *data);
void SSL_CTX_set_client_CA_list(SSL_CTX *ctx, stack_st_X509_NAME *name_list);
int flock(int fd, int operation);
error_t envz_merge(char *envz, size_t *envz_len, char *envz2, size_t envz2_len, int override);
int i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey);
int i2d_PKCS7_ENCRYPT(PKCS7_ENCRYPT *a, unsigned *out);
uint64_t lzma_easy_encoder_memusage(uint32_t preset);
int SSL_set_fd(SSL *s, int fd);
aliasent *getaliasent();
int X509_REQ_add_extensions_nid(X509_REQ *req, stack_st_X509_EXTENSION *exts, int nid);
int siggetmask();
int X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, char *argc, long argl, char *ret);
int pthread_condattr_destroy(pthread_condattr_t *attr);
stack_st_X509_NAME *SSL_CTX_get_client_CA_list(SSL_CTX *s);
int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned *out, int *outl);
void ERR_load_ECDSA_strings();
int EC_POINT_set_affine_coordinates_GFp(EC_GROUP *group, EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx);
PBEPARAM *PBEPARAM_new();
long atol(char *nptr);
int fedisableexcept(int excepts);
int SSL_srp_server_param_with_username(SSL *s, int *ad);
void *lh_delete(LHASH *lh, void *data);
EC_POINT *EC_POINT_new(EC_GROUP *group);
int OBJ_obj2nid(ASN1_OBJECT *o);
int SSL_want(SSL *s);
BN_BLINDING *BN_BLINDING_new(BIGNUM *A, BIGNUM *Ai, BIGNUM *mod);
EVP_CIPHER *EVP_desx_cbc();
int i2t_ASN1_OBJECT(char *buf, int buf_len, ASN1_OBJECT *a);
ASN1_OCTET_STRING *ASN1_OCTET_STRING_new();
char *catgets(nl_catd catalog, int set, int number, char *string);
uint32_t lzma_index_checks(lzma_index *i);
size_t strcspn(char *s, char *reject);
int SSL_CTX_set_trust(SSL_CTX *s, int trust);
int getrandom(void *buf, size_t buflen, unsigned flags);
wchar_t *wcschrnul(wchar_t *s, wchar_t wc);
int libc_current_sigrtmin();
int gethostent_r(hostent *result_buf, char *buf, size_t buflen, hostent *result, int *h_errnop);
void free(void *ptr);
char *strchrnul(char *s, int c);
void mcleanup();
int SSL_CTX_add_session(SSL_CTX *s, SSL_SESSION *c);
int EVP_CIPHER_block_size(EVP_CIPHER *cipher);
int nice(int inc);
BIGNUM *BN_get0_nist_prime_384();
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf);
u_int res_randomid();
int s390_runtime_instr(int command, int signum);
void *X509at_get0_data_by_OBJ(stack_st_X509_ATTRIBUTE *x, ASN1_OBJECT *obj, int lastpos, int type);
ASN1_TIME *d2i_ASN1_TIME(ASN1_TIME *a, unsigned *in, long len);
void BN_MONT_CTX_free(BN_MONT_CTX *mont);
DH *d2i_DHxparams(DH *a, unsigned *pp, long length);
void endhostent();
point_conversion_form_t EC_KEY_get_conv_form(EC_KEY *key);
float erff(float arg0);
int isinff(float value);
double erfc(double arg0);
int HMAC_Final(HMAC_CTX *ctx, unsigned *md, unsigned *len);
double pow10(double x);
int X509_LOOKUP_by_alias(X509_LOOKUP *ctx, int type, char *str, int len, X509_OBJECT *ret);
long erfl(long arg0);
int isprint_l(int arg0, locale_t arg1);
long strtoll_l(char *nptr, char *endptr, int base, locale_t loc);
int ns_name_pack(u_char *arg0, u_char *arg1, int arg2, u_char *arg3, u_char *arg4);
void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth);
int rand();
int RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned *EM, unsigned *mHash, EVP_MD *Hash, EVP_MD *mgf1Hash, int sLen);
X509_NAME *X509_get_subject_name(X509 *a);
BIO *SSL_get_wbio(SSL *s);
float floorf(float x);
int EC_METHOD_get_field_type(EC_METHOD *meth);
uint32_t ntohl(uint32_t netlong);
int BN_nist_mod_224(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
EVP_CIPHER *EVP_cast5_ofb();
long floorl(long x);
int X509_CRL_sort(X509_CRL *crl);
void PEM_SealUpdate(PEM_ENCODE_SEAL_CTX *ctx, unsigned *out, int *outl, unsigned *in, int inl);
double ldexp(double x, int exponent);
off64_t gzoffset64(gzFile arg0);
unsigned *ASN1_STRING_data(ASN1_STRING *x);
int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, char *pass, int passlen, ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de);
int isinfl(long value);
int OBJ_NAME_add(char *name, int type, char *data);
int ns_name_compress(char *arg0, u_char *arg1, size_t arg2, u_char *arg3, u_char *arg4);
char *dcgettext(char *domainname, char *msgid, int category);
char *strncpy(char *dest, char *src, size_t n);
int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
int next_proto_select_cb(SSL *s, unsigned *out, unsigned *outlen, unsigned *in, unsigned inlen, void *arg);
long BIO_callback_ctrl(BIO *b, int cmd, void fp);
int SSL_do_handshake(SSL *s);
int isalnum(int arg0);
int SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags);
ssize_t listxattr(char *path, char *list, size_t size);
double exp2(double x);
ttyent *getttynam(char *tty);
int epoll_create1(int flags);
void qsort(void *base, size_t nmemb, size_t size, compar_fn_t compar);
unsigned bn_div_words(unsigned h, unsigned l, unsigned d);
int i2d_ASN1_TIME(ASN1_TIME *a, unsigned *out);
ASN1_IA5STRING *ASN1_IA5STRING_new();
EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey);
int faccessat(int fd, char *file, int type, int flag);
int isalpha(int arg0);
void EVP_PKEY_free(EVP_PKEY *pkey);
void assert_perror_fail(int errnum, char *file, unsigned line, char *function);
int dprintf(int fd, char *fmt, int vararg);
cpu_set_t *sched_cpualloc(size_t count);
int getpwnam_r(char *name, passwd *resultbuf, char *buffer, size_t buflen, passwd *result);
int ecvt_r(double value, int ndigit, int *decpt, int *sign, char *buf, size_t len);
int EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX *ctx);
void EC_POINT_free(EC_POINT *point);
int fpclassify(double value);
int inotify_init();
int X509_REQ_add1_attr_by_txt(X509_REQ *req, char *attrname, int type, unsigned *bytes, int len);
void SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx, void remove_session_cb);
td_err_e td_thr_setgregs(td_thrhandle_t *th, prgregset_t gregs);
void *pvalloc(size_t size);
void X509_CRL_METHOD_free(X509_CRL_METHOD *m);
void sync();
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype, void *data, int len);
long sinl(long x);
int mkostemp(char *template, int flags);
ASN1_T61STRING *d2i_ASN1_T61STRING(ASN1_T61STRING *a, unsigned *in, long len);
int isascii(int c);
int compar_fn_t(void *arg0, void *arg1);
int BN_ucmp(BIGNUM *a, BIGNUM *b);
EVP_CIPHER *EVP_rc2_cfb64();
void SSL_set_state(SSL *ssl, int state);
float powf(float x, float y);
char *SSL_rstate_string_long(SSL *s);
void BIO_set_cipher(BIO *b, EVP_CIPHER *c, unsigned *k, unsigned *i, int enc);
int check_policy(X509_STORE_CTX *ctx);
int timerfd_gettime(int ufd, itimerspec *otmr);
lconv *localeconv();
int BN_GF2m_mod_sqr(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
SSL *SSL_dup(SSL *ssl);
void SSL_set_tmp_dh_callback(SSL *ssl, DH *dh);
int BN_mod_exp2_mont(BIGNUM *r, BIGNUM *a1, BIGNUM *p1, BIGNUM *a2, BIGNUM *p2, BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
int td_key_iter_f(thread_key_t arg0, void *arg2);
long ssl_ctrl(SSL *s, int cmd, long larg, void *parg);
long expl(long x);
int EVP_PKEY_asn1_add0(EVP_PKEY_ASN1_METHOD *ameth);
BIGNUM *BN_copy(BIGNUM *a, BIGNUM *b);
float expf(float x);
int custom_ext_add_cb(SSL *s, unsigned ext_type, unsigned *out, size_t *outlen, int *al, void *add_arg);
int DH_size(DH *dh);
char *X509_NAME_oneline(X509_NAME *a, char *buf, int size);
int SHA256_Init(SHA256_CTX *c);
SSL_METHOD *DTLSv1_2_client_method();
SSL_METHOD *TLSv1_2_method();
void custom_ext_free_cb(SSL *s, unsigned ext_type, unsigned *out, void *add_arg);
lzma_ret lzma_filter_flags_decode(lzma_filter *filter, lzma_allocator *allocator, uint8_t *in, size_t *in_pos, size_t in_size);
DH *DH_new();
int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *arg3);
double cacosh(double z);
int isfdtype(int fd, int fdtype);
size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps);
int pthread_once(pthread_once_t *once_control, void init_routine);
int pthread_atfork(void prepare, void parent, void child);
float cacosf(float z);
void SSL_set_shutdown(SSL *ssl, int mode);
ECDSA_SIG *ECDSA_do_sign(unsigned *dgst, int dgst_len, EC_KEY *eckey);
unsigned bn_sub_words(unsigned *rp, unsigned *ap, unsigned *bp, int num);
EVP_MD *EVP_sha1();
td_err_e td_thr_sigsetmask(td_thrhandle_t *th, sigset_t *ss);
EVP_CIPHER *EVP_aes_256_gcm();
int wcscoll_l(wchar_t *s1, wchar_t *s2, locale_t loc);
int X509_CRL_get_ext_by_OBJ(X509_CRL *x, ASN1_OBJECT *obj, int lastpos);
int BIO_read(BIO *b, void *data, int len);
void pthread_register_cancel(pthread_unwind_buf_t *buf);
char *get_current_dir_name();
char *SSL_CIPHER_get_version(SSL_CIPHER *c);
int PEM_write_NETSCAPE_CERT_SEQUENCE(FILE *fp, NETSCAPE_CERT_SEQUENCE *x);
int iswdigit_l(wint_t wc, locale_t locale);
int pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr, size_t stacksize);
int iswalpha(wint_t wc);
ssize_t llistxattr(char *path, char *list, size_t size);
int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data, EVP_MD *type, unsigned *md, unsigned *len);
char *strtok(char *s, char *delim);
void X509_reject_clear(X509 *x);
ASN1_OCTET_STRING *PKCS7_digest_from_attributes(stack_st_X509_ATTRIBUTE *sk);
int timer_getoverrun(timer_t timerid);
long SSL_CTX_callback_ctrl(SSL_CTX *arg0, int arg1);
EVP_PKEY *b2i_PrivateKey(unsigned *in, long length);
int glob(char *pattern, int flags, int errfunc, glob_t *pglob);
int addseverity(int severity, char *string);
X509_EXTENSION *X509v3_get_ext(stack_st_X509_EXTENSION *x, int loc);
int X509_PUBKEY_set(X509_PUBKEY *x, EVP_PKEY *pkey);
X509_EXTENSION *X509_REVOKED_delete_ext(X509_REVOKED *x, int loc);
void outsb(unsigned port, void *addr, unsigned count);
void X509_STORE_set_verify_cb(X509_STORE *ctx, int verify_cb);
char *dcngettext(char *domainname, char *msgid1, char *msgid2, unsigned n, int category);
int ffsll(long ll);
int i2a();
wint_t getwc_unlocked(FILE *stream);
void EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD *pmeth, int derive_init, int derive);
int BIO_dump_fp(FILE *fp, char *s, int len);
void outsl(unsigned port, void *addr, unsigned count);
pitem *pqueue_peek(pqueue pq);
EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY *a);
void ERR_load_COMP_strings();
EVP_CIPHER *EVP_seed_ofb();
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int tcgetattr(int fd, termios *termios_p);
unsigned alarm(unsigned seconds);
u_char *ns_find_tsig(u_char *arg0, u_char *arg1);
SSL_METHOD *TLSv1_1_method();
ssize_t fgetxattr(int fd, char *name, void *value, size_t size);
void ASN1_PRINTABLE_free(ASN1_STRING *a);
void outl_p(unsigned value, unsigned port);
int i2d_ASN1_GENERALSTRING(ASN1_GENERALSTRING *a, unsigned *out);
EVP_CIPHER *EVP_aes_192_cfb1();
X509_REQ *X509_REQ_new();
void error_at_line_alias(int status, int errnum, char *fname, unsigned line, char *format, int vararg);
int *X509_REQ_get_extension_nids();
void setlinebuf(FILE *stream);
DSA_METHOD *DSA_OpenSSL();
float remainderf(float x, float y);
void outb_p(unsigned value, unsigned port);
int RSA_set_method(RSA *rsa, RSA_METHOD *meth);
int setdomainname(char *name, size_t len);
int pthread_getattr_np(pthread_t th, pthread_attr_t *attr);
int BN_GF2m_mod_sqrt(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
unsigned ASN1_STRING_get_default_mask();
int X509_get_ext_count(X509 *x);
int iopl(int level);
int BN_mod_exp_recp(BIGNUM *r, BIGNUM *a, BIGNUM *p, BIGNUM *m, BN_CTX *ctx);
SSL_SESSION *d2i_SSL_SESSION(SSL_SESSION *a, unsigned *pp, long length);
X509_CINF *X509_CINF_new();
rsa_st *EVP_PKEY_get1_RSA(EVP_PKEY *pkey);
void info_callback(SSL *ssl, int type, int val);
int SSL_SESSION_set1_id_context(SSL_SESSION *s, unsigned *sid_ctx, unsigned sid_ctx_len);
int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx);
EC_GROUP *EC_GROUP_new_curve_GFp(BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
aliasent *getaliasbyname(char *name);
int X509_NAME_print_ex(BIO *out, X509_NAME *nm, int indent, unsigned flags);
int posix_spawnattr_getschedpolicy(posix_spawnattr_t *attr, int *schedpolicy);
int SSL_set_wfd(SSL *s, int fd);
int PKCS7_final(PKCS7 *p7, BIO *data, int flags);
DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA *dsa);
int fgetpos64(FILE *stream, fpos64_t *pos);
SRTP_PROTECTION_PROFILE *SSL_get_selected_srtp_profile(SSL *s);
BIO_METHOD *BIO_f_null();
void X509_STORE_set_lookup_crls_cb(X509_STORE *ctx, stack_st_X509_CRL *cb);
PKCS7_DIGEST *d2i_PKCS7_DIGEST(PKCS7_DIGEST *a, unsigned *in, long len);
void res_nclose(res_state arg0);
int BN_asc2bn(BIGNUM *a, char *str);
int SSL_cache_hit(SSL *s);
int fesetenv(fenv_t *envp);
lzma_ret lzma_stream_footer_encode(lzma_stream_flags *options, uint8_t *out);
lzma_bool lzma_filter_decoder_is_supported(lzma_vli id);
int truncate(char *file, off_t length);
float lgammaf(float arg0);
int SHA1_Init(SHA_CTX *c);
int dup3(int fd, int fd2, int flags);
int dup2(int fd, int fd2);
int OBJ_sn2nid(char *s);
int pthread_timedjoin_np(pthread_t th, void *thread_return, timespec *abstime);
int i2d_X509_NAME_ENTRY(X509_NAME_ENTRY *a, unsigned *out);
double ceil(double x);
int SSL_get_wfd(SSL *s);
void *rawmemchr(void *s, int c);
unsigned *ctype_b_loc();
int ptsname_r(int fd, char *buf, size_t buflen);
int semop(int semid, sembuf *sops, size_t nsops);
int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param, char *name, size_t namelen);
void DSA_free(DSA *r);
int scandir(char *dir, dirent *namelist, int selector, int cmp);
int sigwaitinfo(sigset_t *set, siginfo_t *info);
int i2a_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *a);
int mkstemps64(char *template, int suffixlen);
int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX *ctx, char *cb);
EVP_MD *EVP_get_digestbyname(char *name);
void perror(char *s);
int i2d_ECDSA_SIG(ECDSA_SIG *sig, unsigned *pp);
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY *ne, char *field, int type, unsigned *bytes, int len);
int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose);
PBEPARAM *d2i_PBEPARAM(PBEPARAM *a, unsigned *in, long len);
void endprotoent();
int PEM_write_bio_SSL_SESSION(BIO *bp, SSL_SESSION *x);
void *argp_input(argp *argp, argp_state *state);
int nss_configure_lookup(char *dbname, char *string);
stack_st_X509_ATTRIBUTE *X509at_add1_attr(stack_st_X509_ATTRIBUTE *x, X509_ATTRIBUTE *attr);
void tdestroy(void *root, free_fn_t freefct);
long ASN1_INTEGER_get(ASN1_INTEGER *a);
void *sk_shift(STACK *st);
int dysize(int year);
unsigned ASN1_tag2bit(int tag);
void argp_usage(argp_state *state);
void BIO_free_all(BIO *a);
int X509_REVOKED_get_ext_count(X509_REVOKED *x);
X509_STORE *X509_STORE_new();
int X509_EXTENSION_get_critical(X509_EXTENSION *ex);
wchar_t *fgetws(wchar_t *ws, int n, FILE *stream);
int BN_rand(BIGNUM *rnd, int bits, int top, int bottom);
int strncmp(char *s1, char *s2, size_t n);
int pthread_detach(pthread_t th);
char *mkdtemp(char *template);
int fgetspent_r(FILE *stream, spwd *result_buf, char *buffer, size_t buflen, spwd *result);
uintptr_t la_symbind64(Elf64_Sym *sym, unsigned ndx, uintptr_t *refcook, uintptr_t *defcook, unsigned *flags, char *symname);
EC_METHOD *EC_GF2m_simple_method();
ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING *out, unsigned *in, int inlen, int inform, int nid);
int pthread_mutexattr_getpshared(pthread_mutexattr_t *attr, int *pshared);
int EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned *sigret, size_t *siglen);
char *strcat(char *dest, char *src);
int i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa);
int RSA_padding_check_X931(unsigned *to, int tlen, unsigned *f, int fl, int rsa_len);
wint_t putwc(wchar_t wc, FILE *stream);
int getsockname(int fd, SOCKADDR_ARG addr, socklen_t *len);
long dreml(long x, long y);
void EVP_MD_do_all(void fn, void *arg);
int RSA_padding_check_none(unsigned *to, int tlen, unsigned *f, int fl, int rsa_len);
EVP_MD *EVP_sha256();
int EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned *outm, int *outl);
int lremovexattr(char *path, char *name);
int EC_KEY_set_private_key(EC_KEY *key, BIGNUM *prv);
int app_verify_cookie_cb(SSL *ssl, unsigned *cookie, unsigned cookie_len);
int mq_notify(mqd_t mqdes, sigevent *notification);
void *sk_value(STACK *arg0, int arg1);
int sched_cpucount(size_t setsize, cpu_set_t *setp);
hostent *gethostbyname2(char *name, int af);
int fgetpos(FILE *stream, fpos_t *pos);
float erfcf(float arg0);
int posix_memalign(void *memptr, size_t alignment, size_t size);
int getrpcent_r(rpcent *result_buf, char *buffer, size_t buflen, rpcent *result);
long erfcl(long arg0);
void *EVP_PKEY_CTX_get_data(EVP_PKEY_CTX *ctx);
int BN_gcd(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
BIGNUM *get_rfc3526_prime_4096(BIGNUM *bn);
void CRYPTO_dbg_malloc(void *addr, int num, char *file, int line, int before_p);
int EC_GROUP_check_discriminant(EC_GROUP *group, BN_CTX *ctx);
time_t timelocal(tm *tp);
int munlock(void *addr, size_t len);
void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *a);
int i2d_ASN1_UTF8STRING(ASN1_UTF8STRING *a, unsigned *out);
RSA_METHOD *RSA_null_method();
unsigned *SHA384(unsigned *d, size_t n, unsigned *md);
int EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr);
void EVP_DecodeInit(EVP_ENCODE_CTX *ctx);
int PKCS7_set_type(PKCS7 *p7, int type);
clock_t times(tms *buffer);
void sched_cpufree(cpu_set_t *set);
int X509_CRL_get_ext_count(X509_CRL *x);
EVP_MD *EVP_md4();
EVP_MD *EVP_md5();
double cos(double x);
int i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa);
int matherr(exception *exc);
int i2d_ASN1_IA5STRING(ASN1_IA5STRING *a, unsigned *out);
int fstatat(int fd, char *file, stat *buf, int flag);
int re_match(re_pattern_buffer *buffer, char *string, int length, int start, re_registers *regs);
void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
char *SSL_alert_type_string_long(int value);
int pthread_attr_init(pthread_attr_t *attr);
int rpmatch(char *response);
void SSL_CONF_CTX_free(SSL_CONF_CTX *cctx);
int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned *to, int tlen, unsigned *from, int flen, unsigned *param, int plen, EVP_MD *md, EVP_MD *mgf1md);
int truncate64(char *file, off64_t length);
int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, char *version, int stream_size);
int isctype(int c, int mask);
void OpenSSLDie(char *file, int line, char *assertion);
ASN1_SEQUENCE_ANY *d2i_ASN1_SET_ANY(ASN1_SEQUENCE_ANY *a, unsigned *in, long len);
X509_CERT_AUX *d2i_X509_CERT_AUX(X509_CERT_AUX *a, unsigned *in, long len);
uintmax_t wcstoumax(gwchar_t *nptr, gwchar_t *endptr, int base);
void CRYPTO_dbg_free(void *addr, int before_p);
int IO_feof(IO_FILE *fp);
int BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1, BIGNUM *Xp2, BIGNUM *Xp, BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb);
X509 *X509_dup(X509 *x509);
float fmaxf(float x, float y);
int i2o_ECPublicKey(EC_KEY *key, unsigned *out);
int BIO_sock_should_retry(int i);
long fmaxl(long x, long y);
long fabsl(long x);
void *dlopen(char *file, int mode);
int PEM_write_bio_PKCS8(BIO *bp, X509_SIG *x);
int SSL_is_server(SSL *s);
int X509_TRUST_add(int id, int flags, int ck, char *name, int arg1, void *arg2);
int freading(FILE *fp);
char *strdup(char *s);
EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey);
long ccosl(long z);
int ppoll(pollfd *fds, nfds_t nfds, timespec *timeout, sigset_t *ss);
int pthread_spin_init(pthread_spinlock_t *lock, int pshared);
NETSCAPE_SPKI *d2i_NETSCAPE_SPKI(NETSCAPE_SPKI *a, unsigned *in, long len);
lzma_ret lzma_index_buffer_decode(lzma_index *i, uint64_t *memlimit, lzma_allocator *allocator, uint8_t *in, size_t *in_pos, size_t in_size);
int ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME *a);
int SSL_get_error(SSL *s, int ret_code);
int puts(char *s);
long hypotl(long x, long y);
char *stpncpy(char *dest, char *src, size_t n);
ASN1_OBJECT *X509_EXTENSION_get_object(X509_EXTENSION *ex);
int ns_name_ntol(u_char *arg0, u_char *arg1, size_t arg2);
void EC_KEY_set_asn1_flag(EC_KEY *eckey, int asn1_flag);
int X509at_get_attr_by_NID(stack_st_X509_ATTRIBUTE *x, int nid, int lastpos);
int EVP_DigestUpdate(EVP_MD_CTX *ctx, void *d, size_t cnt);
int fallocate64(int fd, int mode, off64_t offset, off64_t len);
ASN1_TIME *ASN1_TIME_new();
int RSA_padding_add_none(unsigned *to, int tlen, unsigned *f, int fl);
int putc(int c, FILE *stream);
int SSL_peek(SSL *ssl, void *buf, int num);
int get_by_fingerprint(X509_LOOKUP *ctx, int type, unsigned *bytes, int len, X509_OBJECT *ret);
EVP_CIPHER *EVP_camellia_192_cbc();
int X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr);
int BN_set_word(BIGNUM *a, unsigned w);
int ftruncate64(int fd, off64_t length);
void SSL_CTX_set_tmp_ecdh_callback(SSL_CTX *ctx, EC_KEY *ecdh);
int PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
long j0l(long arg0);
int i2d_X509_REVOKED(X509_REVOKED *a, unsigned *out);
int isalpha_l(int arg0, locale_t arg1);
int SSL_version(SSL *ssl);
int BN_nist_mod_256(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
void EVP_MD_CTX_init(EVP_MD_CTX *ctx);
int EC_POINT_is_at_infinity(EC_GROUP *group, EC_POINT *p);
int X509_signature_print(BIO *bp, X509_ALGOR *alg, ASN1_STRING *sig);
int vsscanf(char *s, char *format, gnuc_va_list arg);
long cimagl(long z);
int CRYPTO_set_locked_mem_functions(void *m, void free_func);
void vwarnx(char *format, gnuc_va_list arg1);
int BN_rand_range(BIGNUM *rnd, BIGNUM *range);
void freeifaddrs(ifaddrs *ifa);
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r);
int init(X509_LOOKUP *ctx);
int madvise(void *addr, size_t len, int advice);
int pthread_getname_np(pthread_t target_thread, char *buf, size_t buflen);
intmax_t imaxabs(intmax_t n);
X509_ATTRIBUTE *EVP_PKEY_get_attr(EVP_PKEY *key, int loc);
int sigfillset(sigset_t *set);
int RSA_verify_ASN1_OCTET_STRING(int type, unsigned *m, unsigned m_length, unsigned *sigbuf, unsigned siglen, RSA *rsa);
void *EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx);
ASN1_STRING *d2i_ASN1_type_bytes(ASN1_STRING *a, unsigned *pp, long length, int type);
int i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *eckey);
int X509_load_crl_file(X509_LOOKUP *ctx, char *file, int type);
ECDSA_SIG *d2i_ECDSA_SIG(ECDSA_SIG *sig, unsigned *pp, long len);
void CRYPTO_destroy_dynlockid(int i);
char *strptime_l(char *s, char *fmt, tm *tp, locale_t loc);
int clearenv();
stack_st_X509 *X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx);
int SSL_set_ssl_method(SSL *s, SSL_METHOD *method);
void free_fn_t(void *nodep);
X509_SIG *d2i_X509_SIG(X509_SIG *a, unsigned *in, long len);
int BIO_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
pid_t waitpid(pid_t pid, int *stat_loc, int options);
void EC_KEY_set_flags(EC_KEY *key, int flags);
void BN_BLINDING_set_thread_id(BN_BLINDING *arg0, unsigned arg1);
int ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING *a, int n);
int i2d_RSA_PSS_PARAMS(RSA_PSS_PARAMS *a, unsigned *out);
int uncompress(Bytef *dest, uLongf *destLen, Bytef *source, uLong sourceLen);
FILE *popen(char *command, char *modes);
int cfsetspeed(termios *termios_p, speed_t speed);
int res_ninit(res_state arg0);
int i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey);
int SSL_CONF_cmd(SSL_CONF_CTX *cctx, char *cmd, char *value);
mqd_t mq_open(char *name, int oflag, int vararg);
int X509_CRL_http_nbio(OCSP_REQ_CTX *rctx, X509_CRL *pcrl);
long get_phys_pages();
double conj(double z);
int BN_num_bits_word(unsigned arg0);
int SSL_set_srp_server_param(SSL *s, BIGNUM *N, BIGNUM *g, BIGNUM *sa, BIGNUM *v, char *info);
int remap_file_pages(void *start, size_t size, int prot, size_t pgoff, int flags);
void gconv_end_fct(gconv_step *arg0);
int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cb, void *u);
int aio_fsync64(int operation, aiocb64 *aiocbp);
float tanhf(float x);
long ssl_callback_ctrl(SSL *s, int cb_id, void fp);
int pthread_barrierattr_setpshared(pthread_barrierattr_t *attr, int pshared);
void X509_CRL_free(X509_CRL *a);
char *dngettext(char *domainname, char *msgid1, char *msgid2, unsigned n);
int sched_getaffinity(pid_t pid, size_t cpusetsize, cpu_set_t *cpuset);
stack_st_POLICYQUALINFO *X509_policy_node_get0_qualifiers(X509_POLICY_NODE *node);
int verify(X509_STORE_CTX *ctx);
EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY *a);
X509_ALGOR *d2i_X509_ALGOR(X509_ALGOR *a, unsigned *in, long len);
ASN1_INTEGER *BN_to_ASN1_INTEGER(BIGNUM *bn, ASN1_INTEGER *ai);
passwd *getpwent();
int SHA1_Final(unsigned *md, SHA_CTX *c);
int ASN1_parse(BIO *bp, unsigned *pp, long len, int indent);
float tanf(float x);
EVP_CIPHER *EVP_seed_ecb();
void EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned *out, int *outl, unsigned *in, int inl);
BIGNUM *get_rfc3526_prime_6144(BIGNUM *bn);
int PKCS7_add_crl(PKCS7 *p7, X509_CRL *x509);
int EVP_PKEY_missing_parameters(EVP_PKEY *pkey);
int spu_run(int fd, unsigned *npc, unsigned *event);
td_err_e td_thr_setprio(td_thrhandle_t *th, int prio);
void SSL_get_info_callback(SSL *ssl);
int gsignal(int sig);
NETSCAPE_SPKI *NETSCAPE_SPKI_b64_decode(char *str, int len);
void sk_free(STACK *arg0);
EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find_str(ENGINE *pe, char *str, int len);
gzFile gzdopen(int fd, char *mode);
char *getusershell();
int SSL_library_init();
int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);
void pqueue_free(pqueue pq);
int isgraph(int arg0);
int pthread_attr_getstack(pthread_attr_t *attr, void *stackaddr, size_t *stacksize);
u_char *p_fqname(u_char *arg0, u_char *arg1, FILE *arg2);
EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY *a);
int a2i();
int X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial);
int gai_error(gaicb *req);
ssize_t process_vm_writev(pid_t pid, iovec *lvec, unsigned liovcnt, iovec *rvec, unsigned riovcnt, unsigned flags);
unsigned bn_mul_words(unsigned *rp, unsigned *ap, int num, unsigned w);
int clock_adjtime(clockid_t clock_id, timex *utx);
int fwritable(FILE *fp);
int DHparams_print_fp(FILE *fp, DH *x);
uint64_t lzma_easy_decoder_memusage(uint32_t preset);
int vdprintf(int fd, char *fmt, gnuc_va_list arg);
int mlock2(void *addr, size_t len, int flags);
int iswcntrl_l(wint_t wc, locale_t locale);
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE *attr, char *atrname, int type, unsigned *bytes, int len);
long nrand48(unsigned *xsubi);
void seekdir(DIR *dirp, long pos);
void SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx);
ssize_t sendmsg(int fd, msghdr *message, int flags);
int EVP_PKEY_bits(EVP_PKEY *pkey);
int tcflow(int fd, int action);
int fetestexcept(int excepts);
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attr, int prioceiling);
int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
int iswalnum(wint_t wc);
int i2d_PKCS8_fp(FILE *fp, X509_SIG *p8);
int versionsort(dirent *e1, dirent *e2);
int tls_session_secret_cb_fn(SSL *s, void *secret, int *secret_len, stack_st_SSL_CIPHER *peer_ciphers, SSL_CIPHER *cipher, void *arg);
int EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x, BIGNUM *y);
int PEM_bytes_read_bio(unsigned *pdata, long *plen, char *pnm, char *name, BIO *bp, pem_password_cb *cb, void *u);
td_err_e td_ta_reset_stats(td_thragent_t *ta);
int IO_ftrylockfile(IO_FILE *arg0);
int ASN1_TYPE_get(ASN1_TYPE *a);
int ASN1_STRING_set_default_mask_asc(char *p);
int X509_digest(X509 *data, EVP_MD *type, unsigned *md, unsigned *len);
float ctanf(float z);
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);
int ASN1_GENERALIZEDTIME_print(BIO *fp, ASN1_GENERALIZEDTIME *a);
int pthread_condattr_setclock(pthread_condattr_t *attr, clockid_t clock_id);
int EVP_CIPHER_type(EVP_CIPHER *ctx);
RSA_METHOD *RSA_get_method(RSA *rsa);
int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer);
int DH_set_ex_data(DH *d, int idx, void *arg);
int EC_POINT_invert(EC_GROUP *group, EC_POINT *a, BN_CTX *ctx);
void gl_closedir(void *arg0);
int res_nquery(res_state arg0, char *arg1, int arg2, int arg3, u_char *arg4, int arg5);
void COMP_zlib_cleanup();
int signbit(double value);
void X509_REQ_set_extension_nids(int *nids);
int pthread_attr_getschedpolicy(pthread_attr_t *attr, int *policy);
int SSL_SESSION_print_fp(FILE *fp, SSL_SESSION *ses);
int SSL_CONF_CTX_finish(SSL_CONF_CTX *cctx);
int vm86old(vm86_struct *info);
X509_REQ *d2i_X509_REQ_bio(BIO *bp, X509_REQ *req);
int cacheflush(char *addr, int nbytes, int cache);
char *tmpnam(char *s);
void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth, int pub_decode, int pub_encode, int pub_cmp, int pub_print, int pkey_size, int pkey_bits);
int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned *d, long len);
void *tdelete(void *key, void *rootp, compar_fn_t compar);
int SSL_get_verify_callback(SSL *s);
int getopt_long_only(int argc, char *argv, char *shortopts, option *longopts, int *longind);
int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len);
error_t argp_parse(argp *argp, int argc, char *argv, unsigned flags, int *arg_index, void *input);
int BN_mod_exp_simple(BIGNUM *r, BIGNUM *a, BIGNUM *p, BIGNUM *m, BN_CTX *ctx);
char *re_compile_pattern(char *pattern, size_t length, re_pattern_buffer *buffer);
X509_LOOKUP *X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m);
EVP_CIPHER *EVP_camellia_192_cfb128();
off_t gzseek(gzFile arg0, off_t arg1, int arg2);
int SSL_CTX_SRP_CTX_free(SSL_CTX *ctx);
size_t lzma_stream_buffer_bound(size_t uncompressed_size);
int dsa_mod_exp(DSA *dsa, BIGNUM *rr, BIGNUM *a1, BIGNUM *p1, BIGNUM *a2, BIGNUM *p2, BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont);
int SSL_SESSION_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
pid_t wait3(WAIT_STATUS stat_loc, int options, rusage *usage);
char *hstrerror(int err_num);
size_t fbufsize(FILE *fp);
int iswctype_l(wint_t wc, wctype_t desc, locale_t locale);
int SSL_CTX_set_ssl_version(SSL_CTX *ctx, SSL_METHOD *meth);
char *strstr(char *haystack, char *needle);
X509_CRL *X509_STORE_CTX_get0_current_crl(X509_STORE_CTX *ctx);
int dn_comp(char *arg0, u_char *arg1, int arg2, u_char *arg3, u_char *arg4);
ASN1_UTCTIME *ASN1_UTCTIME_new();
int X509_print(BIO *bp, X509 *x);
unsigned gnu_dev_minor(unsigned dev);
int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned *md, unsigned *s);
int RSA_sign_ASN1_OCTET_STRING(int type, unsigned *m, unsigned m_length, unsigned *sigret, unsigned *siglen, RSA *rsa);
int daemon(int nochdir, int noclose);
BIO_METHOD *BIO_f_nbio_test();
char *ctime(time_t *timer);
int PEM_write_DSAparams(FILE *fp, DSA *x);
int bpf(int cmd, bpf_attr *attr, unsigned size);
td_err_e td_thr_dbsuspend(td_thrhandle_t *th);
locale_t newlocale(int category_mask, char *locale, locale_t base);
ASN1_OBJECT *OBJ_txt2obj(char *s, int no_name);
EVP_CIPHER *EVP_camellia_192_ofb();
unsigned BIO_number_read(BIO *bio);
int epoll_pwait(int epfd, epoll_event *events, int maxevents, int timeout, sigset_t *ss);
EVP_CIPHER *EVP_des_ede3_cfb8();
void pthread_unwind_next(pthread_unwind_buf_t *buf);
int msgget(key_t key, int msgflg);
FILE *freopen(char *filename, char *modes, FILE *stream);
ASN1_TYPE *X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx);
EVP_CIPHER *EVP_des_ede3_cfb1();
sighandler_t bsd_signal(int sig, sighandler_t handler);
int posix_spawnattr_setsigmask(posix_spawnattr_t *attr, sigset_t *sigmask);
X509_SIG *d2i_PKCS8_bio(BIO *bp, X509_SIG *p8);
size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream);
void globfree(glob_t *pglob);
long gammal(long arg0);
int RSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
char *strsignal(int sig);
void malloc_stats();
int getservbyport_r(int port, char *proto, servent *result_buf, char *buf, size_t buflen, servent *result);
int X509_add1_trust_object(X509 *x, ASN1_OBJECT *obj);
char *realpath(char *name, char *resolved);
FTSENT64 *fts64_read(FTS64 *arg0);
int EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx);
int umount(char *special_file);
int EVP_PKEY_asn1_get_count();
int PEM_write_X509_AUX(FILE *fp, X509 *x);
key_t ftok(char *pathname, int proj_id);
X509_EXTENSION *X509_EXTENSION_dup(X509_EXTENSION *ex);
void freeaddrinfo(addrinfo *ai);
int posix_spawnattr_getsigdefault(posix_spawnattr_t *attr, sigset_t *sigdefault);
RSA *PEM_read_RSAPrivateKey(FILE *fp, RSA *x, pem_password_cb *cb, void *u);
int rsa_pub_dec(int flen, unsigned *from, unsigned *to, RSA *rsa, int padding);
int X509_VERIFY_PARAM_get_depth(X509_VERIFY_PARAM *param);
int PEM_write_bio_X509_REQ(BIO *bp, X509_REQ *x);
char *ctermid(char *s);
void BN_clear(BIGNUM *a);
void SSL_CTX_set_info_callback(SSL_CTX *ctx, void cb);
int setegid(gid_t gid);
int EC_POINTs_make_affine(EC_GROUP *group, size_t num, EC_POINT *points, BN_CTX *ctx);
ssize_t recvfrom(int fd, void *buf, size_t n, int flags, SOCKADDR_ARG addr, socklen_t *addr_len);
int accept4(int fd, SOCKADDR_ARG addr, socklen_t *addr_len, int flags);
int sigemptyset(sigset_t *set);
int X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx);
wctrans_t wctrans_l(char *property, locale_t locale);
int lutimes(char *file, timeval *tvp);
EC_KEY *d2i_ECParameters(EC_KEY *key, unsigned *in, long len);
int xstat64(int ver, char *filename, stat64 *stat_buf);
int X509_NAME_set(X509_NAME *xn, X509_NAME *name);
EVP_CIPHER *EVP_rc2_cbc();
lzma_vli lzma_block_total_size(lzma_block *block);
EVP_CIPHER *EVP_des_ecb();
int sighold(int sig);
void *CRYPTO_get_ex_data(CRYPTO_EX_DATA *ad, int idx);
int getpagesize();
int swapcontext(ucontext_t *oucp, ucontext_t *ucp);
int fchmodat(int fd, char *file, mode_t mode, int flag);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
int X509_CRL_set_lastUpdate(X509_CRL *x, ASN1_TIME *tm);
tm *gmtime(time_t *timer);
void SSL_CTX_set_cert_store(SSL_CTX *arg0, X509_STORE *arg1);
int rcmd_af(char *ahost, unsigned rport, char *locuser, char *remuser, char *cmd, int *fd2p, sa_family_t af);
int gethostbyaddr_r(void *addr, socklen_t len, int type, hostent *result_buf, char *buf, size_t buflen, hostent *result, int *h_errnop);
X509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION *ex, ASN1_OBJECT *obj, int crit, ASN1_OCTET_STRING *data);
PBKDF2PARAM *d2i_PBKDF2PARAM(PBKDF2PARAM *a, unsigned *in, long len);
int i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa);
int fcloseall();
int sigtimedwait(sigset_t *set, siginfo_t *info, timespec *timeout);
int OBJ_add_object(ASN1_OBJECT *obj);
EVP_MD *EVP_sha224();
int RSA_print_fp(FILE *fp, RSA *r, int offset);
int ECPKParameters_print_fp(FILE *fp, EC_GROUP *x, int off);
int EVP_DigestInit_ex(EVP_MD_CTX *ctx, EVP_MD *type, ENGINE *impl);
ASN1_BIT_STRING *X509_get0_pubkey_bitstr(X509 *x);
int BIO_get_accept_socket(char *host_port, int mode);
size_t wcsftime_l(wchar_t *s, size_t maxsize, wchar_t *format, tm *tp, locale_t loc);
int clock_getcpuclockid(pid_t pid, clockid_t *clock_id);
uint32_t lzma_version_number();
unsigned la_objopen(link_map *map, Lmid_t lmid, uintptr_t *cookie);
SSL_METHOD *SSLv3_method();
char *canonicalize_file_name(char *name);
void SSL_set_accept_state(SSL *s);
void SSL_set_psk_server_callback(SSL *ssl, unsigned psk_server_callback);
int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned flags);
int iswdigit(wint_t wc);
int BIO_socket_ioctl(int fd, long type, void *arg);
int vm86(unsigned fn, vm86plus_struct *v86);
int iswpunct_l(wint_t wc, locale_t locale);
long llround(double x);
int X509_REQ_digest(X509_REQ *data, EVP_MD *type, unsigned *md, unsigned *len);
int EC_curve_nist2nid(char *name);
int inflateEnd(z_streamp strm);
lzma_ret lzma_raw_decoder(lzma_stream *strm, lzma_filter *filters);
long j1l(long arg0);
int setitimer(itimer_which_t which, itimerval *new, itimerval *old);
char *SSL_get_servername(SSL *s, int type);
int pthread_barrierattr_destroy(pthread_barrierattr_t *attr);
char *tempnam(char *dir, char *pfx);
float j1f(float arg0);
lzma_ret lzma_index_encoder(lzma_stream *strm, lzma_index *i);
void OpenSSL_add_all_ciphers();
int umount2(char *special_file, int flags);
DSA *DSA_generate_parameters(int bits, unsigned *seed, int seed_len, int *counter_ret, unsigned *h_ret, void callback, void *cb_arg);
int EC_KEY_check_key(EC_KEY *key);
X509 *SSL_get_certificate(SSL *ssl);
int wscanf(wchar_t *format, int vararg);
int PEM_write_bio_PUBKEY(BIO *bp, EVP_PKEY *x);
int ASN1_item_sign(ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey, EVP_MD *type);
int i2d_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT *a, unsigned *out);
long atanl(long x);
X509_NAME *X509_NAME_new();
int BN_hex2bn(BIGNUM *a, char *str);
int ECDH_compute_key(void *out, size_t outlen, EC_POINT *pub_key, EC_KEY *ecdh, void *KDF);
void error_print_progname();
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, EVP_MD *md);
int setcontext(ucontext_t *ucp);
void EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD *pmeth, int signctx_init, int signctx);
int inflateGetDictionary(z_streamp strm, Bytef *dictionary, uInt *dictLength);
ASN1_INTEGER *X509_get_serialNumber(X509 *x);
long logl(long x);
char *SRP_give_srp_client_pwd_callback(SSL *arg0, void *arg1);
long wcstoll(wchar_t *nptr, wchar_t *endptr, int base);
long ASN1_ENUMERATED_get(ASN1_ENUMERATED *a);
size_t malloc_usable_size(void *ptr);
wint_t towctrans(wint_t wc, wctrans_t desc);
int i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa);
cmsghdr *cmsg_nxthdr(msghdr *mhdr, cmsghdr *cmsg);
int io_cancel(aio_context_t ctx_id, iocb *iocb, io_event *result);
pid_t fork();
void CRYPTO_get_mem_ex_functions(void *m, void *r, void f);
void lh_free(LHASH *lh);
int bn_mod_exp(DSA *dsa, BIGNUM *r, BIGNUM *a, BIGNUM *p, BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
long get_robust_list(int pid, robust_list_head *head_ptr, size_t *len_ptr);
int X509_subject_name_cmp(X509 *a, X509 *b);
int SSL_CTX_sess_get_new_cb(SSL_CTX *ctx);
int pthread_setschedparam(pthread_t target_thread, int policy, sched_param *param);
int fstat(int fd, stat *buf);
int getrpcbyname_r(char *name, rpcent *result_buf, char *buffer, size_t buflen, rpcent *result);
unsigned *X509_alias_get0(X509 *x, int *len);
char *setlocale(int category, char *locale);
int ns_name_pton(char *arg0, u_char *arg1, size_t arg2);
void X509_CRL_set_meth_data(X509_CRL *crl, void *dat);
ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ne);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
int getmsg(int fildes, strbuf *ctlptr, strbuf *dataptr, int *flagsp);
error_t argz_create_sep(char *string, int sep, char *argz, size_t *len);
int RSA_size(RSA *rsa);
pid_t wait4(pid_t pid, WAIT_STATUS stat_loc, int options, rusage *usage);
ASN1_UTCTIME *d2i_ASN1_UTCTIME(ASN1_UTCTIME *a, unsigned *in, long len);
int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM *kinvp, BIGNUM *rp);
X509_NAME_ENTRY *d2i_X509_NAME_ENTRY(X509_NAME_ENTRY *a, unsigned *in, long len);
stack_st_X509_POLICY_NODE *X509_policy_tree_get0_user_policies(X509_POLICY_TREE *tree);
int fgetpwent_r(FILE *stream, passwd *resultbuf, char *buffer, size_t buflen, passwd *result);
int ASN1_mbstring_ncopy(ASN1_STRING *out, unsigned *in, int len, int inform, unsigned mask, long minsize, long maxsize);
RSA_OAEP_PARAMS *d2i_RSA_OAEP_PARAMS(RSA_OAEP_PARAMS *a, unsigned *in, long len);
size_t fpending(FILE *fp);
size_t BIO_ctrl_wpending(BIO *b);
int sched_setscheduler(pid_t pid, int policy, sched_param *param);
double hypot(double x, double y);
void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
int sk_unshift(STACK *st, void *data);
stack_st_X509 *PKCS7_get0_signers(PKCS7 *p7, stack_st_X509 *certs, int flags);
int ASN1_STRING_set(ASN1_STRING *str, void *data, int len);
void CRYPTO_THREADID_current(CRYPTO_THREADID *id);
int i2d_ASN1_ENUMERATED(ASN1_ENUMERATED *a, unsigned *out);
void PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT *a);
X509_VAL *X509_VAL_new();
long llabs(long x);
unsigned wcstoull_l(wchar_t *nptr, wchar_t *endptr, int base, locale_t loc);
SSL_SESSION *PEM_read_bio_SSL_SESSION(BIO *bp, SSL_SESSION *x, pem_password_cb *cb, void *u);
int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned *outm, int *outl);
pitem *pqueue_find(pqueue pq, unsigned *prio64be);
EC_GROUP *EC_GROUP_new(EC_METHOD *meth);
long syscall(long sysno, int vararg);
int X509_TRUST_get_count();
size_t mbrtowc(wchar_t *pwc, char *s, size_t n, mbstate_t *p);
off_t ftello(FILE *stream);
int sigsuspend(sigset_t *set);
int BN_bn2bin(BIGNUM *a, unsigned *to);
wctype_t wctype(char *property);
float ccosf(float z);
char *initstate(unsigned seed, char *statebuf, size_t statelen);
ASN1_TYPE *PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid);
off64_t ftello64(FILE *stream);
DH *DH_get_2048_224();
gid_t getgid();
int fexecve(int fd, char *argv, char *envp);
void encrypt(char *glibc_block, int edflag);
int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned *out, int *outl, unsigned *in, int inl);
unsigned X509_subject_name_hash_old(X509 *x);
int BIO_ssl_copy_session_id(BIO *to, BIO *from);
char *ttyname(int fd);
int EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx);
lzma_ret lzma_auto_decoder(lzma_stream *strm, uint64_t memlimit, uint32_t flags);
int inet6_option_init(void *bp, cmsghdr *cmsgp, int type);
int eaccess(char *name, int type);
mcheck_status mprobe(void *ptr);
int setpriority(priority_which_t which, id_t who, int prio);
int i2d_DHparams(DH *a, unsigned *pp);
void SSL_CTX_set_cert_cb(SSL_CTX *c, int cb, void *arg);
int EVP_SealInit(EVP_CIPHER_CTX *ctx, EVP_CIPHER *type, unsigned *ek, int *ekl, unsigned *iv, EVP_PKEY *pubk, int npubk);
ASN1_IA5STRING *d2i_ASN1_IA5STRING(ASN1_IA5STRING *a, unsigned *in, long len);
int SSL_CTX_set_srp_strength(SSL_CTX *ctx, int strength);
char *BN_bn2dec(BIGNUM *a);
int EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx, unsigned *out, size_t *outlen, unsigned *in, size_t inlen);
int BIO_get_port(char *str, unsigned *port_ptr);
void X509_STORE_free(X509_STORE *v);
int sendmmsg(int fd, mmsghdr *vmessages, unsigned vlen, int flags);
X509 *X509_find_by_issuer_and_serial(stack_st_X509 *sk, X509_NAME *name, ASN1_INTEGER *serial);
DSA *PEM_read_DSAparams(FILE *fp, DSA *x, pem_password_cb *cb, void *u);
int tcsetattr(int fd, int optional_actions, termios *termios_p);
int rsa_sign(int type, unsigned *m, unsigned m_length, unsigned *sigret, unsigned *siglen, RSA *rsa);
group *fgetgrent(FILE *stream);
int i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl);
int deflateReset(z_streamp strm);
int ASN1_STRING_length(ASN1_STRING *x);
int i2d_ASN1_SET_ANY(ASN1_SEQUENCE_ANY *a, unsigned *out);
int evp_sign_method(int type, unsigned *m, unsigned m_length, unsigned *sigret, unsigned *siglen, void *key);
int update(EVP_MD_CTX *ctx, void *data, size_t count);
int sigaddset(sigset_t *set, int signo);
void openlog(char *ident, int option, int facility);
void ERR_load_X509_strings();
BIO *BIO_new_file(char *filename, char *mode);
int SSL_CTX_set_generate_session_id(SSL_CTX *arg0, GEN_SESSION_CB arg1);
gid_t getegid();
int X509_TRUST_set_default(int trust);
int X509_sign(X509 *x, EVP_PKEY *pkey, EVP_MD *md);
int rsa_mod_exp(BIGNUM *r0, BIGNUM *I, RSA *rsa, BN_CTX *ctx);
openssl_ssl_test_functions *SSL_test_functions();
STACK *sk_new(int cmp);
unsigned strtoul_l(char *nptr, char *endptr, int base, locale_t loc);
int inflatePrime(z_streamp strm, int bits, int value);
int i2d_RSA_PUBKEY(RSA *a, unsigned *pp);
int RSA_padding_add_SSLv23(unsigned *to, int tlen, unsigned *f, int fl);
int SSL_set_session_ticket_ext_cb(SSL *s, tls_session_ticket_ext_cb_fn cb, void *arg);
ASN1_STRING *ASN1_pack_string(void *obj, i2d_of_void *i2d, ASN1_OCTET_STRING *oct);
int ASN1_item_i2d(ASN1_VALUE *val, unsigned *out, ASN1_ITEM *it);
double cacos(double z);
int gzclose(gzFile file);
int CRYPTO_get_new_lockid(char *name);
int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned *pp);
int readdir_r(DIR *dirp, dirent *entry, dirent *result);
int BN_kronecker(BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
int pthread_yield();
int EC_KEY_set_group(EC_KEY *key, EC_GROUP *group);
int gzeof(gzFile file);
BIO *BIO_new_mem_buf(void *buf, int len);
BIGNUM *BN_value_one();
EVP_CIPHER *EVP_aes_256_wrap();
double nearbyint(double x);
int SHA224_Final(unsigned *md, SHA256_CTX *c);
BIGNUM *BN_new();
long cbrtl(long x);
void X509_ALGOR_get0(ASN1_OBJECT *paobj, int *pptype, void *ppval, X509_ALGOR *algor);
int mq_unlink(char *name);
FILE *freopen64(char *filename, char *modes, FILE *stream);
mntent *getmntent(FILE *stream);
float expm1f(float x);
int tlsext_ticket_key_cb(SSL *ssl, unsigned *name, unsigned *iv, EVP_CIPHER_CTX *ectx, HMAC_CTX *hctx, int enc);
int fsetpos(FILE *stream, fpos_t *pos);
int finish(DSA *dsa);
sgrp *getsgent();
int PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO *priv, ASN1_OBJECT *aobj, int version, int ptype, void *pval, unsigned *penc, int penclen);
int inflateUndermine(z_streamp arg0, int arg1);
int SSL_set_cipher_list(SSL *s, char *str);
void X509_LOOKUP_free(X509_LOOKUP *ctx);
void psiginfo(siginfo_t *pinfo, char *s);
int timer_settime(timer_t timerid, int flags, itimerspec *value, itimerspec *ovalue);
int EC_POINT_get_Jprojective_coordinates_GFp(EC_GROUP *group, EC_POINT *p, BIGNUM *x, BIGNUM *y, BIGNUM *z, BN_CTX *ctx);
int BN_GF2m_mod_arr(BIGNUM *r, BIGNUM *a, int *p);
CRYPTO_dynlock_value *CRYPTO_get_dynlock_value(int i);
void *OBJ_bsearch_(void *key, void *base, int num, int size, int cmp);
unsigned bn_mul_add_words(unsigned *rp, unsigned *ap, int num, unsigned w);
int sched_setparam(pid_t pid, sched_param *param);
X509 *d2i_X509_fp(FILE *fp, X509 *x509);
int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
int pthread_setname_np(pthread_t target_thread, char *name);
int isspace(int arg0);
EVP_CIPHER *EVP_camellia_256_cfb128();
int pthread_sigqueue(pthread_t threadid, int signo, sigval value);
BIO_METHOD *BIO_f_cipher();
SSL_METHOD *DTLS_method();
int aio_suspend(aiocb *list, int nent, timespec *timeout);
int BIO_fd_non_fatal_error(int error);
SSL_CONF_CTX *SSL_CONF_CTX_new();
void IO_funlockfile(IO_FILE *arg0);
int fesetround(int rounding_direction);
size_t BIO_ctrl_pending(BIO *b);
ssize_t preadv64(int fd, iovec *iovec, int count, off64_t offset);
void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *a);
int getnetbyname_r(char *name, netent *result_buf, char *buf, size_t buflen, netent *result, int *h_errnop);
td_err_e td_thr_getgregs(td_thrhandle_t *th, prgregset_t gregs);
void X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unsigned flags, time_t t);
int EVP_PKEY_set1_RSA(EVP_PKEY *pkey, rsa_st *key);
int seteuid(uid_t uid);
int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid, int md_nid, EVP_PBE_KEYGEN *keygen);
int fxstat64(int ver, int fildes, stat64 *stat_buf);
int res_dnok(char *arg0);
void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx);
int SSL_SRP_CTX_init(SSL *s);
RSA *RSAPrivateKey_dup(RSA *rsa);
char *SSL_alert_desc_string(int value);
int i2d_PKCS7_SIGNED(PKCS7_SIGNED *a, unsigned *out);
double y1(double arg0);
time_t timegm(tm *tp);
int EC_POINT_set_to_infinity(EC_GROUP *group, EC_POINT *point);
lzma_ret lzma_index_hash_decode(lzma_index_hash *index_hash, uint8_t *in, size_t *in_pos, size_t in_size);
int dladdr(void *address, Dl_info *info);
int i2d_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO *a, unsigned *out);
int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
int IO_getc(IO_FILE *fp);
int IO_vfprintf(IO_FILE *arg0, char *arg1, gnuc_va_list arg2);
int aio_suspend64(aiocb64 *list, int nent, timespec *timeout);
int iswspace(wint_t wc);
int PEM_write_bio_DSA_PUBKEY(BIO *bp, DSA *x);
int BIO_vsnprintf(char *buf, size_t n, char *format, va_list args);
double round(double x);
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO *a, unsigned *in, long len);
int option_is_end(argp_option *opt);
int PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x);
size_t EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems);
EC_KEY *d2i_EC_PUBKEY(EC_KEY *a, unsigned *pp, long length);
double nexttoward(double x, long y);
char *ecvt(double value, int ndigit, int *decpt, int *sign);
int DSA_sign(int type, unsigned *dgst, int dlen, unsigned *sig, unsigned *siglen, DSA *dsa);
int pthread_attr_setschedparam(pthread_attr_t *attr, sched_param *param);
int EVP_PKEY_cmp_parameters(EVP_PKEY *a, EVP_PKEY *b);
long cosl(long x);
void makecontext(ucontext_t *ucp, void func, int argc, int vararg);
int cert_crl(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);
int RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, unsigned *mHash, EVP_MD *Hash, EVP_MD *mgf1Hash, unsigned *EM, int sLen);
int X509_policy_level_node_count(X509_POLICY_LEVEL *level);
int rt_sigqueueinfo(pid_t tgid, int sig, siginfo_t *uinfo);
error_t argz_create(char *argv, char *argz, size_t *len);
int EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx);
void SSL_set_verify(SSL *s, int mode, int callback);
void sincos(double x, double *sinx, double *cosx);
X509_ATTRIBUTE *X509at_delete_attr(stack_st_X509_ATTRIBUTE *x, int loc);
char *strsep(char *stringp, char *delim);
int res_querydomain(char *arg0, char *arg1, int arg2, int arg3, u_char *arg4, int arg5);
long cargl(long z);
int getchar_unlocked();
lzma_index *lzma_index_dup(lzma_index *i, lzma_allocator *allocator);
int scandirat(int dfd, char *dir, dirent *namelist, int selector, int cmp);
int BIO_sock_init();
float cargf(float z);
int X509_PUBKEY_get0_param(ASN1_OBJECT *ppkalg, unsigned *pk, int *ppklen, X509_ALGOR *pa, X509_PUBKEY *pub);
int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *a);
NETSCAPE_CERT_SEQUENCE *NETSCAPE_CERT_SEQUENCE_new();
int i2d_RSA_OAEP_PARAMS(RSA_OAEP_PARAMS *a, unsigned *out);
int X509_REQ_add1_attr_by_OBJ(X509_REQ *req, ASN1_OBJECT *obj, int type, unsigned *bytes, int len);
void *ASN1_d2i_bio(void *xnew, d2i_of_void *d2i, BIO *in, void *x);
int SRP_generate_client_master_secret(SSL *s, unsigned *master_key);
ASN1_NULL *d2i_ASN1_NULL(ASN1_NULL *a, unsigned *in, long len);
long wcstol(wchar_t *nptr, wchar_t *endptr, int base);
FILE *setmntent(char *file, char *mode);
int X509_CRL_print_fp(FILE *bp, X509_CRL *x);
int socketpair(int domain, int type, int protocol, int *fds);
int utimensat(int fd, char *path, timespec *times, int flags);
int BN_print(BIO *fp, BIGNUM *a);
int fts_close(FTS *arg0);
void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned flags);
int check_revocation(X509_STORE_CTX *ctx);
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);
long significandl(long x);
double fmax(double x, double y);
int i2d_PrivateKey(EVP_PKEY *a, unsigned *pp);
float significandf(float x);
tm *localtime_r(time_t *timer, tm *tp);
int EVP_PKEY_cmp(EVP_PKEY *a, EVP_PKEY *b);
int pause();
int EC_KEY_print(BIO *bp, EC_KEY *key, int off);
int getrusage(rusage_who_t who, rusage *usage);
float fmaf(float x, float y, float z);
DSA *PEM_read_bio_DSAPrivateKey(BIO *bp, DSA *x, pem_password_cb *cb, void *u);
int futimens(int fd, timespec *times);
int ECParameters_print_fp(FILE *fp, EC_KEY *key);
void X509_SIG_free(X509_SIG *a);
int epoll_create(int size);
void *memalign(size_t alignment, size_t size);
int malloc_trim(size_t pad);
char *SSL_get_psk_identity(SSL *s);
int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);
int posix_spawnp(pid_t *pid, char *file, posix_spawn_file_actions_t *file_actions, posix_spawnattr_t *attrp, char *argv, char *envp);
BIO *BIO_next(BIO *b);
long lroundl(long x);
int tolower(int arg0);
unsigned bswap_32(unsigned bsx);
int X509_TRUST_get_flags(X509_TRUST *xp);
int BN_dec2bn(BIGNUM *a, char *str);
int BN_MONT_CTX_set(BN_MONT_CTX *mont, BIGNUM *mod, BN_CTX *ctx);
error_t argz_replace(char *argz, size_t *argz_len, char *str, char *with, unsigned *replace_count);
int res_nisourserver(res_state arg0, sockaddr_in *arg1);
size_t ctype_get_mb_cur_max();
wchar_t *wmempcpy(wchar_t *s1, wchar_t *s2, size_t n);
double ccos(double z);
void srand(unsigned seed);
int raise(int sig);
void PKCS7_ENVELOPE_free(PKCS7_ENVELOPE *a);
void bzero(void *s, size_t n);
int futimesat(int fd, char *file, timeval *tvp);
int sign(int type, unsigned *m, unsigned m_length, unsigned *sigret, unsigned *siglen, void *key);
BIO *BIO_new(BIO_METHOD *type);
void SSL_set_verify_depth(SSL *s, int depth);
td_err_e td_thr_setsigpending(td_thrhandle_t *th, unsigned n, sigset_t *ss);
int EC_GROUP_cmp(EC_GROUP *a, EC_GROUP *b, BN_CTX *ctx);
int EC_GROUP_check(EC_GROUP *group, BN_CTX *ctx);
int ASN1_STRING_type(ASN1_STRING *x);
int X509_CERT_AUX_print(BIO *bp, X509_CERT_AUX *x, int indent);
int X509_STORE_set_flags(X509_STORE *ctx, unsigned flags);
void ERR_load_BIO_strings();
int SSL_get_quiet_shutdown(SSL *ssl);
void EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth);
double csqrt(double z);
int clock_settime(clockid_t clock_id, timespec *tp);
int X509_certificate_type(X509 *x, EVP_PKEY *pubkey);
int pthread_equal(pthread_t thread1, pthread_t thread2);
int fegetexcept();
int BIO_free(BIO *a);
BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert);
int scandir64(char *dir, dirent64 *namelist, int selector, int cmp);
int aio_write(aiocb *aiocbp);
lzma_ret lzma_index_decoder(lzma_stream *strm, lzma_index *i, uint64_t memlimit);
int SSL_CTX_set1_param(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm);
void DSA_SIG_free(DSA_SIG *a);
long exp2l(long x);
EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find(ENGINE *pe, int type);
X509_NAME_ENTRY *X509_NAME_ENTRY_new();
EC_KEY *d2i_ECPrivateKey(EC_KEY *key, unsigned *in, long len);
int initstate_r(unsigned seed, char *statebuf, size_t statelen, random_data *buf);
int fallocate(int fd, int mode, off_t offset, off_t len);
RSA *d2i_RSAPrivateKey(RSA *a, unsigned *in, long len);
int i2d_X509_ALGOR(X509_ALGOR *a, unsigned *out);
int sprofil(prof *profp, int profcnt, timeval *tvp, unsigned flags);
int EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned *out, int *outl, unsigned *in, int inl);
EVP_CIPHER *EVP_aes_192_ecb();
int BN_mod_lshift_quick(BIGNUM *r, BIGNUM *a, int n, BIGNUM *m);
int sync_file_range2(int fd, unsigned flags, off64_t offset, off64_t nbytes);
ASN1_STRING *d2i_DIRECTORYSTRING(ASN1_STRING *a, unsigned *in, long len);
int X509_cmp(X509 *a, X509 *b);
int i2d_ASN1_bytes(ASN1_STRING *a, unsigned *pp, int tag, int xclass);
int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey);
void X509_CRL_INFO_free(X509_CRL_INFO *a);
void free_hook(void *ptr, void *arg1);
int gettimeofday(timeval *tv, timezone_ptr_t tz);
SSL_CTX *SSL_CTX_new(SSL_METHOD *meth);
int RSA_memory_lock(RSA *r);
res_sendhookact res_send_rhook(sockaddr_in *ns, u_char *query, int querylen, u_char *ans, int anssiz, int *resplen);
EC_METHOD *EC_GFp_simple_method();
int lckpwdf();
int SSL_read(SSL *ssl, void *buf, int num);
void SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio);
int fts_set(FTS *arg0, FTSENT *arg1, int arg2);
float tgammaf(float arg0);
int mcheck(void abortfunc);
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY *ne, ASN1_OBJECT *obj, int type, unsigned *bytes, int len);
int ftrylockfile(FILE *stream);
int ns_initparse(u_char *arg0, int arg1, ns_msg *arg2);
int sched_getattr(pid_t pid, sched_attr *attr, unsigned size, unsigned flags);
void X509_STORE_CTX_trusted_stack(X509_STORE_CTX *ctx, stack_st_X509 *sk);
int setresuid(uid_t ruid, uid_t euid, uid_t suid);
void re_set_registers(re_pattern_buffer *buffer, re_registers *regs, unsigned num_regs, regoff_t *starts, regoff_t *ends);
int posix_spawnattr_setsigdefault(posix_spawnattr_t *attr, sigset_t *sigdefault);
int sk_push(STACK *st, void *data);
char *gzgets(gzFile file, char *buf, int len);
lzma_ret lzma_filters_update(lzma_stream *strm, lzma_filter *filters);
void *sk_pop(STACK *st);
void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX *cctx, SSL_CTX *ctx);
int ECDSA_size(EC_KEY *eckey);
pid_t vfork();
NETSCAPE_SPKAC *NETSCAPE_SPKAC_new();
int ns_verify(u_char *arg0, int *arg1, void *arg2, u_char *arg3, int arg4, u_char *arg5, int *arg6, time_t *arg7, int arg8);
int PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
int lockf(int fd, int cmd, off_t len);
int deflateResetKeep(z_streamp arg0);
BIGNUM *BN_mod_inverse(BIGNUM *ret, BIGNUM *a, BIGNUM *n, BN_CTX *ctx);
int set_asn1_parameters(EVP_CIPHER_CTX *arg0, ASN1_TYPE *arg1);
int i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa);
spwd *getspnam(char *name);
char *p_time(u_int32_t arg0);
int io_destroy(aio_context_t ctx_id);
int BIO_method_type(BIO *b);
void abort();
ssize_t write(int fd, void *buf, size_t n);
long strtoll(char *nptr, char *endptr, int base);
int BN_cmp(BIGNUM *a, BIGNUM *b);
int feof(FILE *stream);
int io_setup(unsigned nr_events, aio_context_t *ctx_idp);
int getprotobynumber_r(int proto, protoent *result_buf, char *buf, size_t buflen, protoent *result);
char *strncat(char *dest, char *src, size_t n);
int mkfifoat(int fd, char *path, mode_t mode);
int chroot(char *path);
void X509_TRUST_cleanup();
int check_crl(X509_STORE_CTX *ctx, X509_CRL *crl);
int ns_format_ttl(u_long arg0, char *arg1, size_t arg2);
int X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey);
int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si, unsigned *md, int mdlen);
char *X509_VERIFY_PARAM_get0_name(X509_VERIFY_PARAM *param);
int wcscoll(wchar_t *s1, wchar_t *s2);
RSA *RSA_new();
unsigned SSL_CIPHER_get_id(SSL_CIPHER *c);
void OpenSSL_add_all_digests();
int BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix, asn1_ps_func *prefix_free);
void SSL_set_psk_client_callback(SSL *ssl, unsigned psk_client_callback);
long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg);
void twalk(void *root, action_fn_t action);
int forkpty(int *amaster, char *name, termios *termp, winsize *winp);
void *bsearch(void *key, void *base, size_t nmemb, size_t size, compar_fn_t compar);
void flockfile(FILE *stream);
int tolower_l(int c, locale_t l);
EVP_CIPHER *EVP_des_ede_ofb();
void *memrchr(void *s, int c, size_t n);
int unsetenv(char *name);
int DH_compute_key_padded(unsigned *key, BIGNUM *pub_key, DH *dh);
DSA *PEM_read_bio_DSAparams(BIO *bp, DSA *x, pem_password_cb *cb, void *u);
int ASN1_check_infinite_end(unsigned *p, long len);
int ASN1_UTCTIME_print(BIO *fp, ASN1_UTCTIME *a);
ssize_t getdirentries64(int fd, char *buf, size_t nbytes, off64_t *basep);
void *CRYPTO_malloc(int num, char *file, int line);
void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth, int param_decode, int param_encode, int param_missing, int param_copy, int param_cmp, int param_print);
int ioctl(int fd, unsigned request, int vararg);
int socket(int domain, int type, int protocol);
int i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl);
int pthread_mutexattr_init(pthread_mutexattr_t *attr);
int getopt_long(int argc, char *argv, char *shortopts, option *longopts, int *longind);
int EVP_PKEY_print_private(BIO *out, EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx);
int getutid_r(utmp *id, utmp *buffer, utmp *result);
int getgroups(int size, gid_t *list);
NETSCAPE_CERT_SEQUENCE *d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE *a, unsigned *in, long len);
int DH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
X509_LOOKUP_METHOD *X509_LOOKUP_file();
int pthread_create(pthread_t *newthread, pthread_attr_t *attr, void *start_routine, void *arg);
int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);
void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb);
int obstack_memory_used(obstack *arg0);
void X509_CERT_AUX_free(X509_CERT_AUX *a);
int setpgrp();
int res_nmkquery(res_state arg0, int arg1, char *arg2, int arg3, int arg4, u_char *arg5, int arg6, u_char *arg7, u_char *arg8, int arg9);
int BN_mod_sub(BIGNUM *r, BIGNUM *a, BIGNUM *b, BIGNUM *m, BN_CTX *ctx);
int shm_open(char *name, int oflag, mode_t mode);
int ssl_renegotiate_check(SSL *s);
stack_st_X509_NAME *SSL_get_client_CA_list(SSL *s);
long lrand48();
unsigned EVP_CIPHER_flags(EVP_CIPHER *cipher);
int kill(pid_t pid, int sig);
void X509_policy_tree_free(X509_POLICY_TREE *tree);
hostent *BIO_gethostbyname(char *name);
void X509_get0_signature(ASN1_BIT_STRING *psig, X509_ALGOR *palg, X509 *x);
long roundl(long x);
BIGNUM *BN_get0_nist_prime_192();
int fcntl(int fd, int cmd, int vararg);
void *CRYPTO_malloc_locked(int num, char *file, int line);
size_t mbrlen(char *s, size_t n, mbstate_t *ps);
int lockf64(int fd, int cmd, off64_t len);
void *BUF_memdup(void *data, size_t siz);
int EVP_PKEY_get_attr_count(EVP_PKEY *key);
size_t wcsnrtombs(char *dst, wchar_t *src, size_t nwc, size_t len, mbstate_t *ps);
fstab *getfsfile(char *name);
unsigned *seed48(unsigned *seed16v);
int i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa);
FILE *open_memstream(char *bufloc, size_t *sizeloc);
int sem_trywait(sem_t *sem);
void *CRYPTO_MEM_LEAK_CB(unsigned arg0, char *arg1, int arg2, int arg3, void *arg4);
int put_cipher_by_char(SSL_CIPHER *cipher, unsigned *ptr);
void X509_REQ_free(X509_REQ *a);
char *td_symbol_list();
int SSL_set_rfd(SSL *s, int fd);
PKCS7_ISSUER_AND_SERIAL *d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL *a, unsigned *in, long len);
void *memcpy(void *dest, void *src, size_t n);
void IO_free_backup_area(IO_FILE *arg0);
int do_cipher(EVP_CIPHER_CTX *ctx, unsigned *out, unsigned *in, size_t inl);
int X509_STORE_CTX_get1_issuer(X509 *issuer, X509_STORE_CTX *ctx, X509 *x);
int X509_REVOKED_get_ext_by_OBJ(X509_REVOKED *x, ASN1_OBJECT *obj, int lastpos);
int hcreate_r(size_t nel, hsearch_data *htab);
EVP_PKEY_CTX *EVP_PKEY_CTX_dup(EVP_PKEY_CTX *ctx);
int cb_2(int arg0, int arg1, BN_GENCB *arg2);
int EVP_DecryptInit(EVP_CIPHER_CTX *ctx, EVP_CIPHER *cipher, unsigned *key, unsigned *iv);
int i2d_PBE2PARAM(PBE2PARAM *a, unsigned *out);
int X509_get_ext_by_critical(X509 *x, int crit, int lastpos);
void EVP_cleanup();
int i2d_PKCS7(PKCS7 *a, unsigned *out);
X509_ATTRIBUTE *X509_REQ_delete_attr(X509_REQ *req, int loc);
void setkey_r(char *key, crypt_data *data);
int removexattr(char *path, char *name);
EVP_CIPHER *EVP_aes_192_ofb();
int isxdigit_l(int arg0, locale_t arg1);
EVP_PKEY_METHOD *EVP_PKEY_meth_new(int id, int flags);
void SSL_CTX_set_msg_callback(SSL_CTX *ctx, void cb);
int posix_spawnattr_getschedparam(posix_spawnattr_t *attr, sched_param *schedparam);
int glob_pattern_p(char *pattern, int quote);
int get_issuer(X509 *issuer, X509_STORE_CTX *ctx, X509 *x);
int putc_unlocked(int c, FILE *stream);
int bindresvport(int sockfd, sockaddr_in *sock_in);
int statvfs(char *file, statvfs *buf);
spwd *fgetspent(FILE *stream);
char *p_option(u_long option);
ssize_t getdelim(char *lineptr, size_t *n, int delimiter, FILE *stream);
void CRYPTO_set_dynlock_lock_callback(void dyn_lock_function);
int setregid(gid_t rgid, gid_t egid);
td_err_e td_ta_get_nthreads(td_thragent_t *ta, int *np);
void errx(int status, char *format, int vararg);
ASN1_STRING *d2i_ASN1_PRINTABLE(ASN1_STRING *a, unsigned *in, long len);
ssize_t sendto(int fd, void *buf, size_t n, int flags, CONST_SOCKADDR_ARG addr, socklen_t addr_len);
int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial);
int SSL_set_session_id_context(SSL *ssl, unsigned *sid_ctx, unsigned sid_ctx_len);
FTSENT *fts_children(FTS *arg0, int arg1);
void *memchr(void *s, int c, size_t n);
ssize_t lgetxattr(char *path, char *name, void *value, size_t size);
int clock_gettime(clockid_t clock_id, timespec *tp);
int pthread_getaffinity_np(pthread_t th, size_t cpusetsize, cpu_set_t *cpuset);
X509_POLICY_NODE *X509_policy_node_get0_parent(X509_POLICY_NODE *node);
void lh_node_usage_stats_bio(LHASH *lh, BIO *out);
int EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx);
int SHA256_Final(unsigned *md, SHA256_CTX *c);
long sqrtl(long x);
int EVP_CIPHER_CTX_iv_length(EVP_CIPHER_CTX *ctx);
stack_st_X509_ATTRIBUTE *X509at_add1_attr_by_NID(stack_st_X509_ATTRIBUTE *x, int nid, int type, unsigned *bytes, int len);
char *res_hostalias(res_state arg0, char *arg1, char *arg2, size_t arg3);
int X509_get_pubkey_parameters(EVP_PKEY *pkey, stack_st_X509 *chain);
int pthread_cond_signal(pthread_cond_t *cond);
long ssl_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg);
void ns_name_rollback(u_char *arg0, u_char *arg1, u_char *arg2);
int X509_TRUST_get_by_id(int id);
EVP_CIPHER *EVP_aes_128_cbc_hmac_sha256();
int BIO_hex_string(BIO *out, int indent, int width, unsigned *data, int datalen);
char *dirname(char *path);
int EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx);
void EC_GROUP_set_point_conversion_form(EC_GROUP *group, point_conversion_form_t form);
int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx);
int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);
SSL_METHOD *SSL_get_ssl_method(SSL *s);
int EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key, int nid, int type, unsigned *bytes, int len);
int EVP_CIPHER_iv_length(EVP_CIPHER *cipher);
unsigned SSL_CONF_CTX_clear_flags(SSL_CONF_CTX *cctx, unsigned flags);
char *sym_ntos(res_sym *arg0, int arg1, int *arg2);
BIO *BIO_dup_chain(BIO *in);
int profil(unsigned *sample_buffer, size_t size, size_t offset, unsigned scale);
void ECDH_set_default_method(ECDH_METHOD *arg0);
X509_OBJECT *X509_OBJECT_retrieve_match(stack_st_X509_OBJECT *h, X509_OBJECT *x);
int ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM *kinv, BIGNUM *rp);
SSL_SESSION *SSL_SESSION_new();
int mq_setattr(mqd_t mqdes, mq_attr *mqstat, mq_attr *omqstat);
int eventfd_write(int fd, eventfd_t value);
int next_protos_advertised_cb(SSL *s, unsigned *buf, unsigned *len, void *arg);
int32_t *ctype_toupper_loc();
uint64_t lzma_index_memused(lzma_index *i);
unsigned BN_mod_word(BIGNUM *a, unsigned w);
fstab *getfsent();
pid_t tcgetsid(int fd);
void *DH_get_ex_data(DH *d, int idx);
int asprintf(char *ptr, char *fmt, int vararg);
int ferror(FILE *stream);
X509_REQ *X509_REQ_dup(X509_REQ *req);
char *getcwd(char *buf, size_t size);
td_err_e td_ta_get_stats(td_thragent_t *ta, td_ta_stats_t *statsp);
PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509, EVP_PKEY *pkey, EVP_MD *dgst);
int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned *out, int *outl, unsigned *in, int inl);
int EVP_CIPHER_CTX_key_length(EVP_CIPHER_CTX *ctx);
char *asctime_r(tm *tp, char *buf);
int OBJ_NAME_init();
int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int type, void *data);
void lh_doall(LHASH *lh, LHASH_DOALL_FN_TYPE func);
int getpeername(int fd, SOCKADDR_ARG addr, socklen_t *len);
int pthread_barrierattr_init(pthread_barrierattr_t *attr);
double carg(double z);
int BN_add_word(BIGNUM *a, unsigned w);
int posix_openpt(int oflag);
double expm1(double x);
int utmpxname(char *file);
int ns_verify_tcp(u_char *arg0, int *arg1, ns_tcp_tsig_state *arg2, int arg3);
int SHA1_Update(SHA_CTX *c, void *data, size_t len);
int DSA_generate_parameters_ex(DSA *dsa, int bits, unsigned *seed, int seed_len, int *counter_ret, unsigned *h_ret, BN_GENCB *cb);
EC_POINT *EC_KEY_get0_public_key(EC_KEY *key);
EVP_CIPHER *EVP_des_ede3_cfb64();
SSL_METHOD *TLSv1_server_method();
long subpage_prot(unsigned addr, unsigned len, uint32_t *map);
ASN1_OBJECT *OBJ_nid2obj(int n);
EVP_CIPHER *EVP_rc4();
void setkey(char *key);
td_err_e td_thr_setfpregs(td_thrhandle_t *th, prfpregset_t *fpregs);
COMP_METHOD *SSL_get_current_expansion(SSL *s);
void BN_CTX_start(BN_CTX *ctx);
int islower(int arg0);
int EVP_MD_size(EVP_MD *md);
int feraiseexcept(int excepts);
lzma_ret lzma_index_stream_flags(lzma_index *i, lzma_stream_flags *stream_flags);
long lround(double x);
int pthread_condattr_init(pthread_condattr_t *attr);
int kcmp(pid_t pid1, pid_t pid2, int type, unsigned idx1, unsigned idx2);
int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from);
DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA *dsa);
int inet6_opt_next(void *extbuf, socklen_t extlen, int offset, uint8_t *typep, socklen_t *lenp, void *databufp);
int SSL_set1_param(SSL *ssl, X509_VERIFY_PARAM *vpm);
double rint(double x);
int inet6_option_find(cmsghdr *cmsg, uint8_t *tptrp, int type);
int X509_set_ex_data(X509 *r, int idx, void *arg);
ssize_t io_read_fn(void *cookie, char *buf, size_t nbytes);
void *SSL_get_ex_data(SSL *ssl, int idx);
float log10f(float x);
int swscanf(wchar_t *s, wchar_t *format, int vararg);
int semtimedop(int semid, sembuf *sops, size_t nsops, timespec *timeout);
int setgroups(size_t n, gid_t *groups);
void ASN1_STRING_TABLE_cleanup();
int acct(char *name);
int open(char *file, int oflag, int vararg);
lzma_ret lzma_block_header_encode(lzma_block *block, uint8_t *out);
stack_st_X509 *lookup_certs(X509_STORE_CTX *ctx, X509_NAME *nm);
void setnetent(int stay_open);
int dlinfo(void *handle, int request, void *arg);
int clock_nanosleep(clockid_t clock_id, int flags, timespec *req, timespec *rem);
STACK *sk_deep_copy(STACK *arg0, void *);
locale_t duplocale(locale_t dataset);
int i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING *a, unsigned *out);
ASN1_UNIVERSALSTRING *ASN1_UNIVERSALSTRING_new();
int sigpending(sigset_t *set);
pid_t tcgetpgrp(int fd);
void remove_session_cb(ssl_ctx_st *ctx, SSL_SESSION *sess);
BIO *BIO_new_socket(int sock, int close_flag);
int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *ctx, char *pass, int passlen, ASN1_TYPE *param, EVP_CIPHER *cipher, EVP_MD *md, int en_de);
char *strfry(char *string);
int i2d_ASN1_UTCTIME(ASN1_UTCTIME *a, unsigned *out);
int getspent_r(spwd *result_buf, char *buffer, size_t buflen, spwd *result);
int EVP_PKEY_encrypt_old(unsigned *enc_key, unsigned *key, int key_len, EVP_PKEY *pub_key);
void X509_VAL_free(X509_VAL *a);
int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cb, void *u);
unsigned ASN1_PCTX_get_flags(ASN1_PCTX *p);
void ASN1_UTCTIME_free(ASN1_UTCTIME *a);
int verify_callback(int ok, X509_STORE_CTX *ctx);
size_t confstr(int name, char *buf, size_t len);
stack_st_X509 *X509_STORE_get1_certs(X509_STORE_CTX *st, X509_NAME *nm);
SSL_METHOD *DTLSv1_2_method();
int EVP_CIPHER_CTX_test_flags(EVP_CIPHER_CTX *ctx, int flags);
void seqbuf_dump();
int signbitl(long value);
X509_EXTENSION *X509_CRL_delete_ext(X509_CRL *x, int loc);
int getsubopt(char *optionp, char *tokens, char *valuep);
int i2d_ASN1_SET(stack_st_OPENSSL_BLOCK *a, unsigned *pp, i2d_of_void *i2d, int ex_tag, int ex_class, int is_set);
int X509_print_fp(FILE *bp, X509 *x);
SSL_METHOD *SSLv3_server_method();
stack_st_X509_CRL *X509_STORE_get1_crls(X509_STORE_CTX *st, X509_NAME *nm);
X509_CINF *d2i_X509_CINF(X509_CINF *a, unsigned *in, long len);
void HMAC_CTX_init(HMAC_CTX *ctx);
void DSA_set_default_method(DSA_METHOD *arg0);
int i2d_X509_EXTENSIONS(X509_EXTENSIONS *a, unsigned *out);
void remque(void *elem);
int copy(EVP_MD_CTX *to, EVP_MD_CTX *from);
float cimagf(float z);
int iswlower_l(wint_t wc, locale_t locale);
int PEM_get_EVP_CIPHER_INFO(char *header, EVP_CIPHER_INFO *cipher);
BIO *BIO_new_dgram(int fd, int close_flag);
EVP_CIPHER *EVP_aes_192_cbc();
PKCS7 *SMIME_read_PKCS7(BIO *bio, BIO *bcont);
lzma_ret lzma_properties_size(uint32_t *size, lzma_filter *filter);
int statfs(char *file, statfs *buf);
PKCS7_ENVELOPE *PKCS7_ENVELOPE_new();
td_err_e td_ta_map_lwp2thr(td_thragent_t *ta, lwpid_t lwpid, td_thrhandle_t *th);
int SSL_CTX_set_alpn_protos(SSL_CTX *ctx, unsigned *protos, unsigned protos_len);
void PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL *a);
char *strerror_r(int errnum, char *buf, size_t buflen);
int pthread_setcanceltype(int type, int *oldtype);
void SSL_CTX_flush_sessions(SSL_CTX *ctx, long tm);
ASN1_ENUMERATED *d2i_ASN1_ENUMERATED(ASN1_ENUMERATED *a, unsigned *in, long len);
lzma_ret lzma_easy_buffer_encode(uint32_t preset, lzma_check check, lzma_allocator *allocator, uint8_t *in, size_t in_size, uint8_t *out, size_t *out_pos, size_t out_size);
X509 *PEM_read_bio_X509(BIO *bp, X509 *x, pem_password_cb *cb, void *u);
BIO *BIO_new_ssl_connect(SSL_CTX *ctx);
void SSL_set_info_callback(SSL *ssl, void cb);
int ftw_func_t(char *filename, stat *status, int flag);
int i2d_DSAPrivateKey(DSA *a, unsigned *pp);
int DSA_verify(int type, unsigned *dgst, int dgst_len, unsigned *sigbuf, int siglen, DSA *dsa);
int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid);
size_t lzma_block_buffer_bound(size_t uncompressed_size);
int getdents64(unsigned fd, linux_dirent64 *dirp, unsigned count);
int pthread_condattr_getclock(pthread_condattr_t *attr, clockid_t *clock_id);
int rresvport(int *alport);
int renameat(int oldfd, char *old, int newfd, char *new);
char *getpass(char *prompt);
EVP_MD *EVP_dss1();
uLong adler32_combine(uLong arg0, uLong arg1, off_t arg2);
EVP_CIPHER *EVP_aes_128_ccm();
int vsprintf(char *s, char *format, gnuc_va_list arg);
EC_POINT *EC_POINT_hex2point(EC_GROUP *arg0, char *arg1, EC_POINT *arg2, BN_CTX *arg3);
X509_VERIFY_PARAM *X509_VERIFY_PARAM_new();
int ns_name_ntop(u_char *arg0, char *arg1, size_t arg2);
X509_ATTRIBUTE *d2i_X509_ATTRIBUTE(X509_ATTRIBUTE *a, unsigned *in, long len);
void SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx, int app_gen_cookie_cb);
X509_ALGOR *PKCS5_pbkdf2_set(int iter, unsigned *salt, int saltlen, int prf_nid, int keylen);
char *crypt_r(char *key, char *salt, crypt_data *data);
int res_hnok(char *arg0);
int ASN1_TYPE_cmp(ASN1_TYPE *a, ASN1_TYPE *b);
long callback(bio_st *arg0, int arg1, char *arg2, int arg3, long arg4, long arg5);
int get_nprocs();
void ECDSA_SIG_free(ECDSA_SIG *sig);
EC_KEY *PEM_read_EC_PUBKEY(FILE *fp, EC_KEY *x, pem_password_cb *cb, void *u);
int getifaddrs(ifaddrs *ifap);
int fegetround();
int ASN1_object_size(int constructed, int length, int tag);
int BIO_set_tcp_ndelay(int sock, int turn_on);
int ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey, EVP_MD *type);
int fpclassifyf(float value);
void *tsearch(void *key, void *rootp, compar_fn_t compar);
int X509_CRL_digest(X509_CRL *data, EVP_MD *type, unsigned *md, unsigned *len);
int destroy(BIO *arg0);
float cbrtf(float x);
int fpclassifyl(long value);
int verify_cb(int ok, X509_STORE_CTX *ctx);
int putmsg(int fildes, strbuf *ctlptr, strbuf *dataptr, int flags);
int X509_ALGOR_cmp(X509_ALGOR *a, X509_ALGOR *b);
char *X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM *arg0);
int BIO_dump_indent_cb(int cb, void *u, char *s, int len, int indent);
int pthread_setschedprio(pthread_t target_thread, int prio);
int X509_NAME_get_index_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int lastpos);
int SSL_get_sigalgs(SSL *s, int idx, int *psign, int *phash, int *psignandhash, unsigned *rsig, unsigned *rhash);
int compress(Bytef *dest, uLongf *destLen, Bytef *source, uLong sourceLen);
int gl_stat(char *arg0, stat64 *arg1);
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE *attr, ASN1_OBJECT *obj, int atrtype, void *data, int len);
int SSL_get_ex_data_X509_STORE_CTX_idx();
int ns_msg_getflag(ns_msg arg0, int arg1);
float logbf(float x);
long wcstold(wchar_t *nptr, wchar_t *endptr);
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
long logbl(long x);
int res_queriesmatch(u_char *arg0, u_char *arg1, u_char *arg2, u_char *arg3);
int i2d_PublicKey(EVP_PKEY *a, unsigned *pp);
int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *cond_attr);
int i2d_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING *a, unsigned *out);
ttyent *getttyent();
void X509_PKEY_free(X509_PKEY *a);
int X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type, unsigned *bytes, int len, int loc, int set);
int inet6_option_append(cmsghdr *cmsg, uint8_t *typep, int multx, int plusy);
void srand48(long seedval);
int ns_samedomain(char *arg0, char *arg1);
ASN1_STRING *ASN1_STRING_new();
void vsyslog(int pri, char *fmt, gnuc_va_list ap);
int ssl_version();
void la_preinit(uintptr_t *cookie);
int gzprintf(gzFile file, char *format, int vararg);
int custom_ext_parse_cb(SSL *s, unsigned ext_type, unsigned *in, size_t inlen, int *al, void *parse_arg);
float crealf(float z);
long strtold_l(char *nptr, char *endptr, locale_t loc);
int fscanf(FILE *stream, char *format, int vararg);
long SSL_SESSION_set_timeout(SSL_SESSION *s, long t);
int setttyent();
int BIO_ctrl_reset_read_request(BIO *b);
int SSL_export_keying_material(SSL *s, unsigned *out, size_t olen, char *label, size_t llen, unsigned *p, size_t plen, int use_context);
lzma_vli lzma_index_file_size(lzma_index *i);
long creall(long z);
long ptrace(ptrace_request request, int vararg);
int i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey);
void BIO_copy_next_retry(BIO *b);
BIO_METHOD *BIO_f_ssl();
int obstack_vprintf(obstack *obstack, char *format, gnuc_va_list args);
void LHASH_DOALL_ARG_FN_TYPE(void *arg0, void *arg1);
unsigned lh_num_items(LHASH *lh);
int dsa_keygen(DSA *dsa);
float coshf(float x);
EVP_CIPHER *EVP_aes_128_cfb128();
gzFile gzopen64(char *arg0, char *arg1);
int PEM_write_PUBKEY(FILE *fp, EVP_PKEY *x);
double log2(double x);
int nrand48_r(unsigned *xsubi, drand48_data *buffer, long *result);
int getpwent_r(passwd *resultbuf, char *buffer, size_t buflen, passwd *result);
BIGNUM *EC_KEY_get0_private_key(EC_KEY *key);
int X509_STORE_set_depth(X509_STORE *store, int depth);
int alpn_select_cb(SSL *s, unsigned *out, unsigned *outlen, unsigned *in, unsigned inlen, void *arg);
EVP_CIPHER *EVP_camellia_256_cbc();
off64_t lseek64(int fd, off64_t offset, int whence);
EVP_CIPHER *EVP_bf_ecb();
int EVP_read_pw_string_min(char *buf, int minlen, int maxlen, char *prompt, int verify);
int gzwrite(gzFile file, voidpc buf, unsigned len);
RSA *RSA_generate_key(int bits, unsigned e, void callback, void *cb_arg);
int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, char *name);
int getdents(unsigned fd, linux_dirent *dirp, unsigned count);
int BN_RECP_CTX_set(BN_RECP_CTX *recp, BIGNUM *rdiv, BN_CTX *ctx);
int i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned *pp);
SSL_CTX *SSL_get_SSL_CTX(SSL *ssl);
int arch_prctl(int code, unsigned *addr);
int pthread_mutex_init(pthread_mutex_t *mutex, pthread_mutexattr_t *mutexattr);
double frexp(double x, int *exponent);
int wcscmp(wchar_t *s1, wchar_t *s2);
int X509_STORE_set_purpose(X509_STORE *ctx, int purpose);
void msg_callback(int write_p, int version, int content_type, void *buf, size_t len, SSL *ssl, void *arg);
int rexec(char *ahost, int rport, char *name, char *pass, char *cmd, int *fd2p);
DH *DH_generate_parameters(int prime_len, int generator, void callback, void *cb_arg);
int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int epoll_wait(int epfd, epoll_event *events, int maxevents, int timeout);
int PEM_read(FILE *fp, char *name, char *header, unsigned *data, long *len);
int capset(cap_user_header_t hdrp, cap_user_data_t datap);
EVP_CIPHER *EVP_seed_cbc();
char *l64a(long n);
void PEM_SignInit(EVP_MD_CTX *ctx, EVP_MD *type);
int i2d_X509_ALGORS(X509_ALGORS *a, unsigned *out);
int EVP_VerifyFinal(EVP_MD_CTX *ctx, unsigned *sigbuf, unsigned siglen, EVP_PKEY *pkey);
void SSL_copy_session_id(SSL *to, SSL *from);
int utimes(char *file, timeval *tvp);
unsigned EVP_MD_flags(EVP_MD *md);
SSL_CIPHER *get_cipher_by_char(unsigned *ptr);
ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg);
PKCS7 *PEM_read_bio_PKCS7(BIO *bp, PKCS7 *x, pem_password_cb *cb, void *u);
void X509_ALGOR_free(X509_ALGOR *a);
int seccomp(unsigned operation, unsigned flags, void *args);
void assert_fail(char *assertion, char *file, unsigned line, char *function);
uLong zlibCompileFlags();
int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si, stack_st_X509_ALGOR *cap);
int fileno(FILE *stream);
int EVP_PKEY_base_id(EVP_PKEY *pkey);
void NETSCAPE_SPKI_free(NETSCAPE_SPKI *a);
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, ASN1_OBJECT *obj);
int DH_check_pub_key(DH *dh, BIGNUM *pub_key, int *codes);
X509_CRL_METHOD *X509_CRL_METHOD_new(int crl_init, int crl_free, int crl_lookup, int crl_verify);
z_crc_t *get_crc_table();
void CRYPTO_lock(int mode, int type, char *file, int line);
float cprojf(float z);
int statvfs64(char *file, statvfs64 *buf);
int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);
int PKCS7_set_digest(PKCS7 *p7, EVP_MD *md);
EC_POINT *EC_POINT_dup(EC_POINT *src, EC_GROUP *group);
int RSA_padding_add_X931(unsigned *to, int tlen, unsigned *f, int fl);
DSA *DSA_new_method(ENGINE *engine);
int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned *out, int *outl, unsigned *in, int inl);
ASN1_TYPE *d2i_ASN1_TYPE(ASN1_TYPE *a, unsigned *in, long len);
char *bind_textdomain_codeset(char *domainname, char *codeset);
int ASN1_UTCTIME_check(ASN1_UTCTIME *a);
wchar_t *wcpncpy(wchar_t *dest, wchar_t *src, size_t n);
int futimes(int fd, timeval *tvp);
X509_CRL *d2i_X509_CRL_fp(FILE *fp, X509_CRL *crl);
BN_CTX *BN_CTX_new();
unsigned strtoul(char *nptr, char *endptr, int base);
int NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki);
int malloc_set_state(void *ptr);
double j0(double arg0);
double j1(double arg0);
int alphasort(dirent *e1, dirent *e2);
void *RSA_get_ex_data(RSA *r, int idx);
char *qgcvt(long value, int ndigit, char *buf);
int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, unsigned *data, int len);
int ns_sign_tcp2(u_char *arg0, int *arg1, int arg2, int arg3, ns_tcp_tsig_state *arg4, int arg5, u_char *arg6, u_char *arg7);
int OBJ_create(char *oid, char *sn, char *ln);
int HMAC_Init_ex(HMAC_CTX *ctx, void *key, int len, EVP_MD *md, ENGINE *impl);
int tgkill(int tgid, int tid, int sig);
void DH_free(DH *dh);
int gai_suspend(gaicb *list, int ent, timespec *timeout);
int lsetxattr(char *path, char *name, void *value, size_t size, int flags);
EVP_PKEY_CTX *EVP_PKEY_CTX_new_id(int id, ENGINE *e);
char *zlibVersion();
long llroundl(long x);
td_err_e td_thr_set_event(td_thrhandle_t *th, td_thr_events_t *event);
int i2d_PBKDF2PARAM(PBKDF2PARAM *a, unsigned *out);
int ipc(unsigned call, int first, int second, int third, void *ptr, long fifth);
int RSA_flags(RSA *r);
void EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth, void pkey_free);
char *X509_get_default_cert_dir_env();
void *EVP_CIPHER_CTX_get_app_data(EVP_CIPHER_CTX *ctx);
ssize_t readahead(int fd, off64_t offset, size_t count);
X509_SIG *PEM_read_bio_PKCS8(BIO *bp, X509_SIG *x, pem_password_cb *cb, void *u);
long lgammal_r(long arg0, int *signgamp);
int sched_setattr(pid_t pid, sched_attr *attr, unsigned flags);
int BN_from_montgomery(BIGNUM *r, BIGNUM *a, BN_MONT_CTX *mont, BN_CTX *ctx);
int get_crl(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);
int setlogin(char *name);
void insque(void *elem, void *prev);
int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *file_actions, int fd, char *path, int oflag, mode_t mode);
long acosl(long x);
int d2i_ASN1_BOOLEAN(int *a, unsigned *pp, long length);
stack_st_X509 *SSL_get_peer_cert_chain(SSL *s);
unsigned ASN1_PCTX_get_str_flags(ASN1_PCTX *p);
int posix_spawnattr_destroy(posix_spawnattr_t *attr);
int pthread_attr_getaffinity_np(pthread_attr_t *attr, size_t cpusetsize, cpu_set_t *cpuset);
int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val);
int comp(void *arg0, void *arg1);
int mq_close(mqd_t mqdes);
int PEM_write_bio_X509_CERT_PAIR(BIO *bp, X509_CERT_PAIR *x);
int X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, char *buf, int len);
wchar_t *wcstok(wchar_t *s, wchar_t *delim, wchar_t *ptr);
int sigsetmask(int mask);
EVP_PKEY_ASN1_METHOD *EVP_PKEY_get0_asn1(EVP_PKEY *pkey);
void EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD *pmeth, int sign_init, int sign);
int PEM_write_bio_X509_CRL(BIO *bp, X509_CRL *x);
long strtol_l(char *nptr, char *endptr, int base, locale_t loc);
int PKCS1_MGF1(unsigned *mask, long len, unsigned *seed, long seedlen, EVP_MD *dgst);
int X509_STORE_CTX_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int BN_get_params(int which);
void *gl_opendir(char *arg0);
long perfmonctl(int fd, int cmd, void *arg, int narg);
double csin(double z);
int pthread_rwlock_init(pthread_rwlock_t *rwlock, pthread_rwlockattr_t *attr);
int EVP_Digest(void *data, size_t count, unsigned *md, unsigned *size, EVP_MD *type, ENGINE *impl);
int deflateParams(z_streamp strm, int level, int strategy);
int semget(key_t key, int nsems, int semflg);
int PEM_write_bio_DHparams(BIO *bp, DH *x);
char *SSL_CIPHER_description(SSL_CIPHER *arg0, char *buf, int size);
EVP_MD *EVP_whirlpool();
PKCS7_DIGEST *PKCS7_DIGEST_new();
long BIO_debug_callback(BIO *bio, int cmd, char *argp, int argi, long argl, long ret);
int prlimit64(pid_t pid, rlimit_resource resource, rlimit64 *new_limit, rlimit64 *old_limit);
locale_t uselocale(locale_t dataset);
int asn1_ps_func(BIO *b, unsigned *pbuf, int *plen, void *parg);
ASN1_GENERALSTRING *d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING *a, unsigned *in, long len);
unsigned wcstoul_l(wchar_t *nptr, wchar_t *endptr, int base, locale_t loc);
int printf_function(FILE *stream, printf_info *info, void *args);
EVP_CIPHER *EVP_camellia_192_ecb();
int a2d_ASN1_OBJECT(unsigned *out, int olen, char *buf, int num);
int PEM_write_bio_RSAPrivateKey(BIO *bp, RSA *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cb, void *u);
BIGNUM *ASN1_INTEGER_to_BN(ASN1_INTEGER *ai, BIGNUM *bn);
int inflateSyncPoint(z_streamp arg0);
void tzset();
int EVP_PKEY_set_type_str(EVP_PKEY *pkey, char *str, int len);
int EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *ppkey);
double pow(double x, double y);
int SSL_use_certificate_file(SSL *ssl, char *file, int type);
int EC_GROUP_get_order(EC_GROUP *group, BIGNUM *order, BN_CTX *ctx);
td_err_e td_thr_clear_event(td_thrhandle_t *th, td_thr_events_t *event);
int openat64(int fd, char *file, int oflag, int vararg);
int posix_spawnattr_setschedparam(posix_spawnattr_t *attr, sched_param *schedparam);
BIGNUM *BN_mpi2bn(unsigned *s, int len, BIGNUM *ret);
int toupper(int arg0);
uint32_t htonl(uint32_t hostlong);
int setrlimit64(rlimit_resource_t resource, rlimit64 *rlimits);
int poll(pollfd *fds, nfds_t nfds, int timeout);
int mq_send(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned msg_prio);
int BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom);
DIR *opendir(char *name);
void PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO *a);
EVP_MD *EVP_md_null();
int SRP_Calc_A_param(SSL *s);
int ilogbf(float x);
int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx, char *type, char *value);
int pciconfig_read(unsigned bus, unsigned dfn, unsigned off, unsigned len, void *buf);
void clearerr_unlocked(FILE *stream);
void *aligned_alloc(size_t alignment, size_t size);
int sigandset(sigset_t *set, sigset_t *left, sigset_t *right);
EVP_CIPHER *EVP_aes_192_ccm();
int PEM_write_bio_RSA_PUBKEY(BIO *bp, RSA *x);
char *tmpnam_r(char *s);
intmax_t strtoimax(char *nptr, char *endptr, int base);
int pthread_barrierattr_getpshared(pthread_barrierattr_t *attr, int *pshared);
void CRYPTO_get_locked_mem_functions(void *m, void f);
int i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey);
void ASN1_STRING_clear_free(ASN1_STRING *a);
SSL_METHOD *DTLS_server_method();
int RSA_set_ex_data(RSA *r, int idx, void *arg);
int EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX *out, EVP_CIPHER_CTX *in);
int execvpe(char *file, char *argv, char *envp);
int mincore(void *start, size_t len, unsigned *vec);
int mq_timedsend(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned msg_prio, timespec *abs_timeout);
int EVP_PBE_KEYGEN(EVP_CIPHER_CTX *ctx, char *pass, int passlen, ASN1_TYPE *param, EVP_CIPHER *cipher, EVP_MD *md, int en_de);
float fmodf(float x, float y);
EC_GROUP *EC_GROUP_dup(EC_GROUP *src);
long set_robust_list(robust_list_head *head, size_t len);
int sk_find_ex(STACK *st, void *data);
ssize_t sendfile64(int out_fd, int in_fd, off64_t *offset, size_t count);
long wcstoll_l(wchar_t *nptr, wchar_t *endptr, int base, locale_t loc);
void sk_sort(STACK *st);
LHASH *lh_new(LHASH_HASH_FN_TYPE h, LHASH_COMP_FN_TYPE c);
EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY *x, pem_password_cb *cb, void *u);
int X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose);
BIGNUM *get_rfc3526_prime_8192(BIGNUM *bn);
int iswctype(wint_t wc, wctype_t desc);
int BN_mod_mul_montgomery(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_MONT_CTX *mont, BN_CTX *ctx);
int PEM_write_bio_PKCS8PrivateKey(BIO *arg0, EVP_PKEY *arg1, EVP_CIPHER *arg2, char *arg3, int arg4, pem_password_cb *arg5, void *arg6);
int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr);
void verr(int status, char *format, gnuc_va_list arg2);
void PEM_SignUpdate(EVP_MD_CTX *ctx, unsigned *d, unsigned cnt);
X509_ALGORS *d2i_X509_ALGORS(X509_ALGORS *a, unsigned *in, long len);
X509_REQ_INFO *X509_REQ_INFO_new();
float scalblnf(float x, long n);
int posix_madvise(void *addr, size_t len, int advice);
int *h_errno_location();
int mount(char *special_file, char *dir, char *fstype, unsigned rwflag, void *data);
long scalblnl(long x, long n);
int RSA_public_encrypt(int flen, unsigned *from, unsigned *to, RSA *rsa, int padding);
int re_compile_fastmap(re_pattern_buffer *buffer);
int sk_is_sorted(STACK *st);
int X509_verify(X509 *a, EVP_PKEY *r);
float cabsf(float z);
int tlsext_servername_callback(SSL *arg0, int *arg1, void *arg2);
DSA *PEM_read_bio_DSA_PUBKEY(BIO *bp, DSA *x, pem_password_cb *cb, void *u);
BN_MONT_CTX *BN_MONT_CTX_set_locked(BN_MONT_CTX *pmont, int lock, BIGNUM *mod, BN_CTX *ctx);
int X509_check_trust(X509 *x, int id, int flags);
int EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx, unsigned *rout, size_t *routlen, unsigned *sig, size_t siglen);
int i2d_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned *out);
long cabsl(long z);
int printf_arginfo_size_function(printf_info *info, size_t n, int *argtypes, int *size);
int setuid(uid_t uid);
long SSL_SESSION_set_time(SSL_SESSION *s, long t);
lzma_ret lzma_vli_encode(lzma_vli vli, size_t *vli_pos, uint8_t *out, size_t *out_pos, size_t out_size);
long SSL_get_verify_result(SSL *ssl);
int ctrl(X509_LOOKUP *ctx, int cmd, char *argc, long argl, char *ret);
X509_ALGOR *PKCS5_pbe_set(int alg, int iter, unsigned *salt, int saltlen);
int ruserok(char *rhost, int suser, char *remuser, char *locuser);
int ns_sprintrr(ns_msg *arg0, ns_rr *arg1, char *arg2, char *arg3, char *arg4, size_t arg5);
int X509_REQ_set_subject_name(X509_REQ *req, X509_NAME *name);
float clog10f(float z);
int SHA_Final(unsigned *md, SHA_CTX *c);
int ftw64_func_t(char *filename, stat64 *status, int flag);
EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_get0(int idx);
int prctl(int option, int vararg);
stack_st_X509_NAME *SSL_load_client_CA_file(char *file);
int PEM_SealFinal(PEM_ENCODE_SEAL_CTX *ctx, unsigned *sig, int *sigl, unsigned *out, int *outl, EVP_PKEY *priv);
int pthread_attr_setscope(pthread_attr_t *attr, int scope);
EVP_CIPHER *EVP_des_cbc();
int modify_ldt(int func, void *ptr, unsigned bytecount);
int i2d_X509_CINF(X509_CINF *a, unsigned *out);
int res_mkquery(int arg0, char *arg1, int arg2, int arg3, u_char *arg4, int arg5, u_char *arg6, u_char *arg7, int arg8);
unsigned ASN1_PCTX_get_oid_flags(ASN1_PCTX *p);
uint16_t htons(uint16_t hostshort);
int i2d_X509(X509 *a, unsigned *out);
int BN_sub(BIGNUM *r, BIGNUM *a, BIGNUM *b);
int obstack_begin_1(obstack *arg0, int arg1, int arg2, void *, void *arg5);
long truncl(long x);
int spu_create(char *pathname, int flags, mode_t mode, int neighbor_fd);
int PEM_write_bio_ECPrivateKey(BIO *bp, EC_KEY *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cb, void *u);
char *envz_get(char *envz, size_t envz_len, char *name);
int qfcvt_r(long value, int ndigit, int *decpt, int *sign, char *buf, size_t len);
uint64_t lzma_index_memusage(lzma_vli streams, lzma_vli blocks);
int ns_skiprr(u_char *arg0, u_char *arg1, ns_sect arg2, int arg3);
ASN1_OBJECT *X509_NAME_ENTRY_get_object(X509_NAME_ENTRY *ne);
int SSL_use_PrivateKey_file(SSL *ssl, char *file, int type);
pitem *pqueue_iterator(pqueue pq);
int vtimes(vtimes *current, vtimes *child);
int shmdt(void *shmaddr);
int gzclose_r(gzFile file);
int SSL_CTX_check_private_key(SSL_CTX *ctx);
unsigned bn_add_words(unsigned *rp, unsigned *ap, unsigned *bp, int num);
int X509_set_subject_name(X509 *x, X509_NAME *name);
int endmntent(FILE *stream);
int BIO_dump_indent(BIO *b, char *bytes, int len, int indent);
BIGNUM *BN_dup(BIGNUM *a);
BIGNUM *ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED *ai, BIGNUM *bn);
int X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj, int ptype, void *pval, unsigned *penc, int penclen);
long kexec_load(unsigned entry, unsigned nr_segments, kexec_segment *segments, unsigned flags);
int X509_REVOKED_get_ext_by_NID(X509_REVOKED *x, int nid, int lastpos);
int deflate(z_streamp strm, int flush);
int BN_nnmod(BIGNUM *r, BIGNUM *m, BIGNUM *d, BN_CTX *ctx);
int OBJ_NAME_new_index(unsigned hash_func, int cmp_func, void free_func);
int isnanf(float value);
ASN1_VISIBLESTRING *ASN1_VISIBLESTRING_new();
void setrpcent(int stayopen);
void *calloc(size_t nmemb, size_t size);
int isupper_l(int arg0, locale_t arg1);
int i2d_X509_REQ_INFO(X509_REQ_INFO *a, unsigned *out);
void DH_set_default_method(DH_METHOD *meth);
char *SSL_rstate_string(SSL *s);
int X509_LOOKUP_init(X509_LOOKUP *ctx);
DH *PEM_read_DHparams(FILE *fp, DH *x, pem_password_cb *cb, void *u);
long set_tid_address(int *tidptr);
void *sk_set(STACK *arg0, int arg1, void *arg2);
int re_search_2(re_pattern_buffer *buffer, char *string1, int length1, char *string2, int length2, int start, int range, re_registers *regs, int stop);
int X509_TRUST_get_trust(X509_TRUST *xp);
double yn(int arg0, double arg1);
PKCS7_ENVELOPE *d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE *a, unsigned *in, long len);
X509_STORE *X509_STORE_CTX_get0_store(X509_STORE_CTX *ctx);
EVP_CIPHER *EVP_des_ede3_cbc();
int sigblock(int mask);
void *memmem(void *haystack, size_t haystacklen, void *needle, size_t needlelen);
int SSL_get_verify_mode(SSL *s);
FTS *fts_open(char *arg0, int arg1, int );
size_t strftime(char *s, size_t maxsize, char *format, tm *tp);
X509_ALGOR *PKCS5_pbe2_set(EVP_CIPHER *cipher, int iter, unsigned *salt, int saltlen);
char *strpbrk(char *s, char *accept);
wchar_t *wcswcs(wchar_t *haystack, wchar_t *needle);
int X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit, unsigned flags);
void PBE2PARAM_free(PBE2PARAM *a);
int pqueue_size(pqueue pq);
stack_st_X509_INFO *PEM_X509_INFO_read_bio(BIO *bp, stack_st_X509_INFO *sk, pem_password_cb *cb, void *u);
double clog(double z);
int i2d_X509_ATTRIBUTE(X509_ATTRIBUTE *a, unsigned *out);
X509_NAME_ENTRY *X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne);
int inflateCopy(z_streamp dest, z_streamp source);
int fputws_unlocked(wchar_t *ws, FILE *stream);
int SHA512_Update(SHA512_CTX *c, void *data, size_t len);
int tcsendbreak(int fd, int duration);
int ASN1_BIT_STRING_check(ASN1_BIT_STRING *a, unsigned *flags, int flags_len);
BN_MONT_CTX *BN_MONT_CTX_new();
size_t wcsxfrm_l(wchar_t *s1, wchar_t *s2, size_t n, locale_t loc);
void ERR_load_BUF_strings();
void lh_node_usage_stats(LHASH *lh, FILE *out);
char *gzerror(gzFile file, int *errnum);
size_t parse_printf_format(char *fmt, size_t n, int *argtypes);
void SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx, int cb, void *arg);
int ns_subdomain(char *arg0, char *arg1);
lzma_ret lzma_code(lzma_stream *strm, lzma_action action);
void p_query(u_char *arg0);
int prlimit(pid_t pid, rlimit_resource resource, rlimit *new_limit, rlimit *old_limit);
long lrintl(long x);
int pthread_mutexattr_getrobust_np(pthread_mutexattr_t *attr, int *robustness);
ASN1_TYPE *ASN1_generate_v3(char *str, X509V3_CTX *cnf);
uint8_t *inet6_option_alloc(cmsghdr *cmsg, int datalen, int multx, int plusy);
void ASN1_STRING_set_default_mask(unsigned mask);
size_t BIO_ctrl_get_read_request(BIO *b);
long lrintf(float x);
char *ptsname(int fd);
int pciconfig_write(unsigned bus, unsigned dfn, unsigned off, unsigned len, void *buf);
int login_tty(int fd);
int CRYPTO_THREADID_set_callback(void threadid_func);
EVP_CIPHER *EVP_camellia_256_cfb1();
int strcasecmp(char *s1, char *s2);
SSL_METHOD *DTLSv1_2_server_method();
int ioprio_set(int which, int who, int ioprio);
EVP_CIPHER *EVP_camellia_256_cfb8();
unsigned inw_p(unsigned port);
long tanl(long x);
pitem *pitem_new(unsigned *prio64be, void *data);
void ASN1_UTF8STRING_free(ASN1_UTF8STRING *a);
int fts64_set(FTS64 *arg0, FTSENT64 *arg1, int arg2);
int ns_sign(u_char *arg0, int *arg1, int arg2, int arg3, void *arg4, u_char *arg5, int arg6, u_char *arg7, int *arg8, time_t arg9);
long scalbl(long x, long n);
int BN_mod_sub_quick(BIGNUM *r, BIGNUM *a, BIGNUM *b, BIGNUM *m);
double scalbn(double x, int n);
int EC_POINT_is_on_curve(EC_GROUP *group, EC_POINT *point, BN_CTX *ctx);
ASN1_STRING *DISPLAYTEXT_new();
int srandom_r(unsigned seed, random_data *buf);
int setfsgid(gid_t gid);
EVP_CIPHER *EVP_aes_128_cbc();
int SSL_CTX_SRP_CTX_init(SSL_CTX *ctx);
int i2d_Netscape_RSA(RSA *a, unsigned *pp, int cb);
lzma_ret lzma_block_compressed_size(lzma_block *block, lzma_vli unpadded_size);
int signbitf(float value);
int COMP_expand_block(COMP_CTX *ctx, unsigned *out, int olen, unsigned *in, int ilen);
int EVP_MD_block_size(EVP_MD *md);
void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data);
X509_REQ *PEM_read_X509_REQ(FILE *fp, X509_REQ *x, pem_password_cb *cb, void *u);
void *memmove(void *dest, void *src, size_t n);
int check_issued(X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
int OBJ_NAME_remove(char *name, int type);
int putpmsg(int fildes, strbuf *ctlptr, strbuf *dataptr, int band, int flags);
int BIO_socket_nbio(int fd, int mode);
void endnetgrent();
float nearbyintf(float x);
void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data);
void OPENSSL_init();
int pthread_mutexattr_getrobust(pthread_mutexattr_t *attr, int *robustness);
int rcmd(char *ahost, unsigned rport, char *locuser, char *remuser, char *cmd, int *fd2p);
uint32_t lzma_crc32(uint8_t *buf, size_t size, uint32_t crc);
EVP_CIPHER *EVP_rc2_ecb();
int ssl_read(SSL *s, void *buf, int len);
int X509_REVOKED_get_ext_by_critical(X509_REVOKED *x, int crit, int lastpos);
int SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len);
long tanhl(long x);
ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);
int ASN1_item_i2d_bio(ASN1_ITEM *it, BIO *out, void *x);
lldiv_t lldiv(long numer, long denom);
int BIO_dump_cb(int cb, void *u, char *s, int len);
int fgetc(FILE *stream);
int setsockopt(int fd, int level, int optname, void *optval, socklen_t optlen);
int signalfd(int fd, sigset_t *mask, int flags);
dirent *readdir(DIR *dirp);
void pthread_unregister_cancel_restore(pthread_unwind_buf_t *buf);
int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
ASN1_TIME *X509_time_adj_ex(ASN1_TIME *s, int offset_day, long offset_sec, time_t *t);
int X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned flags);
char *fgets(char *s, int n, FILE *stream);
double cabs(double z);
void X509_PUBKEY_free(X509_PUBKEY *a);
int X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos);
int BIO_sock_error(int sock);
void BIO_set_flags(BIO *b, int flags);
float exp2f(float x);
int gethostbyname2_r(char *name, int af, hostent *result_buf, char *buf, size_t buflen, hostent *result, int *h_errnop);
void outw(unsigned value, unsigned port);
uint64_t lzma_raw_encoder_memusage(lzma_filter *filters);
void ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING *a);
int msgctl(int msqid, int cmd, msqid_ds *buf);
char *OBJ_nid2sn(int n);
int EC_POINT_set_compressed_coordinates_GFp(EC_GROUP *group, EC_POINT *p, BIGNUM *x, int y_bit, BN_CTX *ctx);
long ftell(FILE *stream);
BIO_METHOD *BIO_s_mem();
DH *DH_get_1024_160();
int ustat(dev_t dev, ustat *ubuf);
void SSL_CTX_set_tmp_rsa_callback(SSL_CTX *ctx, RSA *cb);
int BN_mod_lshift(BIGNUM *r, BIGNUM *a, int n, BIGNUM *m, BN_CTX *ctx);
size_t mbstowcs(wchar_t *pwcs, char *s, size_t n);
void free_func(voidpf opaque, voidpf address);
char *strerror_l(int errnum, locale_t l);
int OPENSSL_isservice();
int mq_getattr(mqd_t mqdes, mq_attr *mqstat);
long SSL_SESSION_get_timeout(SSL_SESSION *s);
int ns_verify_tcp_init(void *arg0, u_char *arg1, int arg2, ns_tcp_tsig_state *arg3);
ASN1_STRING *d2i_ASN1_bytes(ASN1_STRING *a, unsigned *pp, long length, int Ptag, int Pclass);
int aio_read64(aiocb64 *aiocbp);
int getitimer(itimer_which_t which, itimerval *value);
long tgammal(long arg0);
int inotify_add_watch(int fd, char *name, uint32_t mask);
void *CRYPTO_remalloc(void *addr, int num, char *file, int line);
float log1pf(float x);
int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, unsigned *d);
int i2d_PKCS7_DIGEST(PKCS7_DIGEST *a, unsigned *out);
void X509_EXTENSION_free(X509_EXTENSION *a);
ASN1_VALUE *ASN1_item_new(ASN1_ITEM *it);
int X509_NAME_print_ex_fp(FILE *fp, X509_NAME *nm, int indent, unsigned flags);
int i2d_RSAPrivateKey(RSA *a, unsigned *out);
float truncf(float x);
int SSL_CTX_use_serverinfo(SSL_CTX *ctx, unsigned *serverinfo, size_t serverinfo_length);
int aio_cancel64(int fildes, aiocb64 *aiocbp);
int getnameinfo(sockaddr *sa, socklen_t salen, char *host, socklen_t hostlen, char *serv, socklen_t servlen, int flags);
int deflateTune(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain);
void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth, int priv_decode, int priv_encode, int priv_print);
int SSL_accept(SSL *ssl);
int SSL_get_shutdown(SSL *ssl);
RSA *d2i_RSAPublicKey(RSA *a, unsigned *in, long len);
td_err_e td_ta_enable_stats(td_thragent_t *ta, int enable);
int strverscmp(char *s1, char *s2);
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey, EVP_MD *dgst);
EVP_CIPHER *EVP_camellia_128_cfb1();
int ASN1_TIME_print(BIO *fp, ASN1_TIME *a);
int symlinkat(char *from, int tofd, char *to);
int fmtmsg(long classification, char *label, int severity, char *text, char *action, char *tag);
int chdir(char *path);
void *ASN1_item_unpack(ASN1_STRING *oct, ASN1_ITEM *it);
int set_thread_area(user_desc *u_info);
void *malloc(size_t size);
int inet6_rth_reverse(void *in, void *out);
EVP_CIPHER *EVP_aes_128_ctr();
int BIO_puts(BIO *bp, char *buf);
int isdigit_l(int arg0, locale_t arg1);
wchar_t *wmemmove(wchar_t *s1, wchar_t *s2, size_t n);
int i2d_SSL_SESSION(SSL_SESSION *in, unsigned *pp);
int rexec_af(char *ahost, int rport, char *name, char *pass, char *cmd, int *fd2p, sa_family_t af);
int ns_sign_tcp_init(void *arg0, u_char *arg1, int arg2, ns_tcp_tsig_state *arg3);
ssize_t readlinkat(int fd, char *path, char *buf, size_t len);
int X509_policy_tree_level_count(X509_POLICY_TREE *tree);
int rsa_keygen(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
ssize_t tee(int fdin, int fdout, size_t len, unsigned flags);
void ASN1_item_free(ASN1_VALUE *val, ASN1_ITEM *it);
int *errno_location();
int mkostemp64(char *template, int flags);
int res_query(char *arg0, int arg1, int arg2, u_char *arg3, int arg4);
int ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned *d, int length);
void CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB *cb);
void RSA_set_default_method(RSA_METHOD *meth);
EVP_CIPHER *EVP_rc2_ofb();
EVP_CIPHER *EVP_camellia_128_cfb8();
int gzgetc_(gzFile file);
int X509_print_ex_fp(FILE *bp, X509 *x, unsigned nmflag, unsigned cflag);
X509_ATTRIBUTE *EVP_PKEY_delete_attr(EVP_PKEY *key, int loc);
int fdetach(char *path);
int X509_verify_cert(X509_STORE_CTX *ctx);
void CRYPTO_dbg_realloc(void *addr1, void *addr2, int num, char *file, int line, int before_p);
double log(double x);
int putenv(char *string);
int EC_GROUP_get_curve_GF2m(EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
FILE *fdopen(int fd, char *modes);
void *d2i_of_void(void *arg0, unsigned *arg1, long arg2);
int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1, ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey);
int OBJ_add_sigid(int signid, int dig_id, int pkey_id);
int mq_getsetattr(mqd_t mqdes, mq_attr *newattr, mq_attr *oldattr);
X509_REQ_INFO *d2i_X509_REQ_INFO(X509_REQ_INFO *a, unsigned *in, long len);
void setaliasent();
int i2d_X509_CRL_INFO(X509_CRL_INFO *a, unsigned *out);
int SSL_get_servername_type(SSL *s);
wchar_t *wcsncat(wchar_t *dest, wchar_t *src, size_t n);
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
int pthread_attr_getinheritsched(pthread_attr_t *attr, int *inherit);
int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO *bp, NETSCAPE_CERT_SEQUENCE *x);
EVP_CIPHER *EVP_des_ofb();
int X509_CRL_print(BIO *bp, X509_CRL *x);
EVP_MD *EVP_dss();
int get_mempolicy(int *mode, unsigned *nodemask, unsigned maxnode, unsigned addr, unsigned flags);
PKCS7 *d2i_PKCS7(PKCS7 *a, unsigned *in, long len);
int X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, EVP_MD *md);
ASN1_UNIVERSALSTRING *d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING *a, unsigned *in, long len);
int vswscanf(wchar_t *s, wchar_t *format, gnuc_va_list arg);
voidpf alloc_func(voidpf opaque, uInt items, uInt size);
char *ngettext(char *msgid1, char *msgid2, unsigned n);
int SSL_set_alpn_protos(SSL *ssl, unsigned *protos, unsigned protos_len);
int BN_div_recp(BIGNUM *dv, BIGNUM *rem, BIGNUM *m, BN_RECP_CTX *recp, BN_CTX *ctx);
int CRYPTO_set_locked_mem_ex_functions(void *m, void free_func);
void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth);
int sigpause(int sig);
ASN1_TYPE *ASN1_generate_nconf(char *str, CONF *nconf);
int iswblank(wint_t wc);
void *SSL_CTX_get_ex_data(SSL_CTX *ssl, int idx);
long wcstold_l(wchar_t *nptr, wchar_t *endptr, locale_t loc);
int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose, int purpose, int trust);
BIO *BIO_new_PKCS7(BIO *out, PKCS7 *p7);
EVP_CIPHER *EVP_cast5_ecb();
int ns_makecanon(char *arg0, char *arg1, size_t arg2);
EVP_CIPHER *EVP_aes_128_ofb();
void *sbrk(intptr_t delta);
int DH_KDF_X9_42(unsigned *out, size_t outlen, unsigned *Z, size_t Zlen, ASN1_OBJECT *key_oid, unsigned *ukm, size_t ukmlen, EVP_MD *md);
int setipv4sourcefilter(int s, in_addr interface_addr, in_addr group, uint32_t fmode, uint32_t numsrc, in_addr *slist);
void CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id, void *ptr);
int EVP_MD_CTX_test_flags(EVP_MD_CTX *ctx, int flags);
size_t IO_sgetn(IO_FILE *arg0, void *arg1, size_t arg2);
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, ASN1_OBJECT *obj);
int getservent_r(servent *result_buf, char *buf, size_t buflen, servent *result);
int fcvt_r(double value, int ndigit, int *decpt, int *sign, char *buf, size_t len);
int EC_GROUP_have_precompute_mult(EC_GROUP *group);
EC_KEY *PEM_read_ECPrivateKey(FILE *fp, EC_KEY *x, pem_password_cb *cb, void *u);
pid_t getpgid(pid_t pid);
int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned *data, int len);
int PEM_write_bio_X509_AUX(BIO *bp, X509 *x);
int connect(int fd, CONST_SOCKADDR_ARG addr, socklen_t len);
EVP_CIPHER *EVP_cast5_cfb64();
EVP_CIPHER *EVP_aes_256_cbc();
int creat(char *file, mode_t mode);
int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad);
RSA *d2i_RSA_PUBKEY_bio(BIO *bp, RSA *rsa);
void SSL_set_debug(SSL *s, int debug);
int DHparams_print(BIO *bp, DH *x);
X509 *d2i_X509_AUX(X509 *a, unsigned *pp, long length);
void DIRECTORYSTRING_free(ASN1_STRING *a);
int i2d_PKCS7_bio(BIO *bp, PKCS7 *p7);
int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int kind);
char *nl_langinfo(nl_item item);
int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *param, char *ipasc);
int pthread_cond_destroy(pthread_cond_t *cond);
int i2d_X509_VAL(X509_VAL *a, unsigned *out);
int SSL_select_next_proto(unsigned *out, unsigned *outlen, unsigned *in, unsigned inlen, unsigned *client, unsigned client_len);
void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);
int ispunct(int arg0);
int BIO_asn1_get_prefix(BIO *b, asn1_ps_func *pprefix, asn1_ps_func *pprefix_free);
double creal(double z);
int pthread_attr_setaffinity_np(pthread_attr_t *attr, size_t cpusetsize, cpu_set_t *cpuset);
X509 *PEM_read_X509(FILE *fp, X509 *x, pem_password_cb *cb, void *u);
int PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags);
X509 *PEM_read_X509_AUX(FILE *fp, X509 *x, pem_password_cb *cb, void *u);
unsigned X509_issuer_and_serial_hash(X509 *a);
uint64_t bswap_64(uint64_t bsx);
fstab *getfsspec(char *name);
int FIPS_mode_set(int r);
void dl_mcount_wrapper_check(void *selfpc);
void SSL_CTX_set_next_proto_select_cb(SSL_CTX *s, int cb, void *arg);
char *gettext(char *msgid);
int iswcntrl(wint_t wc);
void BIO_sock_cleanup();
void EVP_MD_do_all_sorted(void fn, void *arg);
int ASN1_TYPE_get_int_octetstring(ASN1_TYPE *a, long *num, unsigned *data, int max_len);
int sigaction(int sig, sigaction *act, sigaction *oact);
float modff(float x, float *iptr);
int getaliasent_r(aliasent *result_buf, char *buffer, size_t buflen, aliasent *result);
int X509_add1_reject_object(X509 *x, ASN1_OBJECT *obj);
int mkstemp(char *template);
long sinhl(long x);
int i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa);
int EVP_CIPHER_nid(EVP_CIPHER *cipher);
void error_at_line(int status, int errnum, char *fname, unsigned line, char *format, int vararg);
long modfl(long x, long *iptr);
int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, char *file);
int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param, ASN1_OBJECT *policy);
PKCS7_ISSUER_AND_SERIAL *PKCS7_ISSUER_AND_SERIAL_new();
int i2d_RSAPublicKey(RSA *a, unsigned *out);
void EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD *pmeth, int ctrl, int ctrl_str);
time_t time(time_t *timer);
wint_t towupper_l(wint_t wc, locale_t locale);
evp_pkey_st *SSL_get_privatekey(SSL *ssl);
int pthread_attr_setinheritsched(pthread_attr_t *attr, int inherit);
BIO_METHOD *BIO_s_log();
int EVP_EncodeBlock(unsigned *t, unsigned *f, int n);
CRYPTO_dynlock_value *CRYPTO_get_dynlock_create_callback();
int app_gen_cookie_cb(SSL *ssl, unsigned *cookie, unsigned *cookie_len);
obstack_chunk *chunkfun(void *arg0, long arg1);
EVP_PKEY *d2i_PublicKey(int type, EVP_PKEY *a, unsigned *pp, long length);
int sem_getvalue(sem_t *sem, int *sval);
int feholdexcept(fenv_t *envp);
float catanhf(float z);
void assert(char *assertion, char *file, int line);
uid_t getuid();
int ftw(char *dir, ftw_func_t func, int descriptors);
int open_by_handle_at(int mountdirfd, file_handle *handle, int flags);
void *malloc_hook(size_t size, void *arg1);
long catanhl(long z);
uint64_t lzma_raw_decoder_memusage(lzma_filter *filters);
EVP_PKEY *b2i_PVK_bio(BIO *in, pem_password_cb *cb, void *u);
lhash_st_SSL_SESSION *SSL_CTX_sessions(SSL_CTX *ctx);
int chown(char *file, uid_t owner, gid_t group);
int finit_module(int fd, char *param_values, int flags);
int gai_cancel(gaicb *gaicbp);
lzma_ret lzma_index_hash_append(lzma_index_hash *index_hash, lzma_vli unpadded_size, lzma_vli uncompressed_size);
int tls_session_ticket_ext_cb_fn(SSL *s, unsigned *data, int len, void *arg);
int sigrelse(int sig);
void ERR_load_ASN1_strings();
FTS64 *fts64_open(char *arg0, int arg1, int );
int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned *x);
int sk_find(STACK *st, void *data);
int posix_spawn(pid_t *pid, char *path, posix_spawn_file_actions_t *file_actions, posix_spawnattr_t *attrp, char *argv, char *envp);
int posix_fadvise(int fd, off_t offset, off_t len, int advise);
COMP_CTX *COMP_CTX_new(COMP_METHOD *meth);
float ynf(int arg0, float arg1);
void *morecore(ptrdiff_t size);
int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter, unsigned *salt, int saltlen);
int wctomb(char *s, wchar_t wchar);
ssize_t vmsplice(int fdout, iovec *iov, size_t count, unsigned flags);
int obstack_begin(obstack *arg0, int arg1, int arg2, void *);
int i2a_ASN1_OBJECT(BIO *bp, ASN1_OBJECT *a);
int aio_read(aiocb *aiocbp);
int ssl_peek(SSL *s, void *buf, int len);
EVP_PKEY *d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, pem_password_cb *cb, void *u);
int ASN1_STRING_copy(ASN1_STRING *dst, ASN1_STRING *str);
void EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, EVP_PKEY_METHOD *src);
double acosh(double x);
void EVP_CIPHER_do_all(void fn, void *arg);
float acosf(float x);
int lxstat64(int ver, char *filename, stat64 *stat_buf);
unsigned psk_client_callback(SSL *ssl, char *hint, char *identity, unsigned max_identity_len, unsigned *psk, unsigned max_psk_len);
int rsa_priv_dec(int flen, unsigned *from, unsigned *to, RSA *rsa, int padding);
int sigwait(sigset_t *set, int *sig);
size_t iconv(iconv_t cd, char *inbuf, size_t *inbytesleft, char *outbuf, size_t *outbytesleft);
int ASN1_item_sign_ctx(ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *asn, EVP_MD_CTX *ctx);
ASN1_OBJECT *OBJ_dup(ASN1_OBJECT *o);
int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
DSA *DSA_new();
void DISPLAYTEXT_free(ASN1_STRING *a);
pid_t setsid();
char *qecvt(long value, int ndigit, int *decpt, int *sign);
int ECDSA_verify(int type, unsigned *dgst, int dgstlen, unsigned *sig, int siglen, EC_KEY *eckey);
time_t mktime(tm *tp);
int EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned *out, int *outl);
int EC_KEY_up_ref(EC_KEY *key);
int HMAC_Update(HMAC_CTX *ctx, unsigned *data, size_t len);
BIGNUM *BN_mod_sqrt(BIGNUM *ret, BIGNUM *a, BIGNUM *n, BN_CTX *ctx);
EC_POINT *EC_POINT_bn2point(EC_GROUP *arg0, BIGNUM *arg1, EC_POINT *arg2, BN_CTX *arg3);
int printf_size(FILE *fp, printf_info *info, void *args);
Elf32_Addr la_x32_gnu_pltenter(Elf32_Sym *sym, unsigned ndx, uintptr_t *refcook, uintptr_t *defcook, La_x86_64_regs *regs, unsigned *flags, char *symname, long *framesizep);
int gzputc(gzFile file, int c);
int deflateCopy(z_streamp dest, z_streamp source);
void freefun(void *arg0, obstack_chunk *arg1);
int sprintf(char *s, char *format, int vararg);
char *hasmntopt(mntent *mnt, char *opt);
int iscntrl_l(int arg0, locale_t arg1);
int qecvt_r(long value, int ndigit, int *decpt, int *sign, char *buf, size_t len);
int ASN1_TYPE_get_octetstring(ASN1_TYPE *a, unsigned *data, int max_len);
int getsgnam_r(char *name, sgrp *result_buf, char *buffer, size_t buflen, sgrp *result);
utmpx *getutxent();
int mkstemps(char *template, int suffixlen);
EC_GROUP *EC_GROUP_new_by_curve_name(int nid);
double drand48();
int setfsuid(uid_t uid);
int sigorset(sigset_t *set, sigset_t *left, sigset_t *right);
int register_printf_type(printf_va_arg_function fct);
int res_isourserver(sockaddr_in *arg0);
int vswprintf(wchar_t *s, size_t n, wchar_t *format, gnuc_va_list arg);
int iruserok(uint32_t raddr, int suser, char *remuser, char *locuser);
int pthread_mutex_consistent(pthread_mutex_t *mutex);
ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER *a, unsigned *pp, long length);
BIGNUM *BN_get0_nist_prime_521();
int ASN1_mbstring_copy(ASN1_STRING *out, unsigned *in, int len, int inform, unsigned mask);
int getipv4sourcefilter(int s, in_addr interface_addr, in_addr group, uint32_t *fmode, uint32_t *numsrc, in_addr *slist);
int pthread_barrier_destroy(pthread_barrier_t *barrier);
EVP_MD *EVP_ecdsa();
float cosf(float x);
int tcsetpgrp(int fd, pid_t pgrp_id);
int pthread_mutex_consistent_np(pthread_mutex_t *mutex);
STACK *sk_new_null();
void lh_node_stats_bio(LHASH *lh, BIO *out);
void fp_nquery(u_char *arg0, int arg1, FILE *arg2);
X509_CRL *X509_CRL_new();
X509_POLICY_TREE *X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX *ctx);
float j0f(float arg0);
void vwarn(char *format, gnuc_va_list arg1);
int BN_sub_word(BIGNUM *a, unsigned w);
EVP_CIPHER *EVP_des_ede_ecb();
int posix_fallocate(int fd, off_t offset, off_t len);
void X509_STORE_CTX_set_cert(X509_STORE_CTX *c, X509 *x);
int sgetspent_r(char *string, spwd *result_buf, char *buffer, size_t buflen, spwd *result);
int fputc_unlocked(int c, FILE *stream);
long ldexpl(long x, int exponent);
SSL_SESSION *SSL_CTX_sess_get_get_cb(SSL_CTX *ctx);
int iswspace_l(wint_t wc, locale_t locale);
float ctanhf(float z);
int PEM_write_bio_DSAPrivateKey(BIO *bp, DSA *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cb, void *u);
unsigned inl_p(unsigned port);
int PKCS7_add_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype, void *value);
X509_POLICY_NODE *X509_policy_level_get0_node(X509_POLICY_LEVEL *level, int i);
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
long ctanhl(long z);
EVP_MD *EVP_sha();
int EVP_PKEY_copy_parameters(EVP_PKEY *to, EVP_PKEY *from);
void syslog(int pri, char *fmt, int vararg);
int DH_generate_parameters_ex(DH *dh, int prime_len, int generator, BN_GENCB *cb);
long SSL_SESSION_get_time(SSL_SESSION *s);
EC_POINT *EC_GROUP_get0_generator(EC_GROUP *group);
int isalnum_l(int arg0, locale_t arg1);
int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx, unsigned ext_type, custom_ext_add_cb add_cb, custom_ext_free_cb free_cb, void *add_arg, custom_ext_parse_cb parse_cb, void *parse_arg);
void EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth, int pkey_ctrl);
int io_close_fn(void *cookie);
X509_PUBKEY *d2i_X509_PUBKEY(X509_PUBKEY *a, unsigned *in, long len);
int ssl_renegotiate(SSL *s);
ssize_t pwritev(int fd, iovec *iovec, int count, off_t offset);
long y1l(long arg0);
void PEM_dek_info(char *buf, char *type, int len, char *str);
X509_CERT_PAIR *d2i_X509_CERT_PAIR(X509_CERT_PAIR *a, unsigned *in, long len);
long nanl(char *tagb);
void EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD *pmeth, int encrypt_init, int encryptfn);
clock_t clock();
int pthread_spin_destroy(pthread_spinlock_t *lock);
EVP_CIPHER *EVP_CIPHER_CTX_cipher(EVP_CIPHER_CTX *ctx);
float y1f(float arg0);
int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, char *pass, int passlen, ASN1_TYPE *param, EVP_CIPHER *cipher, EVP_MD *md, int en_de);
float nanf(char *tagb);
int abs(int x);
void cfmakeraw(termios *termios_p);
int sem_init(sem_t *sem, int pshared, unsigned value);
void BN_RECP_CTX_init(BN_RECP_CTX *recp);
int OBJ_cmp(ASN1_OBJECT *a, ASN1_OBJECT *b);
error_t argz_add_sep(char *argz, size_t *argz_len, char *string, int delim);
void EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags, EVP_PKEY_METHOD *meth);
long llroundf(float x);
void ASN1_PCTX_free(ASN1_PCTX *p);
unsigned *SHA1(unsigned *d, size_t n, unsigned *md);
int putspent(spwd *p, FILE *stream);
int i2d_X509_CERT_AUX(X509_CERT_AUX *a, unsigned *out);
int EC_POINT_cmp(EC_GROUP *group, EC_POINT *a, EC_POINT *b, BN_CTX *ctx);
void putshort(u_int16_t arg0, u_char *arg1);
int fgetgrent_r(FILE *stream, group *resultbuf, char *buffer, size_t buflen, group *result);
lzma_ret lzma_block_header_decode(lzma_block *block, lzma_allocator *allocator, uint8_t *in);
int fchdir(int fd);
float lgammaf_r(float arg0, int *signgamp);
X509_STORE *SSL_CTX_get_cert_store(SSL_CTX *arg0);
EVP_MD_CTX *EVP_MD_CTX_create();
int ssl_pending(SSL *s);
SSL *SSL_new(SSL_CTX *ctx);
double cpow(double x, double y);
pqueue pqueue_new();
int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
BIO_METHOD *BIO_f_reliable();
EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY *a, unsigned *pp, long length);
void verrx(int status, char *arg1, gnuc_va_list arg2);
int eventfd(unsigned count, int flags);
int i2d_ECParameters(EC_KEY *key, unsigned *out);
int X509_CRL_set_nextUpdate(X509_CRL *x, ASN1_TIME *tm);
void lh_node_stats(LHASH *lh, FILE *out);
int lchown(char *file, uid_t owner, gid_t group);
int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, BIGNUM *a, int *p, BN_CTX *ctx);
int putsgent(sgrp *g, FILE *stream);
void EC_KEY_free(EC_KEY *key);
EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_new(int id, int flags, char *pem_str, char *info);
int isspace_l(int arg0, locale_t arg1);
int posix_fadvise64(int fd, off64_t offset, off64_t len, int advise);
EC_KEY *EC_KEY_dup(EC_KEY *src);
int DH_generate_key(DH *dh);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
int i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey);
int DSAparams_print_fp(FILE *fp, DSA *x);
int aio_fsync(int operation, aiocb *aiocbp);
EVP_PKEY *b2i_PublicKey(unsigned *in, long length);
int rename(char *old, char *new);
int i2d_PKCS7_ENVELOPE(PKCS7_ENVELOPE *a, unsigned *out);
int compar_d_fn_t(void *arg0, void *arg1, void *arg2);
int pthread_mutexattr_gettype(pthread_mutexattr_t *attr, int *kind);
int posix_spawnattr_init(posix_spawnattr_t *attr);
int i2d_PUBKEY(EVP_PKEY *a, unsigned *pp);
pitem *pqueue_pop(pqueue pq);
int res_nsend(res_state arg0, u_char *arg1, int arg2, u_char *arg3, int arg4);
int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
lzma_ret lzma_raw_buffer_decode(lzma_filter *filters, lzma_allocator *allocator, uint8_t *in, size_t *in_pos, size_t in_size, uint8_t *out, size_t *out_pos, size_t out_size);
ssize_t send(int fd, void *buf, size_t n, int flags);
void endnetent();
void EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned *out, int *outl);
int unlockpt(int fd);
int fts64_close(FTS64 *arg0);
int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si);
uLong crc32_combine64(uLong arg0, uLong arg1, off64_t arg2);
int EVP_PKEY_get_attr_by_NID(EVP_PKEY *key, int nid, int lastpos);
int i2d_ASN1_PRINTABLE(ASN1_STRING *a, unsigned *out);
int X509_OBJECT_idx_by_subject(stack_st_X509_OBJECT *h, int type, X509_NAME *name);
void PKCS7_ENCRYPT_free(PKCS7_ENCRYPT *a);
EC_KEY *PEM_read_bio_ECPrivateKey(BIO *bp, EC_KEY *x, pem_password_cb *cb, void *u);
void BIO_clear_flags(BIO *b, int flags);
int sched_yield();
int i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey);
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s, time_t t, int offset_day, long offset_sec);
void SSL_set_read_ahead(SSL *s, int yes);
int ioprio_get(int which, int who);
int BIO_set(BIO *a, BIO_METHOD *type);
void psignal(int sig, char *s);
int EC_POINTs_mul(EC_GROUP *group, EC_POINT *r, BIGNUM *n, size_t num, EC_POINT *p, BIGNUM *m, BN_CTX *ctx);
int fdatasync(int fildes);
int setns(int fd, int nstype);
int X509_CRL_get_ext_by_critical(X509_CRL *x, int crit, int lastpos);
int unlink(char *name);
double exp10(double x);
unsigned SSL_SESSION_get_compress_id(SSL_SESSION *s);
int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags, ASN1_ITEM *it);
void *X509_CRL_get_meth_data(X509_CRL *crl);
ASN1_BMPSTRING *d2i_ASN1_BMPSTRING(ASN1_BMPSTRING *a, unsigned *in, long len);
float frexpf(float x, int *exponent);
int lstat64(char *file, stat64 *buf);
int swapoff(char *path);
int PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO *x);
int i2d_PBEPARAM(PBEPARAM *a, unsigned *out);
void SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode);
void X509_free(X509 *a);
double ccosh(double z);
int SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, stack_st_X509 *chain);
int X509_LOOKUP_by_subject(X509_LOOKUP *ctx, int type, X509_NAME *name, X509_OBJECT *ret);
wchar_t *wcscat(wchar_t *dest, wchar_t *src);
int wcwidth(wchar_t c);
void *mmap64(void *addr, size_t len, int prot, int flags, int fd, off64_t offset);
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf);
RSA *d2i_RSAPrivateKey_bio(BIO *bp, RSA *rsa);
int putchar(int c);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared);
void SHA1_Transform(SHA_CTX *c, unsigned *data);
int shm_unlink(char *name);
int sched_get_priority_max(int algorithm);
int ASN1_STRING_print_ex(BIO *out, ASN1_STRING *str, unsigned flags);
int X509_TRUST_set(int *t, int trust);
FILE *fopencookie(void *magic_cookie, char *modes, IO_cookie_io_functions_t io_funcs);
int BN_BLINDING_invert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *arg3);
int inet6_rth_add(void *bp, in6_addr *addr);
char *envz_entry(char *envz, size_t envz_len, char *name);
FILE *fopen64(char *filename, char *modes);
int klogctl(int type, char *bufp, int len);
lzma_ret lzma_block_header_size(lzma_block *block);
int X509_load_cert_file(X509_LOOKUP *ctx, char *file, int type);
int X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX *ctx);
void SSL_set_quiet_shutdown(SSL *ssl, int mode);
gzFile gzopen(char *arg0, char *arg1);
int catclose(nl_catd catalog);
uint64_t lzma_memlimit_get(lzma_stream *strm);
BIGNUM *BN_CTX_get(BN_CTX *ctx);
ECDSA_METHOD *ECDSA_OpenSSL();
int EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx);
int ftruncate(int fd, off_t length);
int EC_POINT_make_affine(EC_GROUP *group, EC_POINT *point, BN_CTX *ctx);
X509_SIG *X509_SIG_new();
long sgetmask();
sgrp *sgetsgent(char *string);
td_err_e td_thr_tls_get_addr(td_thrhandle_t *th, psaddr_t map_address, size_t offset, psaddr_t *address);
int EVP_OpenInit(EVP_CIPHER_CTX *ctx, EVP_CIPHER *type, unsigned *ek, int ekl, unsigned *iv, EVP_PKEY *priv);
int inflateBackEnd(z_streamp strm);
int dsa_do_verify(unsigned *dgst, int dgst_len, DSA_SIG *sig, DSA *dsa);
intmax_t wcstoimax(gwchar_t *nptr, gwchar_t *endptr, int base);
double acos(double x);
EVP_PKEY *EVP_PKCS82PKEY(PKCS8_PRIV_KEY_INFO *p8);
int accept(int fd, SOCKADDR_ARG addr, socklen_t *addr_len);
long ulimit(int cmd, int vararg);
void SSL_get0_next_proto_negotiated(SSL *s, unsigned *data, unsigned *len);
X509_REQ *d2i_X509_REQ_fp(FILE *fp, X509_REQ *req);
unsigned wcstouq(wchar_t *nptr, wchar_t *endptr, int base);
size_t strxfrm_l(char *dest, char *src, size_t n, locale_t l);
size_t strlen(char *s);
COMP_METHOD *COMP_zlib();
int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);
ECDSA_SIG *ECDSA_SIG_new();
int TLS_ext_srp_username_callback(SSL *arg0, int *arg1, void *arg2);
int PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si, X509 *x509);
int EVP_BytesToKey(EVP_CIPHER *type, EVP_MD *md, unsigned *salt, unsigned *data, int datal, int count, unsigned *key, unsigned *iv);
float atanf(float x);
int CRYPTO_EX_dup(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from, void *from_d, int idx, long argl, void *argp);
char *p_section(int section, int opcode);
double atanh(double x);
int EC_GROUP_get_pentanomial_basis(EC_GROUP *arg0, unsigned *k1, unsigned *k2, unsigned *k3);
int SSL_has_matching_session_id(SSL *ssl, unsigned *id, unsigned id_len);
int PEM_write_bio_DHxparams(BIO *bp, DH *x);
BN_BLINDING *RSA_setup_blinding(RSA *rsa, BN_CTX *ctx);
EC_KEY *PEM_read_bio_EC_PUBKEY(BIO *bp, EC_KEY *x, pem_password_cb *cb, void *u);
int generate_key(DH *dh);
char *argz_next(char *argz, size_t argz_len, char *entry);
X509_EXTENSION *X509_CRL_get_ext(X509_CRL *x, int loc);
void SSL_load_error_strings();
lzma_bool lzma_check_is_supported(lzma_check check);
BIO *BIO_new_fp(FILE *stream, int close_flag);
void X509_STORE_CTX_set0_crls(X509_STORE_CTX *c, stack_st_X509_CRL *sk);
long telldir(DIR *dirp);
int getsourcefilter(int s, uint32_t interface_addr, sockaddr *group, socklen_t grouplen, uint32_t *fmode, uint32_t *numsrc, sockaddr_storage *slist);
int mrand48_r(drand48_data *buffer, long *result);
int ssl_shutdown(SSL *s);
int iswxdigit_l(wint_t wc, locale_t locale);
int PEM_read_bio(BIO *bp, char *name, char *header, unsigned *data, long *len);
BIO *BIO_new_fd(int fd, int close_flag);
hostent *gethostbyname(char *name);
socklen_t inet6_rth_space(int type, int segments);
void ASN1_INTEGER_free(ASN1_INTEGER *a);
double floor(double x);
int SSL_SESSION_set_ex_data(SSL_SESSION *ss, int idx, void *data);
int wcsncmp(wchar_t *s1, wchar_t *s2, size_t n);
int EVP_PKEY_get_default_digest_nid(EVP_PKEY *pkey, int *pnid);
int PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cd, void *u);
float nextafterf(float x, float y);
ASN1_OCTET_STRING *d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING *a, unsigned *in, long len);
int gzflush(gzFile file, int flush);
void setpwent();
int ns_sprintrrf(u_char *arg0, size_t arg1, char *arg2, ns_class arg3, ns_type arg4, u_long arg5, u_char *arg6, size_t arg7, char *arg8, char *arg9, char *arg10, size_t arg11);
int EVP_PKEY_type(int type);
ssize_t read(int fd, void *buf, size_t nbytes);
void SSL_CTX_free(SSL_CTX *arg0);
int recvmmsg(int fd, mmsghdr *vmessages, unsigned vlen, int flags, timespec *tmo);
double atan2(double y, double x);
char *SSL_get_srp_username(SSL *s);
stack_st_X509 *X509_STORE_CTX_get_chain(X509_STORE_CTX *ctx);
EVP_CIPHER *EVP_aes_128_wrap();
long get_timeout();
lzma_index *lzma_index_init(lzma_allocator *allocator);
stack_st_X509_ATTRIBUTE *X509at_add1_attr_by_txt(stack_st_X509_ATTRIBUTE *x, char *attrname, int type, unsigned *bytes, int len);
int pthread_tryjoin_np(pthread_t th, void *thread_return);
int nftw64(char *dir, nftw64_func_t func, int descriptors, int flag);
long BIO_int_ctrl(BIO *bp, int cmd, long larg, int iarg);
char *zError(int arg0);
int deflatePending(z_streamp strm, unsigned *pending, int *bits);
void SSL_set_verify_result(SSL *ssl, long v);
rpcent *getrpcbynumber(int number);
int sysctl(sysctl_args *args);
EVP_PKEY *EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX *ctx);
long coshl(long x);
X509_CRL_INFO *d2i_X509_CRL_INFO(X509_CRL_INFO *a, unsigned *in, long len);
char *basename(char *filename);
int EC_POINT_add(EC_GROUP *group, EC_POINT *r, EC_POINT *a, EC_POINT *b, BN_CTX *ctx);
int ffs(int i);
ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio);
char *X509_get_default_cert_file();
int DH_check(DH *dh, int *codes);
EVP_CIPHER *EVP_aes_192_wrap();
int ferror_unlocked(FILE *stream);
lzma_ret lzma_vli_decode(lzma_vli *vli, size_t *vli_pos, uint8_t *in, size_t *in_pos, size_t in_size);
double y0(double arg0);
int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to, X509_VERIFY_PARAM *from);
int EC_POINT_dbl(EC_GROUP *group, EC_POINT *r, EC_POINT *a, BN_CTX *ctx);
int SSL_get_rfd(SSL *s);
int i2d_DSAparams(DSA *a, unsigned *pp);
EVP_CIPHER *EVP_aes_256_cfb128();
void OBJ_NAME_do_all(int type, void fn, void *arg);
int PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cd, void *u);
void BIO_ssl_shutdown(BIO *ssl_bio);
char *X509_get_default_cert_dir();
int BIO_nread(BIO *bio, char *buf, int num);
DH *DH_new_method(ENGINE *engine);
void ECDSA_METHOD_set_sign_setup(ECDSA_METHOD *ecdsa_method, int ecdsa_sign_setup);
int get_by_subject(X509_LOOKUP *ctx, int type, X509_NAME *name, X509_OBJECT *ret);
int inflateInit_(z_streamp strm, char *version, int stream_size);
float roundf(float x);
void argz_extract(char *argz, size_t len, char *argv);
void ns_put16(u_int arg0, u_char *arg1);
void ssl_free(SSL *s);
int EVP_PKEY_print_params(BIO *out, EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx);
int mkostemps64(char *template, int suffixlen, int flags);
int PEM_def_callback(char *buf, int num, int w, void *key);
int feof_unlocked(FILE *stream);
int num_ciphers();
void CRYPTO_get_dynlock_lock_callback();
int SSL_CTX_remove_session(SSL_CTX *arg0, SSL_SESSION *c);
EVP_CIPHER *EVP_des_ede3();
double remquo(double x, double y, int *quo);
int isupper(int arg0);
int UTF8_putc(unsigned *str, int len, unsigned value);
double trunc(double x);
int sched_setaffinity(pid_t pid, size_t cpusetsize, cpu_set_t *cpuset);
void ECDSA_METHOD_set_name(ECDSA_METHOD *ecdsa_method, char *name);
int SSL_CTX_set_srp_username_callback(SSL_CTX *ctx, int cb);
td_err_e td_ta_setconcurrency(td_thragent_t *ta, int level);
SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx);
double casin(double z);
int i2d_DSAPublicKey(DSA *a, unsigned *pp);
EVP_CIPHER *EVP_camellia_256_ofb();
int X509_set_notBefore(X509 *x, ASN1_TIME *tm);
int strcoll(char *s1, char *s2);
int PEM_write_bio_DSAparams(BIO *bp, DSA *x);
void EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx);
int execl(char *path, char *arg, int vararg);
void EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD *pmeth, void cleanup);
int X509_ocspid_print(BIO *bp, X509 *x);
int finite(double value);
void EC_GROUP_clear_free(EC_GROUP *group);
void ERR_load_RSA_strings();
int gzvprintf(gzFile file, char *format, va_list va);
void BN_set_params(int mul, int high, int low, int mont);
X509_REVOKED *X509_REVOKED_dup(X509_REVOKED *rev);
int wcsncasecmp_l(wchar_t *s1, wchar_t *s2, size_t n, locale_t loc);
BIO_METHOD *BIO_s_accept();
speed_t cfgetospeed(termios *termios_p);
EVP_PKEY *PEM_read_PUBKEY(FILE *fp, EVP_PKEY *x, pem_password_cb *cb, void *u);
double fmod(double x, double y);
SSL_CIPHER *SSL_CIPHER_find(SSL *ssl, unsigned *ptr);
DH_METHOD *DH_get_default_method();
size_t EC_GROUP_get_seed_len(EC_GROUP *arg0);
char *setstate(char *statebuf);
int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx);
char *dgettext(char *domainname, char *msgid);
DSA_SIG *d2i_DSA_SIG(DSA_SIG *v, unsigned *pp, long length);
int linkat(int fromfd, char *from, int tofd, char *to, int flags);
int flbf(FILE *fp);
int EVP_CipherInit(EVP_CIPHER_CTX *ctx, EVP_CIPHER *cipher, unsigned *key, unsigned *iv, int enc);
void SSL_set_msg_callback(SSL *ssl, void cb);
int RSA_check_key(RSA *arg0);
int gethostbyname_r(char *name, hostent *result_buf, char *buf, size_t buflen, hostent *result, int *h_errnop);
protoent *getprotobynumber(int proto);
int pthread_getattr_default_np(pthread_attr_t *attr);
void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx, int new_session_cb);
void ASN1_ENUMERATED_free(ASN1_ENUMERATED *a);
SSL_SESSION *PEM_read_SSL_SESSION(FILE *fp, SSL_SESSION *x, pem_password_cb *cb, void *u);
int SSL_use_PrivateKey_ASN1(int pk, SSL *ssl, unsigned *d, long len);
int deflateInit_(z_streamp strm, int level, char *version, int stream_size);
BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from);
int sem_close(sem_t *sem);
unsigned *SHA256(unsigned *d, size_t n, unsigned *md);
int pciconfig_iobase(long which, unsigned bus, unsigned devfn);
void setsgent();
int CRYPTO_get_add_lock_callback();
int ASN1_parse_dump(BIO *bp, unsigned *pp, long len, int indent, int dump);
RSA *PEM_read_RSA_PUBKEY(FILE *fp, RSA *x, pem_password_cb *cb, void *u);
key_serial_t add_key(char *type, char *description, void *payload, size_t plen, key_serial_t keyring);
int uselib(char *library);
void EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX *ctx, int *dat, int datlen);
int getgrent_r(group *resultbuf, char *buffer, size_t buflen, group *result);
char *EVP_get_pw_prompt();
SSL_METHOD *TLSv1_2_client_method();
lzma_check lzma_get_check(lzma_stream *strm);
lzma_ret lzma_stream_header_decode(lzma_stream_flags *options, uint8_t *in);
int lchmod(char *file, mode_t mode);
int vscanf(char *format, gnuc_va_list arg);
char *strrchr(char *s, int c);
int regexec(regex_t *preg, char *string, size_t nmatch, regmatch_t *pmatch, int eflags);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
int pthread_setcancelstate(int state, int *oldstate);
char *NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *x);
int usleep(useconds_t useconds);
int X509_LOOKUP_shutdown(X509_LOOKUP *ctx);
void malloc_initialize_hook();
size_t BIO_ctrl_get_write_guarantee(BIO *b);
X509_ATTRIBUTE *X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa);
int OBJ_txt2nid(char *s);
int ECDSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int CRYPTO_set_mem_debug_functions(void m, void r, void f, void so, long go);
int EC_GROUP_get_degree(EC_GROUP *group);
char *stpcpy(char *dest, char *src);
X509_PKEY *d2i_X509_PKEY(X509_PKEY *a, unsigned *pp, long length);
long labs(long x);
unsigned *SHA(unsigned *d, size_t n, unsigned *md);
BIGNUM *BN_get0_nist_prime_224();
int UTF8_getc(unsigned *str, int len, unsigned *val);
int i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey);
void X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx);
void qsort_r(void *base, size_t nmemb, size_t size, compar_d_fn_t compar, void *arg);
ssize_t recv(int fd, void *buf, size_t n, int flags);
div_t div(int numer, int denom);
caddr_t create_module(char *name, size_t size);
int mknodat(int fd, char *path, mode_t mode, dev_t dev);
void lzma_end(lzma_stream *strm);
int BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);
int BN_mod_sqr(BIGNUM *r, BIGNUM *a, BIGNUM *m, BN_CTX *ctx);
X509 *SSL_CTX_get0_certificate(SSL_CTX *ctx);
size_t wcsspn(wchar_t *wcs, wchar_t *accept);
int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, char *file, int type);
int SSL_CTX_set_cipher_list(SSL_CTX *arg0, char *str);
EC_METHOD *EC_POINT_method_of(EC_POINT *point);
protoent *getprotobyname(char *name);
int isblank(int arg0);
SSL_METHOD *TLSv1_client_method();
PKCS8_PRIV_KEY_INFO *PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO *x, pem_password_cb *cb, void *u);
void gzclearerr(gzFile file);
int ssl_dispatch_alert(SSL *s);
int32_t *ctype_tolower_loc();
void fp_query(u_char *arg0, FILE *arg1);
ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE *val, unsigned *in, long len, ASN1_ITEM *it);
utmpx *getutxid(utmpx *id);
servent *getservbyname(char *name, char *proto);
int BN_nist_mod_384(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
td_err_e td_init();
void RSA_free(RSA *r);
mode_t umask(mode_t mask);
BIO *BIO_new_ssl(SSL_CTX *ctx, int client);
int SSL_SESSION_print(BIO *fp, SSL_SESSION *ses);
lzma_ret lzma_raw_encoder(lzma_stream *strm, lzma_filter *filters);
int mlock(void *addr, size_t len);
int EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned *out, int *outl);
int i2d_X509_EXTENSION(X509_EXTENSION *a, unsigned *out);
servent *getservbyport(int port, char *proto);
int BN_mod_exp_mont_consttime(BIGNUM *rr, BIGNUM *a, BIGNUM *p, BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont);
int ssl_connect(SSL *s);
unsigned strtoull_l(char *nptr, char *endptr, int base, locale_t loc);
off64_t gzseek64(gzFile arg0, off64_t arg1, int arg2);
int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm);
EVP_CIPHER *EVP_rc2_40_cbc();
lzma_bool lzma_mode_is_supported(lzma_mode mode);
int X509_ATTRIBUTE_count(X509_ATTRIBUTE *attr);
void ERR_load_DH_strings();
int putpwent(passwd *p, FILE *f);
int RSA_padding_add_PKCS1_OAEP(unsigned *to, int tlen, unsigned *f, int fl, unsigned *p, int pl);
X509_CERT_AUX *X509_CERT_AUX_new();
int fattach(int fildes, char *path);
float csinf(float z);
unsigned lh_strhash(char *c);
int res_nsearch(res_state arg0, char *arg1, int arg2, int arg3, u_char *arg4, int arg5);
void monstartup(u_long lowpc, u_long highpc);
long csinl(long z);
wchar_t *wcsrchr(wchar_t *wcs, wchar_t wc);
int isnanl(long value);
double csinh(double z);
int SSL_set_session(SSL *to, SSL_SESSION *session);
NETSCAPE_X509 *d2i_NETSCAPE_X509(NETSCAPE_X509 *a, unsigned *in, long len);
int lio_listio64(int mode, aiocb64 *list, int nent, sigevent *sig);
long nearbyintl(long x);
void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO *si, EVP_PKEY *pk, X509_ALGOR *pdig, X509_ALGOR *psig);
int statfs64(char *file, statfs64 *buf);
void ERR_load_PEM_strings();
int posix_spawnattr_getpgroup(posix_spawnattr_t *attr, pid_t *pgroup);
int memcmp(void *s1, void *s2, size_t n);
int SSL_renegotiate_abbreviated(SSL *s);
void *ASN1_item_d2i_bio(ASN1_ITEM *it, BIO *in, void *x);
void *ASN1_item_dup(ASN1_ITEM *it, void *x);
long llrint(double x);
EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY *a);
void obstack_free(obstack *arg0, void *arg1);
void lzma_index_end(lzma_index *i, lzma_allocator *allocator);
double cosh(double x);
int swapon(char *path, int flags);
int alphasort64(dirent64 *e1, dirent64 *e2);
int i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa);
void bio_info_cb(bio_st *arg0, int arg1, char *arg2, int arg3, long arg4, long arg5);
int PKCS7_verify(PKCS7 *p7, stack_st_X509 *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);
dh_st *EVP_PKEY_get1_DH(EVP_PKEY *pkey);
int rsa_priv_enc(int flen, unsigned *from, unsigned *to, RSA *rsa, int padding);
int llseek(unsigned fd, unsigned offset_high, unsigned offset_low, loff_t *result, unsigned whence);
lzma_ret lzma_index_append(lzma_index *i, lzma_allocator *allocator, lzma_vli unpadded_size, lzma_vli uncompressed_size);
void EVP_PBE_cleanup();
ASN1_STRING *d2i_DISPLAYTEXT(ASN1_STRING *a, unsigned *in, long len);
EVP_CIPHER *EVP_aes_256_ccm();
int ASN1_put_eoc(unsigned *pp);
void OBJ_NAME_do_all_sorted(int type, void fn, void *arg);
void SHA_Transform(SHA_CTX *c, unsigned *data);
float y0f(float arg0);
BIO_METHOD *BIO_s_null();
ASN1_T61STRING *ASN1_T61STRING_new();
void updwtmpx(char *wtmpx_file, utmpx *utmpx);
int SSL_renegotiate_pending(SSL *s);
int listen(int fd, int n);
lzma_ret lzma_stream_decoder(lzma_stream *strm, uint64_t memlimit, uint32_t flags);
long y0l(long arg0);
tm *gmtime_r(time_t *timer, tm *tp);
int vsnprintf(char *s, size_t maxlen, char *format, gnuc_va_list arg);
wint_t gconv_btowc_fct(gconv_step *arg0, unsigned arg1);
int SSL_CTX_get_verify_mode(SSL_CTX *ctx);
int EVP_PKEY_meth_add0(EVP_PKEY_METHOD *pmeth);
char *EC_curve_nid2nist(int nid);
int wmemcmp(wchar_t *s1, wchar_t *s2, size_t n);
long CRYPTO_get_mem_debug_options();
int pthread_attr_getstackaddr(pthread_attr_t *attr, void *stackaddr);
void *mremap(void *addr, size_t old_len, size_t new_len, int flags, int vararg);
lzma_ret lzma_filter_flags_size(uint32_t *size, lzma_filter *filter);
X509_EXTENSION *X509_EXTENSION_new();
int gzdirect(gzFile file);
int fanotify_mark(int fanotify_fd, unsigned flags, uint64_t mask, int dfd, char *pathname);
unsigned ASN1_PCTX_get_nm_flags(ASN1_PCTX *p);
sem_t *sem_open(char *name, int oflag, int vararg);
RSA *d2i_Netscape_RSA(RSA *a, unsigned *pp, long length, int cb);
int sgetsgent_r(char *string, sgrp *result_buf, char *buffer, size_t buflen, sgrp *result);
wint_t putwchar_unlocked(wchar_t wc);
int BN_rshift(BIGNUM *r, BIGNUM *a, int n);
void setutxent();
int PKCS7_set_cipher(PKCS7 *p7, EVP_CIPHER *cipher);
uid_t geteuid();
DH *PEM_read_bio_DHparams(BIO *bp, DH *x, pem_password_cb *cb, void *u);
int RSA_verify(int type, unsigned *m, unsigned m_length, unsigned *sigbuf, unsigned siglen, RSA *rsa);
EVP_CIPHER *EVP_aes_192_cfb8();
int readdir64_r(DIR *dirp, dirent64 *entry, dirent64 *result);
DH *d2i_DHparams(DH *a, unsigned *pp, long length);
lzma_ret lzma_easy_encoder(lzma_stream *strm, uint32_t preset, lzma_check check);
ECDSA_METHOD *ECDSA_METHOD_new(ECDSA_METHOD *ecdsa_method);
CRYPTO_THREADID *BN_BLINDING_thread_id(BN_BLINDING *arg0);
int DSAparams_print(BIO *bp, DSA *x);
void SSL_COMP_free_compression_methods();
int EC_GROUP_get_cofactor(EC_GROUP *group, BIGNUM *cofactor, BN_CTX *ctx);
int BN_GF2m_mod_div(BIGNUM *r, BIGNUM *a, BIGNUM *b, BIGNUM *p, BN_CTX *ctx);
void action_fn_t(void *nodep, VISIT value, int level);
void cancel_routine(void *arg0);
int dsa_paramgen(DSA *dsa, int bits, unsigned *seed, int seed_len, int *counter_ret, unsigned *h_ret, BN_GENCB *cb);
void quick_exit(int status);
void flushlbf();
long cacoshl(long z);
int SHA224_Update(SHA256_CTX *c, void *data, size_t len);
pid_t getpid();
lzma_ret lzma_stream_flags_compare(lzma_stream_flags *a, lzma_stream_flags *b);
int BIO_accept(int sock, char *ip_port);
void ECDSA_METHOD_set_app_data(ECDSA_METHOD *ecdsa_method, void *app);
void *dlmopen(Lmid_t nsid, char *file, int mode);
ASN1_VISIBLESTRING *d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING *a, unsigned *in, long len);
long csqrtl(long z);
int vwscanf(wchar_t *format, gnuc_va_list arg);
stack_st_X509_EXTENSION *X509v3_add_ext(stack_st_X509_EXTENSION *x, X509_EXTENSION *ex, int loc);
char *sym_ntop(res_sym *arg0, int arg1, int *arg2);
unsigned *X509_keyid_get0(X509 *x, int *len);
long expm1l(long x);
int SMIME_text(BIO *in, BIO *out);
float csqrtf(float z);
X509_ATTRIBUTE *X509_ATTRIBUTE_new();
int iswgraph(wint_t wc);
utmp *getutent();
int vlimit(vlimit_resource resource, int value);
lzma_ret lzma_stream_buffer_encode(lzma_filter *filters, lzma_check check, lzma_allocator *allocator, uint8_t *in, size_t in_size, uint8_t *out, size_t *out_pos, size_t out_size);
X509_CRL_INFO *X509_CRL_INFO_new();
void X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unsigned flags);
double exp(double x);
void ASN1_STRING_length_set(ASN1_STRING *x, int n);
int i2d_X509_PUBKEY(X509_PUBKEY *a, unsigned *out);
int pthread_attr_getdetachstate(pthread_attr_t *attr, int *detachstate);
void *malloc_get_state();
void srandom(unsigned seed);
int BN_sqr(BIGNUM *r, BIGNUM *a, BN_CTX *ctx);
int PKCS7_dataFinal(PKCS7 *p7, BIO *bio);
int ECDSA_set_ex_data(EC_KEY *d, int idx, void *arg);
int strncasecmp(char *s1, char *s2, size_t n);
int X509_load_cert_crl_file(X509_LOOKUP *ctx, char *file, int type);
int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *file_actions, int fd);
int BN_bn2mpi(BIGNUM *a, unsigned *to);
double ctan(double z);
int EVP_PKEY_print_public(BIO *out, EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx);
void EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD *pmeth, int keygen_init, int keygen);
EVP_CIPHER *EVP_get_cipherbyname(char *name);
int fstatvfs(int fildes, statvfs *buf);
int i2d_ASN1_BMPSTRING(ASN1_BMPSTRING *a, unsigned *out);
void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
void putlong(u_int32_t arg0, u_char *arg1);
EVP_MD *EVP_sha384();
size_t wcslen(wchar_t *s);
lzma_ret lzma_stream_buffer_decode(uint64_t *memlimit, uint32_t flags, lzma_allocator *allocator, uint8_t *in, size_t *in_pos, size_t in_size, uint8_t *out, size_t *out_pos, size_t out_size);
int EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx, EVP_MD *type, ENGINE *e, EVP_PKEY *pkey);
void pthread_register_cancel_defer(pthread_unwind_buf_t *buf);
int X509_STORE_get_by_subject(X509_STORE_CTX *vs, int type, X509_NAME *name, X509_OBJECT *ret);
NETSCAPE_SPKAC *d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC *a, unsigned *in, long len);
int access(char *name, int type);
long lroundf(float x);
void lzma_index_hash_end(lzma_index_hash *index_hash, lzma_allocator *allocator);
int EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode);
ASN1_SEQUENCE_ANY *d2i_ASN1_SEQUENCE_ANY(ASN1_SEQUENCE_ANY *a, unsigned *in, long len);
int inflateBack(z_streamp strm, in_func in, void *in_desc, out_func out, void *out_desc);
int SSL_set_srp_server_param_pw(SSL *s, char *user, char *pass, char *grp);
int underflow(IO_FILE *arg0);
int pthread_setconcurrency(int level);
int fputs(char *s, FILE *stream);
BIO_METHOD *BIO_s_bio();
long conjl(long z);
void CRYPTO_EX_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx, long argl, void *argp);
DSA *d2i_DSA_PUBKEY(DSA *a, unsigned *pp, long length);
char *X509_get_default_private_dir();
float conjf(float z);
void *lsearch(void *key, void *base, size_t *nmemb, size_t size, compar_fn_t compar);
int iswupper_l(wint_t wc, locale_t locale);
int wcscasecmp_l(wchar_t *s1, wchar_t *s2, locale_t loc);
void *realloc_hook(void *ptr, size_t size, void *arg2);
void OBJ_sigid_free();
BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, ASN1_ITEM *it);
void EC_GROUP_free(EC_GROUP *group);
int bputs(BIO *arg0, char *arg1);
void *EVP_PKEY_get0(EVP_PKEY *pkey);
double tgamma(double arg0);
uint64_t lzma_physmem();
char *X509_verify_cert_error_string(long n);
int EC_POINT_mul(EC_GROUP *group, EC_POINT *r, BIGNUM *n, EC_POINT *q, BIGNUM *m, BN_CTX *ctx);
void PKCS5_PBE_add();
int BIO_fd_should_retry(int i);
int iswxdigit(wint_t wc);
wchar_t *wcscpy(wchar_t *dest, wchar_t *src);
long rintl(long x);
char *SSL_get_srp_userinfo(SSL *s);
int asn1_Finish(ASN1_CTX *c);
int posix_spawnattr_setpgroup(posix_spawnattr_t *attr, pid_t pgroup);
int pthread_attr_destroy(pthread_attr_t *attr);
void endutxent();
td_err_e td_ta_event_addr(td_thragent_t *ta, td_event_e event, td_notify_t *ptr);
ASN1_GENERALIZEDTIME *d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME *a, unsigned *in, long len);
int EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned *outm, int *outl);
void ASN1_OCTET_STRING_free(ASN1_OCTET_STRING *a);
int X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, EVP_MD *md);
long getunwind(void *buf, size_t buf_size);
int remove(char *filename);
int EVP_PKEY_set_type(EVP_PKEY *pkey, int type);
void endutent();
sighandler_t ssignal(int sig, sighandler_t handler);
int fstat64(int fd, stat64 *buf);
X509_EXTENSIONS *d2i_X509_EXTENSIONS(X509_EXTENSIONS *a, unsigned *in, long len);
int vhangup();
int SSL_CIPHER_get_bits(SSL_CIPHER *c, int *alg_bits);
int mkdirat(int fd, char *path, mode_t mode);
int i2d_ASN1_INTEGER(ASN1_INTEGER *a, unsigned *out);
int SRP_generate_server_master_secret(SSL *s, unsigned *master_key);
BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b, BIGNUM *e, BIGNUM *m, BN_CTX *ctx, int bn_mod_exp, BN_MONT_CTX *m_ctx);
int mbtowc(wchar_t *pwc, char *s, size_t n);
void ASN1_IA5STRING_free(ASN1_IA5STRING *a);
int fputc(int c, FILE *stream);
int iswgraph_l(wint_t wc, locale_t locale);
X509_INFO *X509_INFO_new();
EVP_CIPHER *EVP_cast5_cbc();
BIO *BIO_get_retry_BIO(BIO *bio, int *reason);
FILE *open_wmemstream(wchar_t *bufloc, size_t *sizeloc);
int atexit(void func);
int BIO_asn1_get_suffix(BIO *b, asn1_ps_func *psuffix, asn1_ps_func *psuffix_free);
int SSL_write(SSL *ssl, void *buf, int num);
BIO_METHOD *BIO_s_datagram();
char *rindex(char *s, int c);
int SSL_extension_supported(unsigned ext_type);
EC_KEY *EC_KEY_new_by_curve_name(int nid);
EVP_CIPHER *EVP_bf_ofb();
long BIO_get_callback(BIO *b);
long jrand48(unsigned *xsubi);
unsigned X509_issuer_name_hash(X509 *a);
char *strchr(char *s, int c);
int X509_set_issuer_name(X509 *x, X509_NAME *name);
void logwtmp(char *ut_line, char *ut_name, char *ut_host);
int CRYPTO_ex_data_new_class();
ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(BIGNUM *bn, ASN1_ENUMERATED *ai);
long sysconf(int name);
netent *getnetbyaddr(uint32_t net, int type);
int rt_tgsigqueueinfo(pid_t tgid, pid_t tid, int sig, siginfo_t *uinfo);
void ECDSA_set_default_method(ECDSA_METHOD *meth);
void PBKDF2PARAM_free(PBKDF2PARAM *a);
EVP_CIPHER *EVP_des_cfb1();
char *loc_ntoa(u_char *binary, char *ascii);
int EC_POINT_copy(EC_POINT *dst, EC_POINT *src);
int addmntent(FILE *stream, mntent *mnt);
EVP_CIPHER *EVP_camellia_128_ecb();
void ERR_load_PKCS7_strings();
long atoll(char *nptr);
PKCS7 *d2i_PKCS7_bio(BIO *bp, PKCS7 *p7);
void *X509_get_ex_data(X509 *r, int idx);
char *SSL_state_string_long(SSL *s);
EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY *eckey);
long migrate_pages(int pid, unsigned maxnode, unsigned *old_nodes, unsigned *new_nodes);
long BIO_ctrl(BIO *bp, int cmd, long larg, void *parg);
int lstat(char *file, stat *buf);
ASN1_TYPE *ASN1_TYPE_new();
int i2a_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *a);
int setresgid(gid_t rgid, gid_t egid, gid_t sgid);
int BN_is_prime_fasttest(BIGNUM *p, int nchecks, void callback, BN_CTX *ctx, void *cb_arg, int do_trial_division);
int BN_GF2m_mod_inv_arr(BIGNUM *r, BIGNUM *b, int *p, BN_CTX *ctx);
BIGNUM *BN_bin2bn(unsigned *s, int len, BIGNUM *ret);
ssize_t getdirentries(int fd, char *buf, size_t nbytes, off_t *basep);
wint_t ungetwc(wint_t wc, FILE *stream);
void argp_program_version_hook(FILE *stream, argp_state *state);
int PKCS7_content_new(PKCS7 *p7, int nid);
int SSL_connect(SSL *ssl);
int RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned *EM, unsigned *mHash, EVP_MD *Hash, int sLen);
int SSL_CTX_get_verify_depth(SSL_CTX *ctx);
int CRYPTO_num_locks();
long PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg);
unsigned X509_issuer_name_hash_old(X509 *a);
long catanl(long z);
int handshake_func(SSL *arg0);
char *BIO_method_name(BIO *b);
int initgroups(char *user, gid_t group);
double catanh(double z);
int issignaling(double value);
sighandler_t sysv_signal(int sig, sighandler_t handler);
size_t wcsnlen(wchar_t *s, size_t maxlen);
int inet6_opt_set_val(void *databuf, int offset, void *val, socklen_t vallen);
BIO_METHOD *BIO_f_base64();
int X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx);
int PKCS7_stream(unsigned *boundary, PKCS7 *p7);
rpcent *getrpcent();
int sigqueue(pid_t pid, int sig, sigval val);
int timer_delete(timer_t timerid);
double sinh(double x);
int fflush_unlocked(FILE *stream);
void SSL_set_tmp_rsa_callback(SSL *ssl, RSA *cb);
void res_npquery(res_state arg0, u_char *arg1, int arg2, FILE *arg3);
int PEM_ASN1_write_bio(i2d_of_void *i2d, char *name, BIO *bp, void *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cb, void *u);
td_err_e td_thr_event_enable(td_thrhandle_t *th, int event);
X509_REVOKED *d2i_X509_REVOKED(X509_REVOKED *a, unsigned *in, long len);
X509_EXTENSION *d2i_X509_EXTENSION(X509_EXTENSION *a, unsigned *in, long len);
float sinf(float x);
void *alloca(size_t size);
void *X509_get_ext_d2i(X509 *x, int nid, int *crit, int *idx);
BIGNUM *BN_get0_nist_prime_256();
DSA *PEM_read_DSA_PUBKEY(FILE *fp, DSA *x, pem_password_cb *cb, void *u);
float cacoshf(float z);
ssize_t pread(int fd, void *buf, size_t nbytes, off_t offset);
int X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x);
int generate_params(DH *dh, int prime_len, int generator, BN_GENCB *cb);
size_t BUF_strlcpy(char *dst, char *src, size_t siz);
unsigned LHASH_HASH_FN_TYPE(void *arg0);
int DSA_print_fp(FILE *bp, DSA *x, int off);
void CRYPTO_get_mem_functions(void *m, void *r, void f);
int gethostname(char *name, size_t len);
DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA *dsa);
int iruserok_af(void *raddr, int suser, char *remuser, char *locuser, sa_family_t af);
ECDSA_METHOD *ECDSA_get_default_method();
int create(BIO *arg0);
int X509_chain_check_suiteb(int *perror_depth, X509 *x, stack_st_X509 *chain, unsigned flags);
char *SSL_alert_type_string(int value);
EVP_CIPHER *EVP_enc_null();
int ASN1_STRING_print_ex_fp(FILE *fp, ASN1_STRING *str, unsigned flags);
void X509_ALGOR_set_md(X509_ALGOR *alg, EVP_MD *md);
int tcflush(int fd, int queue_selector);
int dup(int fd);
int ns_parse_ttl(char *arg0, u_long *arg1);
dirent64 *readdir64(DIR *dirp);
pid_t wait(WAIT_STATUS stat_loc);
void RSA_PSS_PARAMS_free(RSA_PSS_PARAMS *a);
RSA_METHOD *RSA_get_default_method();
int i2d_PKCS7_fp(FILE *fp, PKCS7 *p7);
void ASN1_put_object(unsigned *pp, int constructed, int length, int tag, int xclass);
int option_is_short(argp_option *opt);
long asinl(long x);
RSA_PSS_PARAMS *RSA_PSS_PARAMS_new();
int ASN1_STRING_to_UTF8(unsigned *out, ASN1_STRING *in);
void setprotoent(int stay_open);
void EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags);
float asinf(float x);
float casinf(float z);
void CRYPTO_set_dynlock_create_callback(CRYPTO_dynlock_value *dyn_create_function);
int adjtime(timeval *delta, timeval *olddelta);
ssize_t aio_return(aiocb *aiocbp);
size_t strnlen(char *string, size_t maxlen);
int unshare(int flags);
void OPENSSL_add_all_algorithms_noconf();
ssize_t getxattr(char *path, char *name, void *value, size_t size);
int pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, timespec *timeout, sigset_t *sigmask);
int execve(char *path, char *argv, char *envp);
int fputws(wchar_t *ws, FILE *stream);
ssize_t splice(int fdin, off64_t *offin, int fdout, off64_t *offout, size_t len, unsigned flags);
int IO_peekc_locked(IO_FILE *fp);
int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
int getnetbyaddr_r(uint32_t net, int type, netent *result_buf, char *buf, size_t buflen, netent *result, int *h_errnop);
long cacosl(long z);
int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, char *str);
DSA_SIG *DSA_SIG_new();
int dl_iterate_phdr(int callback, void *data);
double asinh(double x);
unsigned ASN1_PCTX_get_cert_flags(ASN1_PCTX *p);
void EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD *pmeth, int decrypt_init, int decrypt);
int gconv_transliterate(gconv_step *step, gconv_step_data *step_data, unsigned *inbufstart, unsigned *inbufp, unsigned *inbufend, unsigned *outbufstart, size_t *irreversible);
long casinl(long z);
long remainderl(long x, long y);
char *p_rcode(int arg0);
EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY *x, pem_password_cb *cb, void *u);
unsigned SSL_CONF_CTX_set_flags(SSL_CONF_CTX *cctx, unsigned flags);
void error(int status, int errnum, char *format, int vararg);
res_sendhookact res_send_qhook(sockaddr_in *ns, u_char *query, int *querylen, u_char *ans, int anssiz, int *resplen);
DSA *d2i_DSAparams(DSA *a, unsigned *pp, long length);
wint_t fputwc_unlocked(wchar_t wc, FILE *stream);
ASN1_TIME *X509_time_adj(ASN1_TIME *s, long adj, time_t *t);
void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags);
ssize_t process_vm_readv(pid_t pid, iovec *lvec, unsigned liovcnt, iovec *rvec, unsigned riovcnt, unsigned flags);
char *EC_POINT_point2hex(EC_GROUP *arg0, EC_POINT *arg1, point_conversion_form_t form, BN_CTX *arg3);
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *attr, int protocol);
long SSL_get_default_timeout(SSL *s);
int pipe2(int *pipedes, int flags);
void *ECDSA_METHOD_get_app_data(ECDSA_METHOD *ecdsa_method);
int BN_GF2m_mod_mul_arr(BIGNUM *r, BIGNUM *a, BIGNUM *b, int *p, BN_CTX *ctx);
int inet6_opt_finish(void *extbuf, socklen_t extlen, int offset);
int sethostid(long id);
char *p_type(int arg0);
void kernel_sighandler_t(int arg0);
void SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx, int app_verify_cookie_cb);
pitem *pqueue_next(piterator *iter);
int ASN1_item_verify(ASN1_ITEM *it, X509_ALGOR *algor1, ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey);
float scalbf(float x, float n);
size_t wcstombs(char *s, wchar_t *pwcs, size_t n);
X509_NAME *d2i_X509_NAME(X509_NAME *a, unsigned *in, long len);
int pthread_spin_lock(pthread_spinlock_t *lock);
int euidaccess(char *name, int type);
lzma_ret lzma_alone_encoder(lzma_stream *strm, lzma_options_lzma *options);
lzma_ret lzma_memlimit_set(lzma_stream *strm, uint64_t memlimit);
int lrand48_r(drand48_data *buffer, long *result);
X509_ALGOR *PKCS5_pbe2_set_iv(EVP_CIPHER *cipher, int iter, unsigned *salt, int saltlen, unsigned *aiv, int prf_nid);
DH *DSA_dup_DH(DSA *r);
X509 *SSL_SESSION_get0_peer(SSL_SESSION *s);
void PKCS7_SIGNED_free(PKCS7_SIGNED *a);
RSA *PEM_read_bio_RSAPublicKey(BIO *bp, RSA *x, pem_password_cb *cb, void *u);
int pthread_setattr_default_np(pthread_attr_t *attr);
ASN1_INTEGER *ASN1_INTEGER_new();
stack_st_X509_INFO *PEM_X509_INFO_read(FILE *fp, stack_st_X509_INFO *sk, pem_password_cb *cb, void *u);
long ccoshl(long z);
wint_t towlower(wint_t wc);
float ccoshf(float z);
BIO_METHOD *BIO_f_asn1();
size_t strxfrm(char *dest, char *src, size_t n);
unsigned EVP_CIPHER_CTX_flags(EVP_CIPHER_CTX *ctx);
double nextafter(double x, double y);
wint_t fputwc(wchar_t wc, FILE *stream);
int i2d_DIRECTORYSTRING(ASN1_STRING *a, unsigned *out);
float ceilf(float x);
int ns_parserr(ns_msg *arg0, ns_sect arg1, int arg2, ns_rr *arg3);
utmpx *pututxline(utmpx *utmpx);
int pthread_mutexattr_setrobust_np(pthread_mutexattr_t *attr, int robustness);
void X509_STORE_CTX_set_chain(X509_STORE_CTX *c, stack_st_X509 *sk);
long ceill(long x);
int ASN1_STRING_TABLE_add(int arg0, long arg1, long arg2, unsigned arg3, unsigned arg4);
X509_CERT_PAIR *PEM_read_X509_CERT_PAIR(FILE *fp, X509_CERT_PAIR *x, pem_password_cb *cb, void *u);
lzma_index_hash *lzma_index_hash_init(lzma_index_hash *index_hash, lzma_allocator *allocator);
void BN_free(BIGNUM *a);
lzma_bool lzma_lzma_preset(lzma_options_lzma *options, uint32_t preset);
DIR *fdopendir(int fd);
int SSL_get_verify_depth(SSL *s);
td_err_e td_ta_get_ph(td_thragent_t *ta, ps_prochandle *ph);
int BIO_printf(BIO *bio, char *format, int vararg);
long CRYPTO_dbg_get_options();
EVP_PKEY *NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x);
char *BIO_get_callback_arg(BIO *b);
ssize_t readlink(char *path, char *buf, size_t len);
int gzrewind(gzFile file);
int BIO_gets(BIO *bp, char *buf, int size);
int ttyslot();
EC_METHOD *EC_GFp_nistp521_method();
int iswprint(wint_t wc);
void error_noreturn(int status, int errnum, char *format, int vararg);
int inflate(z_streamp strm, int flush);
int setnetgrent(char *netgroup);
int BN_mod_add(BIGNUM *r, BIGNUM *a, BIGNUM *b, BIGNUM *m, BN_CTX *ctx);
ssize_t pwritev64(int fd, iovec *iovec, int count, off64_t offset);
int EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx);
char *textdomain(char *domainname);
ASN1_OBJECT *X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr);
ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t, int offset_day, long offset_sec);
char *OBJ_nid2ln(int n);
int BUF_MEM_grow_clean(BUF_MEM *str, size_t len);
int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key);
RSA *d2i_RSAPrivateKey_fp(FILE *fp, RSA *rsa);
int lio_listio(int mode, aiocb *list, int nent, sigevent *sig);
void hdestroy();
wchar_t *wcpcpy(wchar_t *dest, wchar_t *src);
int CRYPTO_remove_all_info();
void EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags);
int epoll_ctl(int epfd, int op, int fd, epoll_event *event);
int cfsetispeed(termios *termios_p, speed_t speed);
void X509_STORE_CTX_free(X509_STORE_CTX *ctx);
int iswprint_l(wint_t wc, locale_t locale);
void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx, int verify_cb);
lzma_ret lzma_block_buffer_encode(lzma_block *block, lzma_allocator *allocator, uint8_t *in, size_t in_size, uint8_t *out, size_t *out_pos, size_t out_size);
long SSL_callback_ctrl(SSL *arg0, int arg1);
float dremf(float x, float y);
void SHA256_Transform(SHA256_CTX *c, unsigned *data);
int io_getevents(aio_context_t ctx_id, long min_nr, long nr, io_event *events, timespec *timeout);
int ASN1_TIME_diff(int *pday, int *psec, ASN1_TIME *from, ASN1_TIME *to);
BIO *BIO_new_connect(char *host_port);
int fflush(FILE *stream);
void argp_failure(argp_state *state, int status, int errnum, char *fmt, int vararg);
long wcstoq(wchar_t *nptr, wchar_t *endptr, int base);
X509_ATTRIBUTE *X509_ATTRIBUTE_create(int nid, int atrtype, void *value);
int s390_pci_mmio_write(unsigned mmio_addr, void *user_buffer, size_t length);
void ASN1_BMPSTRING_free(ASN1_BMPSTRING *a);
point_conversion_form_t EC_GROUP_get_point_conversion_form(EC_GROUP *arg0);
sighandler_t signal(int sig, sighandler_t handler);
lzma_ret lzma_stream_encoder(lzma_stream *strm, lzma_filter *filters, lzma_check check);
char *SSL_get_version(SSL *s);
int BIO_nwrite(BIO *bio, char *buf, int num);
int EC_POINT_set_compressed_coordinates_GF2m(EC_GROUP *group, EC_POINT *p, BIGNUM *x, int y_bit, BN_CTX *ctx);
PKCS7 *d2i_PKCS7_fp(FILE *fp, PKCS7 *p7);
int BN_GF2m_add(BIGNUM *r, BIGNUM *a, BIGNUM *b);
float sqrtf(float x);
int SSL_set_tlsext_use_srtp(SSL *ctx, char *profiles);
int cfsetospeed(termios *termios_p, speed_t speed);
int SSL_shutdown(SSL *s);
unsigned *SSL_SESSION_get_id(SSL_SESSION *s, unsigned *len);
ssize_t io_write_fn(void *cookie, char *buf, size_t n);
int sigisemptyset(sigset_t *set);
int pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
int SMIME_crlf_copy(BIO *in, BIO *out, int flags);
long exp10l(long x);
void CRYPTO_set_id_callback(unsigned func);
int re_search(re_pattern_buffer *buffer, char *string, int length, int start, int range, re_registers *regs);
int ASN1_TYPE_set1(ASN1_TYPE *a, int type, void *value);
int PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i);
float exp10f(float x);
int setreuid(uid_t ruid, uid_t euid);
int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *file_actions, int fd, int newfd);
void wordfree(wordexp_t *wordexp);
int toascii(int c);
ECDH_METHOD *ECDH_get_default_method();
td_err_e td_ta_clear_event(td_thragent_t *ta, td_thr_events_t *event);
FTSENT64 *fts64_children(FTS64 *arg0, int arg1);
int fxstatat64(int ver, int fildes, char *filename, stat64 *stat_buf, int flag);
int getrlimit(rlimit_resource_t resource, rlimit *rlimits);
PKCS7_SIGNER_INFO *PKCS7_SIGNER_INFO_new();
passwd *fgetpwent(FILE *stream);
int CRYPTO_pop_info();
void EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD *ameth, int item_verify, int item_sign);
void CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest, CRYPTO_THREADID *src);
void *ASN1_item_d2i_fp(ASN1_ITEM *it, FILE *in, void *x);
void OPENSSL_add_all_algorithms_conf();
unsigned wcstoull(wchar_t *nptr, wchar_t *endptr, int base);
lzma_ret lzma_index_buffer_encode(lzma_index *i, uint8_t *out, size_t *out_pos, size_t out_size);
wint_t fgetwc_unlocked(FILE *stream);
int ns_name_unpack(u_char *arg0, u_char *arg1, u_char *arg2, u_char *arg3, size_t arg4);
void ASN1_add_oid_module();
u_char *p_fqnname(u_char *cp, u_char *msg, int arg2, char *arg3, int arg4);
int BIO_dgram_non_fatal_error(int error);
ASN1_BIT_STRING *d2i_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned *in, long len);
X509_CRL *d2i_X509_CRL_bio(BIO *bp, X509_CRL *crl);
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
X509_PUBKEY *X509_PUBKEY_new();
int PKCS8_pkey_get0(ASN1_OBJECT *ppkalg, unsigned *pk, int *ppklen, X509_ALGOR *pa, PKCS8_PRIV_KEY_INFO *p8);
int X509_issuer_and_serial_cmp(X509 *a, X509 *b);
double cexp(double z);
void BN_BLINDING_set_flags(BN_BLINDING *arg0, unsigned arg1);
int ASN1_OCTET_STRING_cmp(ASN1_OCTET_STRING *a, ASN1_OCTET_STRING *b);
int i2d_DISPLAYTEXT(ASN1_STRING *a, unsigned *out);
int SHA_Init(SHA_CTX *c);
long remquol(long x, long y, int *quo);
int strncasecmp_l(char *s1, char *s2, size_t n, locale_t loc);
FILE *tmpfile();
uLong adler32_combine64(uLong arg0, uLong arg1, off64_t arg2);
PKCS7_RECIP_INFO *PKCS7_add_recipient(PKCS7 *p7, X509 *x509);
PKCS7_SIGNED *PKCS7_SIGNED_new();
float remquof(float x, float y, int *quo);
long mrand48();
int X509_EXTENSION_set_object(X509_EXTENSION *ex, ASN1_OBJECT *obj);
void *X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx, int atrtype, void *data);
int COMP_compress_block(COMP_CTX *ctx, unsigned *out, int olen, unsigned *in, int ilen);
void check_defer(int nid);
void SSL_set_tmp_ecdh_callback(SSL *ssl, EC_KEY *ecdh);
int X509_STORE_add_cert(X509_STORE *ctx, X509 *x);
int EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx, unsigned *out, size_t *outlen, unsigned *in, size_t inlen);
int i2d_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO *a, unsigned *out);
int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp, BIGNUM *Xp1, BIGNUM *Xp2, BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb);
int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509);
ASN1_STRING *ASN1_item_pack(void *obj, ASN1_ITEM *it, ASN1_OCTET_STRING *oct);
ASN1_UTF8STRING *d2i_ASN1_UTF8STRING(ASN1_UTF8STRING *a, unsigned *in, long len);
void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned flags);
double scalb(double x, double n);
double significand(double x);
int mknod(char *path, mode_t mode, dev_t dev);
void ns_put32(u_long arg0, u_char *arg1);
int SSL_use_certificate(SSL *ssl, X509 *x);
int i2d_X509_REQ_fp(FILE *fp, X509_REQ *req);
int i2d_X509_SIG(X509_SIG *a, unsigned *out);
int getprotobyname_r(char *name, protoent *result_buf, char *buf, size_t buflen, protoent *result);
int fremovexattr(int fd, char *name);
void ASN1_OBJECT_free(ASN1_OBJECT *a);
void ASN1_TYPE_free(ASN1_TYPE *a);
int RSA_private_decrypt(int flen, unsigned *from, unsigned *to, RSA *rsa, int padding);
int rmdir(char *path);
char *BUF_strndup(char *str, size_t siz);
int inotify_rm_watch(int fd, int wd);
FILE *fmemopen(void *s, size_t len, char *modes);
int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
nl_catd catopen(char *cat_name, int flag);
void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx, SSL_SESSION *get_session_cb);
int timer_create(clockid_t clock_id, sigevent *evp, timer_t *timerid);
long casinhl(long z);
void *sk_delete(STACK *st, int loc);
BIO_METHOD *BIO_s_socket();
int BN_lshift(BIGNUM *r, BIGNUM *a, int n);
utmp *pututline(utmp *utmp_ptr);
int res_nameinquery(char *arg0, int arg1, int arg2, u_char *arg3, u_char *arg4);
int RSA_public_decrypt(int flen, unsigned *from, unsigned *to, RSA *rsa, int padding);
int X509_CRL_get0_by_cert(X509_CRL *crl, X509_REVOKED *ret, X509 *x);
int getrlimit64(rlimit_resource_t resource, rlimit64 *rlimits);
char *SSLeay_version(int type);
int timer_gettime(timer_t timerid, itimerspec *value);
int setjmp(jmp_buf_tag *env);
int putchar_unlocked(int c);
int CRYPTO_set_mem_ex_functions(void *m, void *r, void f);
int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags, int ctype_nid, int econt_nid, stack_st_X509_ALGOR *mdalgs, ASN1_ITEM *it);
void setspent();
int EC_POINT_get_affine_coordinates_GF2m(EC_GROUP *group, EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx);
int munlockall();
uLong crc32_combine(uLong arg0, uLong arg1, off_t arg2);
error_t argz_insert(char *argz, size_t *argz_len, char *before, char *entry);
int EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx);
stack_st_SSL_CIPHER *SSL_get_ciphers(SSL *s);
int EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key, char *attrname, int type, unsigned *bytes, int len);
ASN1_PRINTABLESTRING *ASN1_PRINTABLESTRING_new();
int i2d_ECPrivateKey(EC_KEY *key, unsigned *out);
int BIO_new_bio_pair(BIO *bio1, size_t writebuf1, BIO *bio2, size_t writebuf2);
int strcmp(char *s1, char *s2);
int X509_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
td_err_e td_ta_event_getmsg(td_thragent_t *ta, td_event_msg_t *msg);
void EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD *pmeth, int copy);
double fmin(double x, double y);
int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);
void HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned flags);
int ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned *out, ASN1_ITEM *it);
X509_EXTENSION *X509_delete_ext(X509 *x, int loc);
double gamma(double arg0);
int inet6_option_next(cmsghdr *cmsg, uint8_t *tptrp);
int gzsetparams(gzFile file, int level, int strategy);
int BIO_write(BIO *b, void *data, int len);
void CRYPTO_cleanup_all_ex_data();
int compute_key(unsigned *key, BIGNUM *pub_key, DH *dh);
error_t envz_add(char *envz, size_t *envz_len, char *name, char *value);
int PEM_write_bio_ECPKParameters(BIO *bp, EC_GROUP *x);
EVP_PKEY_METHOD *EVP_PKEY_meth_find(int type);
BIO *BIO_new_accept(char *host_port);
void BN_set_negative(BIGNUM *b, int n);
double modf(double x, double *iptr);
void endgrent();
int X509v3_get_ext_by_critical(stack_st_X509_EXTENSION *x, int crit, int lastpos);
int PEM_write_X509_CRL(FILE *fp, X509_CRL *x);
long gethostid();
FILE *fopen(char *filename, char *modes);
BUF_MEM *BUF_MEM_new();
reg_syntax_t re_set_syntax(reg_syntax_t syntax);
int EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned *out, int *outl);
int SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char *pargv);
int SSL_CTX_set_srp_verify_param_callback(SSL_CTX *ctx, int cb);
X509_STORE_CTX *X509_STORE_CTX_new();
X509_STORE_CTX *X509_STORE_CTX_get0_parent_ctx(X509_STORE_CTX *ctx);
int BN_mod_mul(BIGNUM *r, BIGNUM *a, BIGNUM *b, BIGNUM *m, BN_CTX *ctx);
int wctob(wint_t c);
void sk_pop_free(STACK *st, void func);
int i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param);
int i2d_ASN1_BOOLEAN(int a, unsigned *pp);
EVP_PKEY *d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, pem_password_cb *cb, void *u);
int logout(char *ut_line);
int X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev);
void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl);
int getsockopt(int fd, int level, int optname, void *optval, socklen_t *optlen);
int io_submit(aio_context_t ctx_id, long nr, iocb *iocbpp);
int vprintf(char *format, gnuc_va_list arg);
int posix_spawnattr_getsigmask(posix_spawnattr_t *attr, sigset_t *sigmask);
void CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id, unsigned val);
int feclearexcept(int excepts);
double ctanh(double z);
int X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, int type, X509_NAME *name, ASN1_INTEGER *serial, X509_OBJECT *ret);
EVP_CIPHER *EVP_aes_192_gcm();
long lgammal(long arg0);
long ctanl(long z);
NETSCAPE_X509 *NETSCAPE_X509_new();
int BN_is_prime_ex(BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb);
unsigned strtoull(char *nptr, char *endptr, int base);
RSA *d2i_RSAPublicKey_fp(FILE *fp, RSA *rsa);
int atoi(char *nptr);
int link(char *from, char *to);
int vfprintf(FILE *s, char *format, gnuc_va_list arg);
int PEM_write_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO *x);
void PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO *a);
unsigned X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param);
int putgrent(group *p, FILE *f);
double atof(char *nptr);
int EC_POINT_set_Jprojective_coordinates_GFp(EC_GROUP *group, EC_POINT *p, BIGNUM *x, BIGNUM *y, BIGNUM *z, BN_CTX *ctx);
td_err_e td_thr_dbresume(td_thrhandle_t *th);
netent *getnetbyname(char *name);
void pqueue_print(pqueue pq);
double erand48(unsigned *xsubi);
int X509_NAME_entry_count(X509_NAME *name);
int BIO_dump_indent_fp(FILE *fp, char *s, int len, int indent);
double fdim(double x, double y);
void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags);
int getpwuid_r(uid_t uid, passwd *resultbuf, char *buffer, size_t buflen, passwd *result);
uintmax_t strtoumax(char *nptr, char *endptr, int base);
unsigned BN_BLINDING_get_thread_id(BN_BLINDING *arg0);
int query_module(char *name, int which, void *buf, size_t bufsize, size_t *ret);
int timerfd_settime(int ufd, int flags, itimerspec *utmr, itimerspec *otmr);
int setfsent();
int i2b_PrivateKey_bio(BIO *out, EVP_PKEY *pk);
int X509_set_pubkey(X509 *x, EVP_PKEY *pkey);
imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom);
int fseeko(FILE *stream, off_t off, int whence);
X509_CRL *PEM_read_bio_X509_CRL(BIO *bp, X509_CRL *x, pem_password_cb *cb, void *u);
int execvp(char *file, char *argv);
int i2d_re_X509_tbs(X509 *x, unsigned *pp);
void *tfind(void *key, void *rootp, compar_fn_t compar);
int BN_mul(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
int iswalnum_l(wint_t wc, locale_t locale);
int X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name);
int EC_GROUP_get_asn1_flag(EC_GROUP *group);
int i2d_PKCS7_NDEF(PKCS7 *a, unsigned *out);
int X509_get_ext_by_NID(X509 *x, int nid, int lastpos);
int ffsl(long l);
int HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx);
int inflateReset2(z_streamp strm, int windowBits);
size_t fread(void *ptr, size_t size, size_t n, FILE *stream);
wchar_t *wmemcpy(wchar_t *s1, wchar_t *s2, size_t n);
int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned *md, unsigned *s);
void HMAC_CTX_cleanup(HMAC_CTX *ctx);
int EVP_add_digest(EVP_MD *digest);
void ASN1_GENERALSTRING_free(ASN1_GENERALSTRING *a);
stack_st_OPENSSL_BLOCK *ASN1_seq_unpack(unsigned *buf, int len, d2i_of_void *d2i, void free_func);
ssize_t pread64(int fd, void *buf, size_t nbytes, off64_t offset);
void ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING *a);
int inflateResetKeep(z_streamp arg0);
int isdigit(int arg0);
int xmknod(int ver, char *path, mode_t mode, dev_t *dev);
int BN_GF2m_mod_solve_quad(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
DSA_SIG *DSA_do_sign(unsigned *dgst, int dlen, DSA *dsa);
int sk_set_cmp_func(STACK *sk, int c);
int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, EVP_MD_CTX *in);
int stat64(char *file, stat64 *buf);
int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, char *file, int type);
EVP_CIPHER_CTX *EVP_CIPHER_CTX_new();
int X509_NAME_add_entry_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int type, unsigned *bytes, int len, int loc, int set);
int SSL_set_session_secret_cb(SSL *s, tls_session_secret_cb_fn tls_session_secret_cb, void *arg);
int BN_GENCB_call(BN_GENCB *cb, int a, int b);
ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT *a, unsigned *pp, long length);
int dn_expand(u_char *arg0, u_char *arg1, u_char *arg2, char *arg3, int arg4);
char *crypt(char *key, char *salt);
sighandler_t sigset(int sig, sighandler_t disp);
double nan(char *tagb);
int inflateBackInit_(z_streamp strm, int windowBits, unsigned *window, char *version, int stream_size);
size_t mbsrtowcs(wchar_t *dst, char *src, size_t len, mbstate_t *ps);
int setenv(char *name, char *value, int replace);
void *dlvsym(void *handle, char *name, char *version);
int getnetent_r(netent *result_buf, char *buf, size_t buflen, netent *result, int *h_errnop);
int gzread(gzFile file, voidp buf, unsigned len);
void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX *s, int cb, void *arg);
unsigned la_x32_gnu_pltexit(Elf32_Sym *sym, unsigned ndx, uintptr_t *refcook, uintptr_t *defcook, La_x86_64_regs *inregs, La_x86_64_retval *outregs, char *symname);
long fmodl(long x, long y);
int posix_spawnattr_setflags(posix_spawnattr_t *attr, short flags);
long pathconf(char *path, int name);
int fchownat(int fd, char *file, uid_t owner, gid_t group, int flag);
EVP_CIPHER *EVP_camellia_256_ecb();
int BIO_nwrite0(BIO *bio, char *buf);
int SSL_use_certificate_ASN1(SSL *ssl, unsigned *d, int len);
int fseeko64(FILE *stream, off64_t off, int whence);
int SHA384_Final(unsigned *md, SHA512_CTX *c);
int pthread_cond_broadcast(pthread_cond_t *cond);
int X509_VERIFY_PARAM_get_count();
int closedir(DIR *dirp);
int RSA_verify_PKCS1_PSS(RSA *rsa, unsigned *mHash, EVP_MD *Hash, unsigned *EM, int sLen);
void SSL_set_cert_cb(SSL *s, int cb, void *arg);
void IO_cookie_init(IO_cookie_file *cfile, int read_write, void *cookie, IO_cookie_io_functions_t fns);
int socketcall(int call, unsigned *args);
float strtof_l(char *nptr, char *endptr, locale_t loc);
void IO_flockfile(IO_FILE *arg0);
td_err_e td_thr_tsd(td_thrhandle_t *th, thread_key_t tk, void *data);
int BN_GF2m_mod_sqrt_arr(BIGNUM *r, BIGNUM *a, int *p, BN_CTX *ctx);
int ruserok_af(char *rhost, int suser, char *remuser, char *locuser, sa_family_t af);
int RSA_padding_check_PKCS1_OAEP(unsigned *to, int tlen, unsigned *f, int fl, int rsa_len, unsigned *p, int pl);
int res_nquerydomain(res_state arg0, char *arg1, char *arg2, int arg3, int arg4, u_char *arg5, int arg6);
void BN_CTX_init(BN_CTX *c);
td_err_e td_thr_getfpregs(td_thrhandle_t *th, prfpregset_t *regset);
EVP_CIPHER *EVP_des_ede3_wrap();
void *EC_KEY_get_key_method_data(EC_KEY *key, void *dup_func, void free_func, void clear_free_func);
int CRYPTO_set_ex_data_implementation(CRYPTO_EX_DATA_IMPL *i);
size_t wcscspn(wchar_t *wcs, wchar_t *reject);
unsigned *HMAC(EVP_MD *evp_md, void *key, int key_len, unsigned *d, size_t n, unsigned *md, unsigned *md_len);
td_err_e td_ta_new(ps_prochandle *ps, td_thragent_t *ta);
int PEM_write_ECPrivateKey(FILE *fp, EC_KEY *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cb, void *u);
int sk_insert(STACK *sk, void *data, int where);
void CRYPTO_get_mem_debug_functions(void m, void r, void f, void so, long go);
int setvbuf(FILE *stream, char *buf, int modes, size_t n);
int EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, unsigned *sig, size_t siglen);
int fgetc_unlocked(FILE *stream);
int X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx, void *data);
void BN_clear_free(BIGNUM *a);
ssl_method_st *get_ssl_method(int version);
error_t argz_append(char *argz, size_t *argz_len, char *buf, size_t buf_len);
NETSCAPE_SPKI *NETSCAPE_SPKI_new();
int unlinkat(int fd, char *name, int flag);
int getaddrinfo(char *name, char *service, addrinfo *req, addrinfo *pai);
unsigned BN_BLINDING_get_flags(BN_BLINDING *arg0);
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_getprioceiling(pthread_mutex_t *mutex, int *prioceiling);
int SSL_CTX_set_srp_password(SSL_CTX *ctx, char *password);
int fclose(FILE *stream);
void getutmpx(utmp *utmp, utmpx *utmpx);
PKCS7_ENC_CONTENT *PKCS7_ENC_CONTENT_new();
int deflateSetDictionary(z_streamp strm, Bytef *dictionary, uInt dictLength);
int SSL_set_generate_session_id(SSL *arg0, GEN_SESSION_CB arg1);
void PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO *ri, X509_ALGOR *penc);
char *ASN1_tag2str(int tag);
EVP_MD *EVP_ripemd160();
Elf64_Addr la_x86_64_gnu_pltenter(Elf64_Sym *sym, unsigned ndx, uintptr_t *refcook, uintptr_t *defcook, La_x86_64_regs *regs, unsigned *flags, char *symname, long *framesizep);
wint_t towlower_l(wint_t wc, locale_t locale);
float ldexpf(float x, int exponent);
ASN1_TIME *X509_gmtime_adj(ASN1_TIME *s, long adj);
float log2f(float x);
int BN_is_prime(BIGNUM *p, int nchecks, void callback, BN_CTX *ctx, void *cb_arg);
sgrp *getsgnam(char *name);
uintptr_t la_symbind32(Elf32_Sym *sym, unsigned ndx, uintptr_t *refcook, uintptr_t *defcook, unsigned *flags, char *symname);
int get_kernel_syms(kernel_sym *table);
long log2l(long x);
double jn(int arg0, double arg1);
int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs, BIT_STRING_BITNAME *tbl, int indent);
void outb(unsigned value, unsigned port);
int BN_GF2m_mod_mul(BIGNUM *r, BIGNUM *a, BIGNUM *b, BIGNUM *p, BN_CTX *ctx);
int sigstack(sigstack *ss, sigstack *oss);
void CRYPTO_set_dynlock_destroy_callback(void dyn_destroy_function);
PKCS7 *PKCS7_new();
int PEM_write_X509_REQ_NEW(FILE *fp, X509_REQ *x);
int SSL_get_read_ahead(SSL *s);
void exit(int status);
void setutent();
RSA *d2i_RSA_PUBKEY(RSA *a, unsigned *pp, long length);
int memfd_create(char *name, unsigned flags);
ssize_t getline(char *lineptr, size_t *n, FILE *stream);
unsigned gnu_dev_major(unsigned dev);
char *getenv(char *name);
long random();
void ERR_load_ECDH_strings();
float scalbnf(float x, int n);
int aio_cancel(int fildes, aiocb *aiocbp);
int X509_set_version(X509 *x, long version);
int i2d_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING *a, unsigned *out);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
long scalbnl(long x, int n);
lzma_ret lzma_filters_copy(lzma_filter *src, lzma_filter *dest, lzma_allocator *allocator);
int aio_error64(aiocb64 *aiocbp);
EVP_CIPHER *EVP_aes_128_cfb8();
ssize_t mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio, timespec *abs_timeout);
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned *data, int len);
int X509_CRL_cmp(X509_CRL *a, X509_CRL *b);
int capget(cap_user_header_t hdrp, cap_user_data_t datap);
mode_t getumask();
pid_t gettid();
lzma_ret lzma_block_buffer_decode(lzma_block *block, lzma_allocator *allocator, uint8_t *in, size_t *in_pos, size_t in_size, uint8_t *out, size_t *out_pos, size_t out_size);
int CRYPTO_push_info_(char *info, char *file, int line);
void *ASN1_unpack_string(ASN1_STRING *oct, d2i_of_void *d2i);
int X509_print_ex(BIO *bp, X509 *x, unsigned nmflag, unsigned cflag);
void siglongjmp(sigjmp_buf env, int val);
void outl(unsigned value, unsigned port);
EVP_PKEY *b2i_PublicKey_bio(BIO *in);
EVP_PKEY *EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX *ctx);
X509 *SSL_get_peer_certificate(SSL *s);
int X509_REQ_set_version(X509_REQ *x, long version);
int fsetxattr(int fd, char *name, void *value, size_t size, int flags);
int PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri);
EVP_CIPHER *EVP_des_ede_cbc();
int sem_timedwait(sem_t *sem, timespec *abstime);
EVP_CIPHER *EVP_des_ede3_ecb();
int BN_is_bit_set(BIGNUM *a, int n);
void ECDSA_METHOD_set_verify(ECDSA_METHOD *ecdsa_method, int ecdsa_do_verify);
int gzgetc(gzFile file);
void BIO_vfree(BIO *a);
uint32_t lzma_check_size(lzma_check check);
int BN_usub(BIGNUM *r, BIGNUM *a, BIGNUM *b);
SSL_METHOD *SSL_CTX_get_ssl_method(SSL_CTX *ctx);
int snprintf(char *s, size_t maxlen, char *format, int vararg);
long log1pl(long x);
int EC_KEY_generate_key(EC_KEY *key);
int X509_cmp_time(ASN1_TIME *s, time_t *t);
void *memset(void *s, int c, size_t n);
wint_t putwc_unlocked(wchar_t wc, FILE *stream);
void error_at_line_noreturn(int status, int errnum, char *fname, unsigned line, char *format, int vararg);
BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx);
int getgrouplist(char *user, gid_t group, gid_t *groups, int *ngroups);
float wcstof(wchar_t *nptr, wchar_t *endptr);
char *strcasestr(char *haystack, char *needle);
void X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s);
int CRYPTO_set_mem_functions(void *m, void *r, void f);
int X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data);
int BN_clear_bit(BIGNUM *a, int n);
X509 *X509_find_by_subject(stack_st_X509 *sk, X509_NAME *name);
int perf_event_open(perf_event_attr *attr, pid_t pid, int cpu, int group_fd, unsigned flags);
void EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag);
char *mktemp(char *template);
void SSL_get0_alpn_selected(SSL *ssl, unsigned *data, unsigned *len);
int X509_signature_dump(BIO *bp, ASN1_STRING *sig, int indent);
int CRYPTO_mem_ctrl(int mode);
int DH_set_method(DH *dh, DH_METHOD *meth);
char *help_filter(int key, char *text, void *input);
void *X509_CRL_get_ext_d2i(X509_CRL *x, int nid, int *crit, int *idx);
int EC_GROUP_set_curve_GFp(EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
int EVP_CIPHER_CTX_block_size(EVP_CIPHER_CTX *ctx);
int grantpt(int fd);
int i2d_NETSCAPE_SPKI(NETSCAPE_SPKI *a, unsigned *out);
int SHA_Update(SHA_CTX *c, void *data, size_t len);
int ioperm(unsigned from, unsigned num, int turn_on);
void PEM_proc_type(char *buf, int type);
RSA *PEM_read_RSAPublicKey(FILE *fp, RSA *x, pem_password_cb *cb, void *u);
int munmap(void *addr, size_t len);
int PEM_write_DHxparams(FILE *fp, DH *x);
int settimeofday(timeval *tv, timezone *tz);
int getprotoent_r(protoent *result_buf, char *buf, size_t buflen, protoent *result);
FTSENT *fts_read(FTS *arg0);
void OBJ_NAME_cleanup(int type);
int tlsext_status_cb(SSL *ssl, void *arg);
float fabsf(float x);
int gzungetc(int c, gzFile file);
void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned flags);
int fgetsgent_r(FILE *stream, sgrp *result_buf, char *buffer, size_t buflen, sgrp *result);
void *X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx);
int BN_GF2m_mod_exp_arr(BIGNUM *r, BIGNUM *a, BIGNUM *b, int *p, BN_CTX *ctx);
int endttyent();
char *strtok_r(char *s, char *delim, char *save_ptr);
spwd *getspent();
ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t, int offset_day, long offset_sec);
DSA_SIG *dsa_do_sign(unsigned *dgst, int dlen, DSA *dsa);
long ssl_get_message(SSL *s, int st1, int stn, int mt, long max, int *ok);
uint64_t lzma_memusage(lzma_stream *strm);
int fanotify_init(unsigned flags, unsigned event_f_flags);
int mbsinit(mbstate_t *ps);
float acoshf(float x);
int i2d_RSA_NET(RSA *a, unsigned *pp, int cb, int sgckey);
int X509_get_signature_nid(X509 *x);
EVP_CIPHER *EVP_aes_128_cbc_hmac_sha1();
int msgsnd(int msqid, void *msgp, size_t msgsz, int msgflg);
wchar_t *fgetws_unlocked(wchar_t *ws, int n, FILE *stream);
char *SSL_alert_desc_string_long(int value);
int BIO_snprintf(char *buf, size_t n, char *format, int vararg);
EVP_CIPHER *EVP_aes_256_ctr();
int i2d_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE *a, unsigned *out);
void ASN1_NULL_free(ASN1_NULL *a);
group *getgrnam(char *name);
int RSA_up_ref(RSA *r);
int BIO_get_retry_reason(BIO *bio);
double casinh(double z);
int dirfd(DIR *dirp);
int posix_spawnattr_setschedpolicy(posix_spawnattr_t *attr, int schedpolicy);
int ECDH_set_method(EC_KEY *arg0, ECDH_METHOD *arg1);
int SSL_CTX_load_verify_locations(SSL_CTX *ctx, char *CAfile, char *CApath);
int iswalpha_l(wint_t wc, locale_t locale);
SSL_METHOD *SSLv3_client_method();
void outsw(unsigned port, void *addr, unsigned count);
int getspnam_r(char *name, spwd *result_buf, char *buffer, size_t buflen, spwd *result);
int BN_pseudo_rand_range(BIGNUM *rnd, BIGNUM *range);
int SSL_renegotiate(SSL *s);
int ssl_accept(SSL *s);
EVP_CIPHER *EVP_aes_128_xts();
ssize_t flistxattr(int fd, char *list, size_t size);
int i2d_ASN1_NULL(ASN1_NULL *a, unsigned *out);
ASN1_STRING *ASN1_STRING_type_new(int type);
void EC_KEY_set_enc_flags(EC_KEY *eckey, unsigned flags);
RSA *PEM_read_bio_RSAPrivateKey(BIO *bp, RSA *x, pem_password_cb *cb, void *u);
int mkostemps(char *template, int suffixlen, int flags);
long csinhl(long z);
int X509_REQ_get_attr_count(X509_REQ *req);
int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si, stack_st_X509_ATTRIBUTE *sk);
PKCS7_ISSUER_AND_SERIAL *PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx);
void X509_trust_clear(X509 *x);
ASN1_STRING *ASN1_PRINTABLE_new();
void PKCS7_free(PKCS7 *a);
void Exit(int status);
int sched_rr_get_interval(pid_t pid, timespec *t);
void tlsext_debug_cb(SSL *s, int client_server, int type, unsigned *data, int len, void *arg);
void EC_POINT_clear_free(EC_POINT *point);
int DSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
ssize_t writev(int fd, iovec *iovec, int count);
long callback_ctrl(BIO *arg0, int arg1, bio_info_cb *arg2);
int GEN_SESSION_CB(SSL *ssl, unsigned *id, unsigned *id_len);
int symlink(char *from, char *to);
int RSA_X931_hash_id(int nid);
ENTRY *hsearch(ENTRY item, ACTION action);
void EVP_add_alg_module();
int X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit, unsigned flags);
float fdimf(float x, float y);
X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir();
int SSL_CTX_set_purpose(SSL_CTX *s, int purpose);
int i2d_ASN1_TYPE(ASN1_TYPE *a, unsigned *out);
long fdiml(long x, long y);
sgrp *fgetsgent(FILE *stream);
u_int32_t ns_datetosecs(char *arg0, int *arg1);
ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t);
int fchmod(int fd, mode_t mode);
int SSL_CTX_set_session_id_context(SSL_CTX *ctx, unsigned *sid_ctx, unsigned sid_ctx_len);
int wprintf(wchar_t *format, int vararg);
unsigned CRYPTO_thread_id();
PKCS8_PRIV_KEY_INFO *EVP_PKEY2PKCS8_broken(EVP_PKEY *pkey, int broken);
int mprotect(void *addr, size_t len, int prot);
int X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned nmflag, unsigned cflag);
utmp *getutid(utmp *id);
void *shmat(int shmid, void *shmaddr, int shmflg);
int islower_l(int arg0, locale_t arg1);
int ASN1_UTCTIME_cmp_time_t(ASN1_UTCTIME *s, time_t t);
int PKCS7_print_ctx(BIO *out, PKCS7 *x, int indent, ASN1_PCTX *pctx);
void BN_init(BIGNUM *arg0);
float nexttowardf(float x, long y);
int BN_add(BIGNUM *r, BIGNUM *a, BIGNUM *b);
int BN_GF2m_poly2arr(BIGNUM *a, int *p, int max);
int PEM_write_bio(BIO *bp, char *name, char *hdr, unsigned *data, long len);
long nexttowardl(long x, long y);
void *sk_delete_ptr(STACK *st, void *p);
double cimag(double z);
long llrintl(long x);
int BN_exp(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, stack_st_X509 *certs, BIO *data, int flags);
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf);
int fsetlocking(FILE *fp, int type);
void herror(char *str);
long llrintf(float x);
float casinhf(float z);
int PEM_write_SSL_SESSION(FILE *fp, SSL_SESSION *x);
int erand48_r(unsigned *xsubi, drand48_data *buffer, double *result);
BIO_METHOD *BIO_f_md();
int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x);
int ASN1_const_check_infinite_end(unsigned *p, long len);
size_t strftime_l(char *s, size_t maxsize, char *format, tm *tp, locale_t loc);
int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa);
int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, char *file);
int iswlower(wint_t wc);
RSA_OAEP_PARAMS *RSA_OAEP_PARAMS_new();
int i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
EVP_CIPHER *EVP_bf_cfb64();
int X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm);
X509_TRUST *X509_TRUST_get0(int idx);
int personality(unsigned persona);
int i2d_ASN1_SEQUENCE_ANY(ASN1_SEQUENCE_ANY *a, unsigned *out);
SSL_METHOD *SSLv23_client_method();
ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER *a, unsigned *pp, long length);
int EVP_PBE_alg_add(int nid, EVP_CIPHER *cipher, EVP_MD *md, EVP_PBE_KEYGEN *keygen);
int EVP_PKEY_sign(EVP_PKEY_CTX *ctx, unsigned *sig, size_t *siglen, unsigned *tbs, size_t tbslen);
void X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param);
void CRYPTO_mem_leaks(bio_st *bio);
ASN1_OCTET_STRING *ASN1_OCTET_STRING_dup(ASN1_OCTET_STRING *a);
float csinhf(float z);
int io_seek_fn(void *cookie, off64_t *pos, int w);
X509_LOOKUP *X509_LOOKUP_new(X509_LOOKUP_METHOD *method);
int ASN1_item_digest(ASN1_ITEM *it, EVP_MD *type, void *data, unsigned *md, unsigned *len);
void *pthread_getspecific(pthread_key_t key);
lzma_ret lzma_properties_encode(lzma_filter *filter, uint8_t *props);
int fprintf(FILE *stream, char *format, int vararg);
int EC_GROUP_get_basis_type(EC_GROUP *arg0);
double tan(double x);
void EC_KEY_set_conv_form(EC_KEY *eckey, point_conversion_form_t cform);
unsigned *SHA512(unsigned *d, size_t n, unsigned *md);
wint_t towupper(wint_t wc);
int PEM_write_bio_EC_PUBKEY(BIO *bp, EC_KEY *x);
long cexpl(long z);
unsigned X509_NAME_hash(X509_NAME *x);
SSL_METHOD *DTLSv1_method();
void ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING *a);
void lcong48(unsigned *param);
int pem_password_cb(char *buf, int size, int rwflag, void *userdata);
long ssl_ctx_callback_ctrl(SSL_CTX *s, int cb_id, void fp);
X509_REQ *PEM_read_bio_X509_REQ(BIO *bp, X509_REQ *x, pem_password_cb *cb, void *u);
int EVP_EncryptInit(EVP_CIPHER_CTX *ctx, EVP_CIPHER *cipher, unsigned *key, unsigned *iv);
X509_NAME *X509_NAME_dup(X509_NAME *xn);
char *strcpy(char *dest, char *src);
ssize_t strfmon(char *s, size_t maxsize, char *format, int vararg);
float clogf(float z);
wchar_t *wmemchr(wchar_t *s, wchar_t c, size_t n);
int on_exit(void func, void *arg);
int ftw64(char *dir, ftw64_func_t func, int descriptors);
int timespec_get(timespec *ts, int base);
long clogl(long z);
void EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD *pmeth, int verifyctx_init, int verifyctx);
void ASN1_STRING_free(ASN1_STRING *a);
int iswpunct(wint_t wc);
int DH_compute_key(unsigned *key, BIGNUM *pub_key, DH *dh);
double fma(double x, double y, double z);
void insb(unsigned port, void *addr, unsigned count);
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, timeval *timeout);
int X509_NAME_cmp(X509_NAME *a, X509_NAME *b);
int vasprintf(char *ptr, char *f, gnuc_va_list arg);
int utmpname(char *file);
int getpmsg(int fildes, strbuf *ctlptr, strbuf *dataptr, int *bandp, int *flagsp);
int OPENSSL_issetugid();
int RSA_padding_add_PKCS1_type_1(unsigned *to, int tlen, unsigned *f, int fl);
void CRYPTO_dbg_set_options(long bits);
PKCS8_PRIV_KEY_INFO *EVP_PKEY2PKCS8(EVP_PKEY *pkey);
int EVP_add_cipher(EVP_CIPHER *cipher);
void PKCS7_DIGEST_free(PKCS7_DIGEST *a);
float gammaf(float arg0);
int random_r(random_data *buf, int32_t *result);
double cproj(double z);
int iconv_close(iconv_t cd);
void insw(unsigned port, void *addr, unsigned count);
void clearerr(FILE *stream);
void EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD *pmeth, int verify_init, int verify);
int X509_STORE_set_default_paths(X509_STORE *ctx);
int execv(char *path, char *argv);
void *alloc(void *opaque, size_t nmemb, size_t size);
ssize_t pwrite(int fd, void *buf, size_t n, off_t offset);
DSA *d2i_DSAPrivateKey(DSA *a, unsigned *pp, long length);
void X509_CRL_set_default_method(X509_CRL_METHOD *meth);
int bind(int fd, CONST_SOCKADDR_ARG addr, socklen_t len);
BIO_METHOD *BIO_f_buffer();
void *PEM_ASN1_read_bio(d2i_of_void *d2i, char *name, BIO *bp, void *x, pem_password_cb *cb, void *u);
char *xpg_basename(char *path);
int X509_REQ_add_extensions(X509_REQ *req, stack_st_X509_EXTENSION *exts);
unsigned X509_subject_name_hash(X509 *x);
int ASN1_STRING_print(BIO *bp, ASN1_STRING *v);
void *lfind(void *key, void *base, size_t *nmemb, size_t size, compar_fn_t compar);
wctype_t wctype_l(char *property, locale_t locale);
int srand48_r(long seedval, drand48_data *buffer);
void ERR_load_EVP_strings();
int ECDSA_sign(int type, unsigned *dgst, int dgstlen, unsigned *sig, unsigned *siglen, EC_KEY *eckey);
int pthread_mutexattr_setrobust(pthread_mutexattr_t *attr, int robustness);
void pthread_unregister_cancel(pthread_unwind_buf_t *buf);
void setgrent();
int getutent_r(utmp *buffer, utmp *result);
ASN1_STRING *ASN1_STRING_dup(ASN1_STRING *a);
int syncfs(int fd);
int dn_count_labels(char *arg0);
int getdomainname(char *name, size_t len);
EC_KEY *EC_KEY_copy(EC_KEY *dst, EC_KEY *src);
int isatty(int fd);
int revoke(char *file);
int X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm);
COMP_METHOD *COMP_rle();
int execle(char *path, char *arg, int vararg);
int evp_verify_method(int type, unsigned *m, unsigned m_length, unsigned *sigbuf, unsigned siglen, void *key);
int X509at_get_attr_count(stack_st_X509_ATTRIBUTE *x);
int X509_check_private_key(X509 *x509, EVP_PKEY *pkey);
void outw_p(unsigned value, unsigned port);
float jnf(int arg0, float arg1);
char *BIO_ptr_ctrl(BIO *bp, int cmd, long larg);
int gtty(int fd, sgttyb *params);
int execlp(char *file, char *arg, int vararg);
int regcomp(regex_t *preg, char *pattern, int cflags);
PBE2PARAM *PBE2PARAM_new();
int eventfd_read(int fd, eventfd_t *value);
int RSA_padding_check_PKCS1_OAEP_mgf1(unsigned *to, int tlen, unsigned *from, int flen, int num, unsigned *param, int plen, EVP_MD *md, EVP_MD *mgf1md);
int BN_mod_lshift1_quick(BIGNUM *r, BIGNUM *a, BIGNUM *m);
uint32_t lzma_vli_size(lzma_vli vli);
long wcstol_l(wchar_t *nptr, wchar_t *endptr, int base, locale_t loc);
int lookup_dcookie(u64 cookie, char *buffer, size_t len);
X509_CERT_PAIR *PEM_read_bio_X509_CERT_PAIR(BIO *bp, X509_CERT_PAIR *x, pem_password_cb *cb, void *u);
int ssl_read_bytes(SSL *s, int type, unsigned *buf, int len, int peek);
int execveat(int dirfd, char *pathname, char *argv, char *envp, int flags);
int check_trust(x509_trust_st *arg0, X509 *arg1, int arg2);
void *inet6_rth_init(void *bp, socklen_t bp_len, int type, int segments);
int printf_size_info(printf_info *info, size_t n, int *argtypes);
int ssl_write(SSL *s, void *buf, int len);
void PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO *a);
int pivot_root(char *new_root, char *put_old);
char *getlogin();
int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);
void SSL_SESSION_free(SSL_SESSION *ses);
void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset);
void *valloc(size_t size);
EC_GROUP *d2i_ECPKParameters(EC_GROUP *arg0, unsigned *in, long len);
iconv_t iconv_open(char *tocode, char *fromcode);
void ERR_load_EC_strings();
int PEM_write_X509_REQ(FILE *fp, X509_REQ *x);
int fxstatat(int ver, int fildes, char *filename, stat *stat_buf, int flag);
int LHASH_COMP_FN_TYPE(void *arg0, void *arg1);
int BN_nist_mod_192(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);
int i2d_DHxparams(DH *a, unsigned *pp);
passwd *getpwnam(char *name);
char *CRYPTO_get_lock_name(int type);
EC_GROUP *EC_GROUP_new_curve_GF2m(BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
int membarrier(int cmd, int flags);
void backtrace_symbols_fd(void *array, int size, int fd);
int ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent, ASN1_ITEM *it, ASN1_PCTX *pctx);
int getsgent_r(sgrp *result_buf, char *buffer, size_t buflen, sgrp *result);
int iswupper(wint_t wc);
int wcscasecmp(wchar_t *s1, wchar_t *s2);
PKCS8_PRIV_KEY_INFO *PEM_read_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO *x, pem_password_cb *cb, void *u);
int rsa_pub_enc(int flen, unsigned *from, unsigned *to, RSA *rsa, int padding);
SSL_METHOD *DTLSv1_client_method();
int isprint(int arg0);
STACK *sk_dup(STACK *st);
double sin(double x);
int X509at_get_attr_by_OBJ(stack_st_X509_ATTRIBUTE *sk, ASN1_OBJECT *obj, int lastpos);
void ERR_load_CRYPTO_strings();
ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(ASN1_TIME *t, ASN1_GENERALIZEDTIME *out);
int DSA_set_ex_data(DSA *d, int idx, void *arg);
long SSL_CTX_get_timeout(SSL_CTX *ctx);
int glob64(char *pattern, int flags, int errfunc, glob64_t *pglob);
char *SSL_COMP_get_name(COMP_METHOD *comp);
td_err_e td_thr_validate(td_thrhandle_t *th);
EC_KEY *o2i_ECPublicKey(EC_KEY *key, unsigned *in, long len);
long lrint(double x);
int X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc);
EVP_CIPHER *EVP_rc4_hmac_md5();
void SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx, int cb, void *arg);
int BIO_vprintf(BIO *bio, char *format, va_list args);
double clog10(double z);
RSA *d2i_RSA_PUBKEY_fp(FILE *fp, RSA *rsa);
int mkfifo(char *path, mode_t mode);
int i2d_DSA_PUBKEY(DSA *a, unsigned *pp);
int X509_pubkey_digest(X509 *data, EVP_MD *type, unsigned *md, unsigned *len);
ASN1_PCTX *ASN1_PCTX_new();
int EVP_MD_pkey_type(EVP_MD *md);
void ERR_load_BN_strings();
int pthread_getconcurrency();
void cb_1(int arg0, int arg1, void *arg2);
int PEM_write_bio_RSAPublicKey(BIO *bp, RSA *x);
wint_t fgetwc(FILE *stream);
int clone2(int fn, void *child_stack_base, size_t stack_size, int flags, void *arg, int vararg);
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type, unsigned *bytes, int len);
ASN1_INTEGER *ASN1_INTEGER_dup(ASN1_INTEGER *x);
SSL_METHOD *SSLv23_server_method();
int killpg(pid_t pgrp, int sig);
int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, EVP_CIPHER *cipher, ENGINE *impl, unsigned *key, unsigned *iv);
int shmget(key_t key, size_t size, int shmflg);
double atan(double x);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
EC_GROUP *EC_KEY_get0_group(EC_KEY *key);
int PEM_write_PKCS7(FILE *fp, PKCS7 *x);
int reboot(int howto);
int sym_ston(res_sym *arg0, char *arg1, int *arg2);
int BIO_test_flags(BIO *b, int flags);
int pthread_key_delete(pthread_key_t key);
int PEM_write_DHparams(FILE *fp, DH *x);
long atan2l(long y, long x);
int RSA_padding_add_PKCS1_type_2(unsigned *to, int tlen, unsigned *f, int fl);
SSL_SESSION *SSL_get_session(SSL *ssl);
float asinhf(float x);
float atan2f(float y, float x);
int clone(int fn, void *child_stack, int flags, void *arg, int vararg);
int CRYPTO_memcmp(void *a, void *b, size_t len);
X509_VERIFY_PARAM *SSL_get0_param(SSL *ssl);
EC_GROUP *PEM_read_bio_ECPKParameters(BIO *bp, EC_GROUP *x, pem_password_cb *cb, void *u);
void ERR_load_SSL_strings();
int X509_NAME_digest(X509_NAME *data, EVP_MD *type, unsigned *md, unsigned *len);
lzma_vli lzma_index_total_size(lzma_index *i);
void after_morecore_hook();
int b64_ntop(u_char *arg0, size_t arg1, char *arg2, size_t arg3);
char *X509_get_default_cert_file_env();
void ASN1_T61STRING_free(ASN1_T61STRING *a);
int SSL_CTX_get_quiet_shutdown(SSL_CTX *ctx);
int PEM_write_EC_PUBKEY(FILE *fp, EC_KEY *x);
void CRYPTO_mem_leaks_fp(FILE *arg0);
lzma_bool lzma_index_iter_locate(lzma_index_iter *iter, lzma_vli target);
int sigignore(int sig);
int malloc_info(int options, FILE *fp);
EVP_MD *EVP_sha512();
int compress2(Bytef *dest, uLongf *destLen, Bytef *source, uLong sourceLen, int level);
EVP_CIPHER *EVP_camellia_128_cbc();
void X509_NAME_free(X509_NAME *a);
int xmknodat(int ver, int fd, char *path, mode_t mode, dev_t *dev);
int OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid);
int sched_getscheduler(pid_t pid);
int i2d_X509_PKEY(X509_PKEY *a, unsigned *pp);
int SHA384_Init(SHA512_CTX *c);
void login(utmp *entry);
int sigprocmask(int how, sigset_t *set, sigset_t *oset);
void SSL_CTX_set_client_cert_cb(SSL_CTX *ctx, int client_cert_cb);
int EVP_MD_type(EVP_MD *md);
unsigned *OPENSSL_ia32cap_loc();
netent *getnetent();
int pthread_key_create(pthread_key_t *key, void destr_function);
off64_t gztell64(gzFile arg0);
EVP_CIPHER *EVP_seed_cfb128();
int feenableexcept(int excepts);
char *SSL_state_string(SSL *s);
stack_st_SSL_COMP *SSL_COMP_get_compression_methods();
void BIO_set_callback_arg(BIO *b, char *arg);
int pthread_rwlock_timedwrlock(pthread_rwlock_t *rwlock, timespec *abstime);
int ulckpwdf();
int pthread_spin_unlock(pthread_spinlock_t *lock);
int OBJ_new_nid(int num);
int pthread_condattr_getpshared(pthread_condattr_t *attr, int *pshared);
int sem_post(sem_t *sem);
void bcopy(void *src, void *dest, size_t n);
long strtoq(char *nptr, char *endptr, int base);
lzma_ret lzma_raw_buffer_encode(lzma_filter *filters, lzma_allocator *allocator, uint8_t *in, size_t in_size, uint8_t *out, size_t *out_pos, size_t out_size);
key_serial_t request_key(char *type, char *description, char *callout_info, key_serial_t keyring);
int X509_REQ_extension_nid(int nid);
int EVP_MD_CTX_copy(EVP_MD_CTX *out, EVP_MD_CTX *in);
void mtrace();
EVP_PKEY_CTX *EVP_PKEY_CTX_new(EVP_PKEY *pkey, ENGINE *e);
int BN_GF2m_mod_inv(BIGNUM *r, BIGNUM *b, BIGNUM *p, BN_CTX *ctx);
PKCS8_PRIV_KEY_INFO *PKCS8_set_broken(PKCS8_PRIV_KEY_INFO *p8, int broken);
td_err_e td_ta_map_id2thr(td_thragent_t *ta, pthread_t pt, td_thrhandle_t *th);
void PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE *a);
int EC_GROUP_get_curve_name(EC_GROUP *group);
float copysignf(float x, float y);
void lzma_index_iter_rewind(lzma_index_iter *iter);
void exit_group(int status);
void envz_strip(char *envz, size_t *envz_len);
long copysignl(long x, long y);
int scanf(char *format, int vararg);
int PEM_SignFinal(EVP_MD_CTX *ctx, unsigned *sigret, unsigned *siglen, EVP_PKEY *pkey);
int mkdir(char *path, mode_t mode);
int system(char *command);
int getcontext(ucontext_t *ucp);
void RSA_blinding_off(RSA *rsa);
long ssetmask(long newmask);
int BN_lshift1(BIGNUM *r, BIGNUM *a);
uint16_t ntohs(uint16_t netshort);
int ASN1_digest(i2d_of_void *i2d, EVP_MD *type, char *data, unsigned *md, unsigned *len);
int SSL_add_client_CA(SSL *ssl, X509 *x);
int backtrace(void *array, int size);
int i2d_X509_REQ_bio(BIO *bp, X509_REQ *req);
void ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME *a);
size_t EC_GROUP_set_seed(EC_GROUP *arg0, unsigned *arg1, size_t len);
int SSL_CTX_get_verify_callback(SSL_CTX *ctx);
int final(EVP_MD_CTX *ctx, unsigned *md);
int mkstemp64(char *template);
void SSL_set_connect_state(SSL *s);
int BN_mul_word(BIGNUM *a, unsigned w);
int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509, stack_st_X509 *chain);
long move_pages(int pid, unsigned count, void *pages, int *nodes, int *status, int flags);
int CRYPTO_is_mem_check_on();
char *secure_getenv(char *name);
float catanf(float z);
X509_REQ *d2i_X509_REQ(X509_REQ *a, unsigned *in, long len);
float pow10f(float x);
void CRYPTO_free(void *ptr);
X509 *d2i_X509(X509 *a, unsigned *in, long len);
DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA *dsa);
int SSL_use_psk_identity_hint(SSL *s, char *identity_hint);
int BN_GF2m_mod_exp(BIGNUM *r, BIGNUM *a, BIGNUM *b, BIGNUM *p, BN_CTX *ctx);
int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx);
lzma_ret lzma_index_stream_padding(lzma_index *i, lzma_vli stream_padding);
int X509_CRL_set_version(X509_CRL *x, long version);
error_t argz_add(char *argz, size_t *argz_len, char *str);
X509_EXTENSION *X509_REVOKED_get_ext(X509_REVOKED *x, int loc);
stack_st_SRTP_PROTECTION_PROFILE *SSL_get_srtp_profiles(SSL *ssl);
int CRYPTO_add_lock(int *pointer, int amount, int type, char *file, int line);
int pthread_getschedparam(pthread_t target_thread, int *policy, sched_param *param);
int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, timespec *abstime);
int rresvport_af(int *alport, sa_family_t af);
int getgrgid_r(gid_t gid, group *resultbuf, char *buffer, size_t buflen, group *result);
int getpriority(priority_which_t which, id_t who);
int X509_CRL_get0_by_serial(X509_CRL *crl, X509_REVOKED *ret, ASN1_INTEGER *serial);
void BN_BLINDING_free(BN_BLINDING *b);
int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust);
void sa_restorer();
double log10(double x);
X509_NAME_ENTRY *X509_NAME_get_entry(X509_NAME *name, int loc);
X509_CRL *PEM_read_X509_CRL(FILE *fp, X509_CRL *x, pem_password_cb *cb, void *u);
void setbuffer(FILE *stream, char *buf, size_t size);
BIGNUM *bn_expand2(BIGNUM *a, int words);
stack_st_X509 *X509_chain_up_ref(stack_st_X509 *chain);
void SSL_set_client_CA_list(SSL *s, stack_st_X509_NAME *name_list);
void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
int isxdigit(int arg0);
int ssl_new(SSL *s);
X509_VERIFY_PARAM *SSL_CTX_get0_param(SSL_CTX *ctx);
PKCS7_SIGNED *d2i_PKCS7_SIGNED(PKCS7_SIGNED *a, unsigned *in, long len);
int out_func(void *arg0, unsigned *arg1, unsigned arg2);
int i2d_X509_CERT_PAIR(X509_CERT_PAIR *a, unsigned *out);
unsigned wcstoul(wchar_t *nptr, wchar_t *endptr, int base);
td_err_e td_thr_tlsbase(td_thrhandle_t *th, unsigned modid, psaddr_t *base);
int wcswidth(wchar_t *s, size_t n);
int gzclose_w(gzFile file);
int pthread_rwlockattr_getkind_np(pthread_rwlockattr_t *attr, int *pref);
int close(int fd);
char *bindtextdomain(char *domainname, char *dirname);
X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc);
speed_t cfgetispeed(termios *termios_p);
X509 *d2i_X509_bio(BIO *bp, X509 *x509);
utmpx *getutxline(utmpx *line);
size_t BUF_strlcat(char *dst, char *src, size_t siz);
SSL_METHOD *SSLv23_method();
int i2d_DSA_SIG(DSA_SIG *a, unsigned *pp);
lzma_ret lzma_block_decoder(lzma_stream *strm, lzma_block *block);
int BN_GF2m_arr2poly(int *p, BIGNUM *a);
void BN_CTX_end(BN_CTX *ctx);
int fseek(FILE *stream, long off, int whence);
int obstack_printf(obstack *obstack, char *format, int vararg);
int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM *param, char *email, size_t emaillen);
int RSA_private_encrypt(int flen, unsigned *from, unsigned *to, RSA *rsa, int padding);
int get_nprocs_conf();
BIO *SSL_get_rbio(SSL *s);
int SSL_CTX_set_srp_cb_arg(SSL_CTX *ctx, void *arg);
long frexpl(long x, int *exponent);
int EVP_PKEY_set1_DH(EVP_PKEY *pkey, dh_st *key);
void SHA512_Transform(SHA512_CTX *c, unsigned *data);
td_err_e td_log();
X509 *PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si);
void endsgent();
int SHA256_Update(SHA256_CTX *c, void *data, size_t len);
int X509_issuer_name_cmp(X509 *a, X509 *b);
int ASN1_TIME_set_string(ASN1_TIME *s, char *str);
int posix_spawnattr_getflags(posix_spawnattr_t *attr, short *flags);
X509_NAME *X509_get_issuer_name(X509 *a);
SSL_SESSION *get_session_cb(ssl_st *ssl, unsigned *data, int len, int *copy);
stack_st_OPENSSL_BLOCK *d2i_ASN1_SET(stack_st_OPENSSL_BLOCK *a, unsigned *pp, long length, d2i_of_void *d2i, void free_func, int ex_tag, int ex_class);
int BN_reciprocal(BIGNUM *r, BIGNUM *m, int len, BN_CTX *ctx);
int sigsetjmp(jmp_buf_tag *env, int savemask);
int PEM_SealInit(PEM_ENCODE_SEAL_CTX *ctx, EVP_CIPHER *type, EVP_MD *md_type, unsigned *ek, int *ekl, unsigned *iv, EVP_PKEY *pubk, int npubk);
void argp_error(argp_state *state, char *fmt, int vararg);
int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, char *pre);
void *DSA_get_ex_data(DSA *d, int idx);
PKCS7_SIGN_ENVELOPE *PKCS7_SIGN_ENVELOPE_new();
int nftw64_func_t(char *filename, stat64 *status, int flag, FTW *info);
ssize_t strfmon_l(char *s, size_t maxsize, locale_t loc, char *format, int vararg);
int pthread_barrier_wait(pthread_barrier_t *barrier);
int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to, X509_VERIFY_PARAM *from);
double cbrt(double x);
RSA_PSS_PARAMS *d2i_RSA_PSS_PARAMS(RSA_PSS_PARAMS *a, unsigned *in, long len);
int i2d_X509_REQ(X509_REQ *a, unsigned *out);
int RSA_padding_check_SSLv23(unsigned *to, int tlen, unsigned *f, int fl, int rsa_len);
int i2d_ASN1_T61STRING(ASN1_T61STRING *a, unsigned *out);
int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf);
int asn1_const_Finish(ASN1_const_CTX *c);
int versionsort64(dirent64 *e1, dirent64 *e2);
int i2d_ECPKParameters(EC_GROUP *arg0, unsigned *out);
int EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, ec_key_st *key);
int futex(int *uaddr, int futex_op, int val, timespec *timeout, int *uaddr2, int val3);
int pipe(int *pipedes);
void EC_KEY_clear_flags(EC_KEY *key, int flags);
int SSL_check_private_key(SSL *ctx);
wchar_t *wcsstr(wchar_t *haystack, wchar_t *needle);
int fegetexceptflag(fexcept_t *flagp, int excepts);
void NETSCAPE_X509_free(NETSCAPE_X509 *a);
mallinfo mallinfo();
int X509_REQ_print_fp(FILE *bp, X509_REQ *req);
int SRP_verify_param_callback(SSL *arg0, void *arg1);
long pow10l(long x);
int loc_aton(char *ascii, u_char *binary);
ASN1_UTF8STRING *ASN1_UTF8STRING_new();
void malloc_check_init();
EVP_PKEY *EVP_PKEY_new();
int SSL_CTX_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
lzma_vli lzma_block_unpadded_size(lzma_block *block);
int sem_wait(sem_t *sem);
long keyctl(int cmd, int vararg);
int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned *key);
int PEM_ASN1_write(i2d_of_void *i2d, char *name, FILE *fp, void *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *callback, void *u);
int inet6_opt_init(void *extbuf, socklen_t extlen);
pid_t getsid(pid_t pid);
lzma_ret lzma_index_cat(lzma_index *dest, lzma_index *src, lzma_allocator *allocator);
int gconv_init_fct(gconv_step *arg0);
int SSL_get_shared_sigalgs(SSL *s, int idx, int *psign, int *phash, int *psignandhash, unsigned *rsig, unsigned *rhash);
void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst, EVP_PKEY_ASN1_METHOD *src);
int BN_uadd(BIGNUM *r, BIGNUM *a, BIGNUM *b);
off_t gztell(gzFile arg0);
lzma_vli lzma_index_stream_size(lzma_index *i);
void EVP_CIPHER_do_all_sorted(void fn, void *arg);
int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX *ctx, unsigned *d, long len);
int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);
void obstack_alloc_failed_handler();
int inflateSetDictionary(z_streamp strm, Bytef *dictionary, uInt dictLength);
int bgets(BIO *arg0, char *arg1, int arg2);
int posix_spawn_file_actions_init(posix_spawn_file_actions_t *file_actions);
int EVP_PKEY_set1_DSA(EVP_PKEY *pkey, dsa_st *key);
void lh_stats(LHASH *lh, FILE *out);
int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, char *name);
float strtof(char *nptr, char *endptr);
int putw(int w, FILE *stream);
void globfree64(glob64_t *pglob);
X509_ALGOR *X509_ALGOR_new();
NETSCAPE_CERT_SEQUENCE *PEM_read_NETSCAPE_CERT_SEQUENCE(FILE *fp, NETSCAPE_CERT_SEQUENCE *x, pem_password_cb *cb, void *u);
int FIPS_mode();
int ftime(timeb *timebuf);
X509 *X509_REQ_to_X509(X509_REQ *r, int days, EVP_PKEY *pkey);
tm *getdate(char *string);
long SSL_CTX_set_timeout(SSL_CTX *ctx, long t);
int SSL_set_ex_data(SSL *ssl, int idx, void *data);
int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit, unsigned flags);
void endfsent();
int EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *ppkey);
BN_RECP_CTX *BN_RECP_CTX_new();
PKCS7_ENCRYPT *PKCS7_ENCRYPT_new();
int RSA_print(BIO *bp, RSA *r, int offset);
size_t argz_count(char *argz, size_t len);
EVP_CIPHER *EVP_des_cfb8();
int bcmp(void *s1, void *s2, size_t n);
X509_ALGOR *X509_ALGOR_dup(X509_ALGOR *xn);
void SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth);
pid_t getpgrp();
int ns_name_uncompress(u_char *arg0, u_char *arg1, u_char *arg2, char *arg3, size_t arg4);
NETSCAPE_CERT_SEQUENCE *PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO *bp, NETSCAPE_CERT_SEQUENCE *x, pem_password_cb *cb, void *u);
unsigned getauxval(unsigned type);
int dlclose(void *handle);
int BN_mod_mul_reciprocal(BIGNUM *r, BIGNUM *x, BIGNUM *y, BN_RECP_CTX *recp, BN_CTX *ctx);
void freelocale(locale_t dataset);
int PEM_write_RSAPrivateKey(FILE *fp, RSA *x, EVP_CIPHER *enc, unsigned *kstr, int klen, pem_password_cb *cb, void *u);
int stime(time_t *when);
PKCS7_SIGNER_INFO *d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO *a, unsigned *in, long len);
void la_activity(uintptr_t *cookie, unsigned flag);
void ERR_load_DSA_strings();
EVP_CIPHER *EVP_aes_256_cbc_hmac_sha1();
int mcheck_pedantic(void abortfunc);
ASN1_ENUMERATED *ASN1_ENUMERATED_new();
EC_METHOD *EC_GFp_nistp224_method();
void SSL_free(SSL *ssl);
td_err_e td_thr_getxregs(td_thrhandle_t *th, void *xregs);
X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION *ex, int nid, int crit, ASN1_OCTET_STRING *data);
off64_t IO_seekpos(IO_FILE *arg0, off64_t arg1, int arg2);
int sigismember(sigset_t *set, int signo);
int OBJ_create_objects(BIO *in);
int X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust);
long nextafterl(long x, long y);
ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid);
void COMP_CTX_free(COMP_CTX *ctx);
int pthread_kill(pthread_t threadid, int signo);
int adjtimex(timex *ntx);
td_err_e td_thr_setxregs(td_thrhandle_t *th, void *addr);
PKCS8_PRIV_KEY_INFO *PKCS8_PRIV_KEY_INFO_new();
int lcong48_r(unsigned *param, drand48_data *buffer);
int sync_file_range(int fd, off64_t offset, off64_t count, unsigned flags);
void *default_morecore(ptrdiff_t size);
char *cuserid(char *s);
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s, time_t t);
int ns_sign2(u_char *arg0, int *arg1, int arg2, int arg3, void *arg4, u_char *arg5, int arg6, u_char *arg7, int *arg8, time_t arg9, u_char *arg10, u_char *arg11);
int EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned *key, size_t *keylen);
int ECDSA_sign_ex(int type, unsigned *dgst, int dgstlen, unsigned *sig, unsigned *siglen, BIGNUM *kinv, BIGNUM *rp, EC_KEY *eckey);
int BIO_get_host_ip(char *str, unsigned *ip);
int X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);
u_char *p_cdname(u_char *arg0, u_char *arg1, FILE *arg2);
double strtod_l(char *nptr, char *endptr, locale_t loc);
int isnan(double value);
void SSL_CTX_get_info_callback(SSL_CTX *ctx);
X509_CRL *X509_CRL_dup(X509_CRL *crl);
int EC_KEY_get_flags(EC_KEY *key);
int i2d_NETSCAPE_X509(NETSCAPE_X509 *a, unsigned *out);
int res_send(u_char *arg0, int arg1, u_char *arg2, int arg3);
unsigned *EC_GROUP_get0_seed(EC_GROUP *x);
unsigned EC_KEY_get_enc_flags(EC_KEY *key);
char *X509_TRUST_get0_name(X509_TRUST *xp);
X509 *X509_STORE_CTX_get0_current_issuer(X509_STORE_CTX *ctx);
void routine(void *arg0);
int isgraph_l(int arg0, locale_t arg1);
long jnl(int arg0, long arg1);
long inflateMark(z_streamp strm);
unsigned la_x86_64_gnu_pltexit(Elf64_Sym *sym, unsigned ndx, uintptr_t *refcook, uintptr_t *defcook, La_x86_64_regs *inregs, La_x86_64_retval *outregs, char *symname);
int i2d_PKCS8_bio(BIO *bp, X509_SIG *p8);
void CRYPTO_set_locking_callback(void func);
void NETSCAPE_SPKAC_free(NETSCAPE_SPKAC *a);
double scalbln(double x, long n);
int init_module(char *name, module *image);
wint_t getwchar();
int X509_CRL_get_ext_by_NID(X509_CRL *x, int nid, int lastpos);
RSA *RSA_new_method(ENGINE *engine);
int ECDH_set_ex_data(EC_KEY *d, int idx, void *arg);
int ilogbl(long x);
X509_POLICY_LEVEL *X509_policy_tree_get0_level(X509_POLICY_TREE *tree, int i);
void argp_help(argp *argp, FILE *stream, unsigned flags, char *name);
int i2d_X509_NAME(X509_NAME *a, unsigned *out);
SSL_SESSION *SSL_get1_session(SSL *ssl);
uLong crc32(uLong crc, Bytef *buf, uInt len);
int getdtablesize();
char *backtrace_symbols(void *array, int size);
int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);
BIGNUM *get_rfc2409_prime_1024(BIGNUM *bn);
int setpgid(pid_t pid, pid_t pgid);
long atanhl(long x);
void X509_INFO_free(X509_INFO *a);
ASN1_STRING *X509_NAME_ENTRY_get_data(X509_NAME_ENTRY *ne);
float atanhf(float x);
BN_MONT_CTX *EC_GROUP_get_mont_data(EC_GROUP *group);
int app_verify_callback(X509_STORE_CTX *arg0, void *arg1);
int EVP_DigestInit(EVP_MD_CTX *ctx, EVP_MD *type);
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, char *str);
hostent *gethostent();
off64_t IO_seekoff(IO_FILE *arg0, off64_t arg1, int arg2, int arg3);
long set_mempolicy(int mode, unsigned *nodemask, unsigned maxnode);
ec_key_st *EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey);
X509_VERIFY_PARAM *X509_VERIFY_PARAM_get0(int id);
void closelog();
int seed48_r(unsigned *seed16v, drand48_data *buffer);
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
int deflatePrime(z_streamp strm, int bits, int value);
SSL_METHOD *TLSv1_method();
DSA *d2i_DSAPublicKey(DSA *a, unsigned *pp, long length);
void EC_GROUP_set_curve_name(EC_GROUP *group, int nid);
int EVP_read_pw_string(char *buf, int length, char *prompt, int verify);
BIGNUM *get_rfc2409_prime_768(BIGNUM *bn);
void EVP_set_pw_prompt(char *prompt);
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY *ne, int nid, int type, unsigned *bytes, int len);
int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx, BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si);
BIO *BIO_pop(BIO *b);
int chmod(char *file, mode_t mode);
void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned flags);
int setxattr(char *path, char *name, void *value, size_t size, int flags);
void *CRYPTO_realloc_clean(void *addr, int old_num, int num, char *file, int line);
int ASN1_TIME_check(ASN1_TIME *t);
EVP_CIPHER *EVP_aes_128_cfb1();
EC_METHOD *EC_GFp_nist_method();
FILE *tmpfile64();
int i2d_X509_AUX(X509 *a, unsigned *pp);
int BN_mod_exp_mont(BIGNUM *r, BIGNUM *a, BIGNUM *p, BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
int ssl_write_bytes(SSL *s, int type, void *buf_, int len);
int new_session_cb(ssl_st *ssl, SSL_SESSION *sess);
void fpurge(FILE *fp);
int X509v3_get_ext_count(stack_st_X509_EXTENSION *x);
void warnx(char *format, int vararg);
int SSL_SRP_CTX_free(SSL *ctx);
int nanosleep(timespec *requested_time, timespec *remaining);
int SHA512_Final(unsigned *md, SHA512_CTX *c);
int deflateEnd(z_streamp strm);
int deflateSetHeader(z_streamp strm, gz_headerp head);
int BN_GF2m_mod_div_arr(BIGNUM *r, BIGNUM *a, BIGNUM *b, int *p, BN_CTX *ctx);
int ns_name_skip(u_char *arg0, u_char *arg1);
int PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data);
int i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cb, void *u);
int ASN1_get_object(unsigned *pp, long *plength, int *ptag, int *pclass, long omax);
lzma_ret lzma_block_encoder(lzma_stream *strm, lzma_block *block);
unsigned inw(unsigned port);
void BN_MONT_CTX_init(BN_MONT_CTX *ctx);
int PEM_write_RSAPublicKey(FILE *fp, RSA *x);
SSL_CIPHER *get_cipher(unsigned ncipher);
char *gai_strerror(int ecode);
ASN1_STRING *DIRECTORYSTRING_new();
int getnetgrent_r(char *hostp, char *userp, char *domainp, char *buffer, size_t buflen);
int SSL_CTX_get_client_cert_cb(SSL_CTX *ctx);
int fwriting(FILE *fp);
int wordexp(char *words, wordexp_t *pwordexp, int flags);
void *ECDSA_get_ex_data(EC_KEY *d, int idx);
uint64_t lzma_crc64(uint8_t *buf, size_t size, uint64_t crc);
int shmctl(int shmid, int cmd, shmid_ds *buf);
X509 *X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx);
int res_ownok(char *arg0);
int getaddrinfo_a(int mode, gaicb *list, int ent, sigevent *sig);
unsigned inl(unsigned port);
int X509_STORE_CTX_get_error(X509_STORE_CTX *ctx);
int stty(int fd, sgttyb *params);
int SSL_pending(SSL *s);
int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param, stack_st_ASN1_OBJECT *policies);
stack_st_SSL_COMP *SSL_COMP_set0_compression_methods(stack_st_SSL_COMP *meths);
int EC_POINT_get_affine_coordinates_GFp(EC_GROUP *group, EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx);
double lgamma(double arg0);
int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param, char *name, size_t namelen);
int PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si, stack_st_X509_ATTRIBUTE *sk);
int SSL_clear(SSL *s);
int res_search(char *arg0, int arg1, int arg2, u_char *arg3, int arg4);
DSA *DSAparams_dup(DSA *x);
passwd *getpwuid(uid_t uid);
void error_alias(int status, int errnum, char *format, int vararg);
unsigned SSLeay();
int ECDSA_set_method(EC_KEY *eckey, ECDSA_METHOD *meth);
EVP_PKEY *EVP_PKEY_new_mac_key(int type, ENGINE *e, unsigned *key, int keylen);
long log10l(long x);
float fminf(float x, float y);
stack_st_PKCS7_SIGNER_INFO *PKCS7_get_signer_info(PKCS7 *p7);
void pitem_free(pitem *item);
RSA *d2i_RSAPublicKey_bio(BIO *bp, RSA *rsa);
void cfree(void *ptr);
mntent *getmntent_r(FILE *stream, mntent *result, char *buffer, int bufsize);
int EC_GROUP_get_curve_GFp(EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
void *X509_REVOKED_get_ext_d2i(X509_REVOKED *x, int nid, int *crit, int *idx);
size_t fwrite_unlocked(void *ptr, size_t size, size_t n, FILE *stream);
char *getwd(char *buf);
EVP_CIPHER *EVP_aes_128_ecb();
int pthread_getcpuclockid(pthread_t thread_id, clockid_t *clock_id);
int sk_num(STACK *arg0);
wint_t getwc(FILE *stream);
int DSA_size(DSA *arg0);
void *lh_retrieve(LHASH *lh, void *data);
int ns_samename(char *arg0, char *arg1);
int BN_print_fp(FILE *fp, BIGNUM *a);
int inflateSync(z_streamp strm);
EVP_CIPHER *EVP_aes_256_cfb1();
double fabs(double x);
int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
int getc(FILE *stream);
int SSL_CTX_set_srp_username(SSL_CTX *ctx, char *name);
EVP_CIPHER *EVP_aes_256_cfb8();
double sqrt(double x);
int EVP_PKEY_asn1_add_alias(int to, int from);
int i2d_X509_fp(FILE *fp, X509 *x509);
void ERR_load_OBJ_strings();
int i2d_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL *a, unsigned *out);
ssize_t recvmsg(int fd, msghdr *message, int flags);
int fstatfs(int fildes, statfs *buf);
int pthread_mutex_timedlock(pthread_mutex_t *mutex, timespec *abstime);
PKCS7 *PKCS7_encrypt(stack_st_X509 *certs, BIO *in, EVP_CIPHER *cipher, int flags);
EVP_PKEY *X509_REQ_get_pubkey(X509_REQ *req);
int getw(FILE *stream);
int SSL_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
void longjmp(jmp_buf_tag *env, int val);
int mallopt(int param, int val);
int BN_GF2m_mod_sqr_arr(BIGNUM *r, BIGNUM *a, int *p, BN_CTX *ctx);
void argz_delete(char *argz, size_t *argz_len, char *entry);
unsigned *SHA224(unsigned *d, size_t n, unsigned *md);
lzma_bool lzma_index_iter_next(lzma_index_iter *iter, lzma_index_iter_mode mode);
int rsa_verify(int dtype, unsigned *m, unsigned m_length, unsigned *sigbuf, unsigned siglen, RSA *rsa);
EVP_CIPHER *EVP_des_ede_cfb64();
void ECDSA_METHOD_free(ECDSA_METHOD *ecdsa_method);
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
lzma_ret lzma_stream_footer_decode(lzma_stream_flags *options, uint8_t *in);
int SSL_add_dir_cert_subjects_to_stack(stack_st_X509_NAME *stackCAs, char *dir);
void setbuf(FILE *stream, char *buf);
int strcoll_l(char *s1, char *s2, locale_t l);
void endrpcent();
int expand(COMP_CTX *ctx, unsigned *out, unsigned olen, unsigned *in, unsigned ilen);
int pthread_attr_getguardsize(pthread_attr_t *attr, size_t *guardsize);
int BN_generate_prime_ex(BIGNUM *ret, int bits, int safe, BIGNUM *add, BIGNUM *rem, BN_GENCB *cb);
X509_ATTRIBUTE *X509_REQ_get_attr(X509_REQ *req, int loc);
int SSL_CTX_add_server_custom_ext(SSL_CTX *ctx, unsigned ext_type, custom_ext_add_cb add_cb, custom_ext_free_cb free_cb, void *add_arg, custom_ext_parse_cb parse_cb, void *parse_arg);
long cprojl(long z);
int sched_getparam(pid_t pid, sched_param *param);
lzma_ret lzma_stream_header_encode(lzma_stream_flags *options, uint8_t *out);
int drand48_r(drand48_data *buffer, double *result);
X509_EXTENSION *X509v3_delete_ext(stack_st_X509_EXTENSION *x, int loc);
int fts_compar(void *arg0, void *arg1);
group *getgrent();
void updwtmp(char *wtmp_file, utmp *utmp);
int hsearch_r(ENTRY item, ACTION action, ENTRY *retval, hsearch_data *htab);
long powl(long x, long y);
void BIO_set_callback(BIO *b, long callback);
EVP_PKEY *PEM_read_bio_PUBKEY(BIO *bp, EVP_PKEY *x, pem_password_cb *cb, void *u);
td_err_e td_ta_tsd_iter(td_thragent_t *ta, td_key_iter_f *ki, void *p);
EVP_CIPHER *EVP_bf_cbc();
void LHASH_DOALL_FN_TYPE(void *arg0);
EVP_CIPHER *EVP_aes_192_cfb128();
void *SSL_SESSION_get_ex_data(SSL_SESSION *ss, int idx);
void lh_stats_bio(LHASH *lh, BIO *out);
off_t lseek(int fd, off_t offset, int whence);
void BN_consttime_swap(unsigned swap, BIGNUM *a, BIGNUM *b, int nwords);
int register_printf_specifier(int spec, printf_function func, printf_arginfo_size_function arginfo);
float rintf(float x);
BIO_METHOD *BIO_s_fd();
unsigned psk_server_callback(SSL *ssl, char *identity, unsigned *psk, unsigned max_psk_len);
ASN1_OBJECT *X509_policy_node_get0_policy(X509_POLICY_NODE *node);
int creat64(char *file, mode_t mode);
int BN_is_prime_fasttest_ex(BIGNUM *p, int nchecks, BN_CTX *ctx, int do_trial_division, BN_GENCB *cb);
void *ECDH_get_ex_data(EC_KEY *d, int idx);
int EVP_PKEY_gen_cb(EVP_PKEY_CTX *ctx);
EVP_CIPHER *EVP_aes_256_ofb();
int X509_REQ_check_private_key(X509_REQ *x509, EVP_PKEY *pkey);
lzma_ret lzma_properties_decode(lzma_filter *filter, lzma_allocator *allocator, uint8_t *props, size_t props_size);
void CRYPTO_get_locking_callback();
X509 *PEM_read_bio_X509_AUX(BIO *bp, X509 *x, pem_password_cb *cb, void *u);
int sem_destroy(sem_t *sem);
ssize_t preadv(int fd, iovec *iovec, int count, off_t offset);
lzma_ret lzma_filter_flags_encode(lzma_filter *filter, uint8_t *out, size_t *out_pos, size_t out_size);
int vfwprintf(FILE *s, wchar_t *format, gnuc_va_list arg);
int sethostname(char *name, size_t len);
int EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned *out, int *outl);
int SSL_state(SSL *ssl);
EVP_CIPHER *EVP_aes_256_cbc_hmac_sha256();
int cleanup(X509_STORE_CTX *ctx);
int get_asn1_parameters(EVP_CIPHER_CTX *arg0, ASN1_TYPE *arg1);
int sigreturn(sigcontext *scp);
int X509_http_nbio(OCSP_REQ_CTX *rctx, X509 *pcert);
DH_METHOD *DH_OpenSSL();
void ECDSA_METHOD_set_sign(ECDSA_METHOD *ecdsa_method, ECDSA_SIG *ecdsa_do_sign);
void rewinddir(DIR *dirp);
ssize_t aio_return64(aiocb64 *aiocbp);
BIO *BIO_push(BIO *b, BIO *append);
int semctl(int semid, int semnum, int cmd, int vararg);
BIGNUM *BN_generate_prime(BIGNUM *ret, int bits, int safe, BIGNUM *add, BIGNUM *rem, void callback, void *cb_arg);
int delete_module(char *name);
int ASN1_bn_print(BIO *bp, char *number, BIGNUM *num, unsigned *buf, int off);
int X509_REQ_get_attr_by_OBJ(X509_REQ *req, ASN1_OBJECT *obj, int lastpos);
int EVP_PKEY_verify(EVP_PKEY_CTX *ctx, unsigned *sig, size_t siglen, unsigned *tbs, size_t tbslen);
int X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc);
int EVP_PBE_find(int type, int pbe_nid, int *pcnid, int *pmnid, EVP_PBE_KEYGEN *pkeygen);
int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t);
int ECDH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int dladdr1(void *address, Dl_info *info, void *extra_info, int flags);
long SSL_ctrl(SSL *ssl, int cmd, long larg, void *parg);
td_err_e td_thr_event_getmsg(td_thrhandle_t *th, td_event_msg_t *msg);
RSA *PEM_read_bio_RSA_PUBKEY(BIO *bp, RSA *x, pem_password_cb *cb, void *u);
int IO_ferror(IO_FILE *fp);
int EC_POINT_oct2point(EC_GROUP *group, EC_POINT *p, unsigned *buf, size_t len, BN_CTX *ctx);
rpcent *getrpcbyname(char *name);
size_t wcsrtombs(char *dst, wchar_t *src, size_t len, mbstate_t *ps);
lzma_vli lzma_index_size(lzma_index *i);
void SSL_CTX_set_verify(SSL_CTX *ctx, int mode, int callback);
int fsync(int fd);
char *CRYPTO_strdup(char *str, char *file, int line);
int printf_arginfo_function(printf_info *info, size_t n, int *argtypes);
int vfscanf(FILE *s, char *format, gnuc_va_list arg);
int i2d_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE *a, unsigned *out);
int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
size_t SSL_get_finished(SSL *s, void *buf, size_t count);
int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned *outm, int *outl);
int hcreate(size_t nel);
char *index(char *s, int c);
int OBJ_ln2nid(char *s);
SSL_METHOD *DTLSv1_server_method();
void printf_va_arg_function(void *mem, va_list *ap);
void *lh_insert(LHASH *lh, void *data);
void ssl_clear(SSL *s);
int inet6_opt_get_val(void *databuf, int offset, void *val, socklen_t vallen);
EVP_PKEY *SSL_CTX_get0_privatekey(SSL_CTX *ctx);
int ASN1_item_i2d_fp(ASN1_ITEM *it, FILE *out, void *x);
char *hostalias(char *arg0);
int shutdown(X509_LOOKUP *ctx);
ECDH_METHOD *ECDH_OpenSSL();
int pclose(FILE *stream);
void sa_sigaction(int arg0, siginfo_t *arg1, void *arg2);
int inet6_opt_append(void *extbuf, socklen_t extlen, int offset, uint8_t type, socklen_t len, uint8_t align, void *databufp);
int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype, int cmd, int p1, void *p2);
int pthread_attr_getschedparam(pthread_attr_t *attr, sched_param *param);
void BUF_reverse(unsigned *out, unsigned *in, size_t siz);
long acoshl(long x);
ASN1_PRINTABLESTRING *d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING *a, unsigned *in, long len);
double wcstod_l(wchar_t *nptr, wchar_t *endptr, locale_t loc);
int EVP_Cipher(EVP_CIPHER_CTX *c, unsigned *out, unsigned *in, unsigned inl);
EVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx);
unsigned inb_p(unsigned port);
PKCS7_ENC_CONTENT *d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT *a, unsigned *in, long len);
PKCS7_RECIP_INFO *PKCS7_RECIP_INFO_new();
int BN_num_bits(BIGNUM *a);
ASN1_BIT_STRING *ASN1_BIT_STRING_new();
void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t);
int BUF_MEM_grow(BUF_MEM *str, size_t len);
int inflateReset(z_streamp strm);
char *asctime(tm *tp);
void sighandler_t(int arg0);
void CRYPTO_free_locked(void *ptr);
BIGNUM *get_rfc3526_prime_2048(BIGNUM *bn);
int setrlimit(rlimit_resource_t resource, rlimit *rlimits);
size_t BUF_strnlen(char *str, size_t maxlen);
int SSL_CTX_set_ex_data(SSL_CTX *ssl, int idx, void *data);
void pthread_exit(void *retval);
lzma_vli lzma_index_stream_count(lzma_index *i);
void SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx, DH *dh);
int X509_keyid_set1(X509 *x, unsigned *id, int len);
size_t regerror(int errcode, regex_t *preg, char *errbuf, size_t errbuf_size);
PBKDF2PARAM *PBKDF2PARAM_new();
int BN_mod_exp(BIGNUM *r, BIGNUM *a, BIGNUM *p, BIGNUM *m, BN_CTX *ctx);
int fstatat64(int fd, char *file, stat64 *buf, int flag);
float hypotf(float x, float y);
void CRYPTO_set_add_lock_callback(int func);
ldiv_t ldiv(long numer, long denom);
ECDSA_SIG *ECDSA_do_sign_ex(unsigned *dgst, int dgstlen, BIGNUM *kinv, BIGNUM *rp, EC_KEY *eckey);
int ASN1_INTEGER_cmp(ASN1_INTEGER *x, ASN1_INTEGER *y);
EVP_PKEY *d2i_PUBKEY(EVP_PKEY *a, unsigned *pp, long length);
int PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other);
group *getgrgid(gid_t gid);
useconds_t ualarm(useconds_t value, useconds_t interval);
int gzbuffer(gzFile file, unsigned size);
error_t argp_parser_t(int key, char *arg, argp_state *state);
void X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth);
int sysinfo(sysinfo *info);
BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio);
PKCS7_SIGN_ENVELOPE *d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE *a, unsigned *in, long len);
PBE2PARAM *d2i_PBE2PARAM(PBE2PARAM *a, unsigned *in, long len);
int SSL_use_RSAPrivateKey_file(SSL *ssl, char *file, int type);
int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);
void OPENSSL_cleanse(void *ptr, size_t len);
int siginterrupt(int sig, int interrupt);
void EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD *pmeth, int paramgen_init, int paramgen);
BIO_METHOD *BIO_s_connect();
lzma_bool lzma_filter_encoder_is_supported(lzma_vli id);
int X509_REQ_print(BIO *bp, X509_REQ *req);
int lxstat(int ver, char *filename, stat *stat_buf);
res_state *res_state();
size_t EC_POINT_point2oct(EC_GROUP *group, EC_POINT *p, point_conversion_form_t form, unsigned *buf, size_t len, BN_CTX *ctx);
int isinf(double value);
void sethostent(int stay_open);
int X509v3_get_ext_by_OBJ(stack_st_X509_EXTENSION *x, ASN1_OBJECT *obj, int lastpos);
char *fcvt(double value, int ndigit, int *decpt, int *sign);
void endusershell();
int ECPKParameters_print(BIO *bp, EC_GROUP *x, int off);
SSL_METHOD *TLSv1_2_server_method();
wchar_t *wcsdup(wchar_t *s);
uLong deflateBound(z_streamp strm, uLong sourceLen);
unsigned la_objclose(uintptr_t *cookie);
int res_init();
int inflateGetHeader(z_streamp strm, gz_headerp head);
RSA *d2i_RSA_NET(RSA *a, unsigned *pp, long length, int cb, int sgckey);
int fwprintf(FILE *stream, wchar_t *format, int vararg);
void X509_CINF_free(X509_CINF *a);
void SSL_certs_clear(SSL *s);
EC_GROUP *PEM_read_ECPKParameters(FILE *fp, EC_GROUP *x, pem_password_cb *cb, void *u);
int default_verify_callback(int ok, X509_STORE_CTX *ctx);
int ECDSA_do_verify(unsigned *dgst, int dgst_len, ECDSA_SIG *sig, EC_KEY *eckey);
char *fgets_unlocked(char *s, int n, FILE *stream);
int tlsext_opaque_prf_input_callback(SSL *arg0, void *peerinput, size_t len, void *arg);
void X509_NAME_ENTRY_free(X509_NAME_ENTRY *a);
int fxstat(int ver, int fildes, stat *stat_buf);
void CRYPTO_set_mem_debug_options(long bits);
int IO_vfscanf(IO_FILE *arg0, char *arg1, gnuc_va_list arg2, int *arg3);
int sockatmark(int fd);
int SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx, char *profiles);
int new_item(X509_LOOKUP *ctx);
int EC_GROUP_set_generator(EC_GROUP *group, EC_POINT *generator, BIGNUM *order, BIGNUM *cofactor);
int getservbyname_r(char *name, char *proto, servent *result_buf, char *buf, size_t buflen, servent *result);
long kexec_file_load(int kernel_fd, int initrd_fd, unsigned cmdline_len, char *cmdline, unsigned flags);
void BN_CTX_free(BN_CTX *c);
int DSA_do_verify(unsigned *dgst, int dgst_len, DSA_SIG *sig, DSA *dsa);
int EVP_PKEY_id(EVP_PKEY *pkey);
int quotactl(int cmd, char *special, int id, caddr_t addr);
void bn_sqr_words(unsigned *rp, unsigned *ap, int num);
int md_ctrl(EVP_MD_CTX *ctx, int cmd, int p1, void *p2);
int OBJ_obj2txt(char *buf, int buf_len, ASN1_OBJECT *a, int no_name);
void sk_zero(STACK *st);
float cpowf(float x, float y);
char *BN_bn2hex(BIGNUM *a);
int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param, unsigned flags);
long cpowl(long x, long y);
unsigned *ASN1_seq_pack(stack_st_OPENSSL_BLOCK *safes, i2d_of_void *i2d, unsigned *buf, int *len);
unsigned X509_NAME_hash_old(X509_NAME *x);
void function(sigval_t arg0);
void setservent(int stay_open);
BIGNUM *get_rfc3526_prime_3072(BIGNUM *bn);
void EVP_PKEY_CTX_set_data(EVP_PKEY_CTX *ctx, void *data);
ASN1_GENERALSTRING *ASN1_GENERALSTRING_new();
int BIO_indent(BIO *b, int indent, int max);
char *p_secstodate(u_long arg0);
BIGNUM *EC_POINT_point2bn(EC_GROUP *arg0, EC_POINT *arg1, point_conversion_form_t form, BIGNUM *arg3, BN_CTX *arg4);
int X509_NAME_print(BIO *bp, X509_NAME *name, int obase);
RSA_METHOD *RSA_PKCS1_SSLeay();
int b64_pton(char *arg0, u_char *arg1, size_t arg2);
int isastream(int fildes);
int overflow(IO_FILE *arg0, int arg1);
void hdestroy_r(hsearch_data *htab);
EVP_CIPHER *EVP_des_ede3_ofb();
lzma_bool lzma_mf_is_supported(lzma_match_finder match_finder);
int ASN1_PRINTABLE_type(unsigned *s, int max);
void *memccpy(void *dest, void *src, int c, size_t n);
int i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC *a, unsigned *out);
int gconv_fct(gconv_step *arg0, gconv_step_data *arg1, unsigned *arg2, unsigned *arg3, unsigned *arg4, size_t *arg5, int arg6, int arg7);
void aio_init(aioinit *init);
X509_CRL *X509_CRL_diff(X509_CRL *base, X509_CRL *newer, EVP_PKEY *skey, EVP_MD *md, unsigned flags);
lzma_vli lzma_index_block_count(lzma_index *i);
int X509_CRL_verify(X509_CRL *a, EVP_PKEY *r);
int register_printf_modifier(wchar_t *str);
int i2b_PVK_bio(BIO *out, EVP_PKEY *pk, int enclevel, pem_password_cb *cb, void *u);
int EVP_SignFinal(EVP_MD_CTX *ctx, unsigned *md, unsigned *s, EVP_PKEY *pkey);
EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY *a, unsigned *pp, long length);
size_t strspn(char *s, char *accept);
void *memalign_hook(size_t alignment, size_t size, void *arg2);
unsigned in_func(void *arg0, unsigned *arg1);
int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, EVP_CIPHER *cipher, ENGINE *impl, unsigned *key, unsigned *iv);
int X509_cmp_current_time(ASN1_TIME *s);
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE *attr, int nid, int atrtype, void *data, int len);
long fminl(long x, long y);
double log1p(double x);
double difftime(time_t time1, time_t time0);
int i2d_X509_CRL(X509_CRL *a, unsigned *out);
int pthread_setaffinity_np(pthread_t th, size_t cpusetsize, cpu_set_t *cpuset);
int BN_mask_bits(BIGNUM *a, int n);
int gzputs(gzFile file, char *s);
DSA *PEM_read_DSAPrivateKey(FILE *fp, DSA *x, pem_password_cb *cb, void *u);
void SSL_CTX_set_psk_server_callback(SSL_CTX *ctx, unsigned psk_server_callback);
EVP_CIPHER *EVP_camellia_128_ofb();
char *strndup(char *string, size_t n);
int inet6_option_space(int nbytes);
EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key);
RSA *RSAPublicKey_dup(RSA *rsa);
char *SSL_CIPHER_get_name(SSL_CIPHER *c);
int client_cert_cb(SSL *ssl, X509 *x509, EVP_PKEY *pkey);
int jrand48_r(unsigned *xsubi, drand48_data *buffer, long *result);
void argz_stringify(char *argz, size_t len, int sep);
ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned *pp, long length);
double lgamma_r(double arg0, int *signgamp);
long mbind(void *addr, unsigned len, int mode, unsigned *nodemask, unsigned maxnode, unsigned flags);
spwd *sgetspent(char *string);
int getaliasbyname_r(char *name, aliasent *result_buf, char *buffer, size_t buflen, aliasent *result);
int dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM *kinvp, BIGNUM *rp);
SSL_METHOD *TLSv1_1_client_method();
int uflow(IO_FILE *arg0);
int PEM_write_X509_CERT_PAIR(FILE *fp, X509_CERT_PAIR *x);
unsigned inb(unsigned port);
wint_t towctrans_l(wint_t wc, wctrans_t desc, locale_t locale);
long fpathconf(int fd, int name);
long strtol(char *nptr, char *endptr, int base);
int RSA_sign(int type, unsigned *m, unsigned m_length, unsigned *sigret, unsigned *siglen, RSA *rsa);
int fstatfs64(int fildes, statfs64 *buf);
void endaliasent();
td_err_e td_ta_thr_iter(td_thragent_t *ta, td_thr_iter_f *callback, void *cbdata_p, td_thr_state_e state, int ti_pri, sigset_t *ti_sigmask_p, unsigned ti_user_flags);
off_t gzoffset(gzFile arg0);
PKCS7_RECIP_INFO *d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO *a, unsigned *in, long len);
int tkill(int tid, int sig);
BIO *BIO_find_type(BIO *b, int bio_type);
DSA_METHOD *DSA_get_default_method();
int ns_sign_tcp(u_char *arg0, int *arg1, int arg2, int arg3, ns_tcp_tsig_state *arg4, int arg5);
int BN_div(BIGNUM *dv, BIGNUM *rem, BIGNUM *m, BIGNUM *d, BN_CTX *ctx);
int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen);
int getopt(int argc, char *argv, char *shortopts);
int inet6_rth_segments(void *bp);
int aio_error(aiocb *aiocbp);
unsigned BIO_number_written(BIO *bio);
int i2d_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO *a, unsigned *out);
void *mempcpy(void *dest, void *src, size_t n);
int EVP_PKEY_decrypt_old(unsigned *dec_key, unsigned *enc_key, int enc_key_len, EVP_PKEY *private_key);
int aio_write64(aiocb64 *aiocbp);
EVP_CIPHER *EVP_aes_256_ecb();
int stat(char *file, stat *buf);
SSL_CIPHER *SSL_get_current_cipher(SSL *s);
int issignalingf(float value);
void fp_resstat(res_state arg0, FILE *arg1);
void *OBJ_bsearch_ex_(void *key, void *base, int num, int size, int cmp, int flags);
int getgrnam_r(char *name, group *resultbuf, char *buffer, size_t buflen, group *result);
int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key);
int EC_GROUP_set_curve_GF2m(EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);
int issignalingl(long value);
void *EC_KEY_insert_key_method_data(EC_KEY *key, void *data, void *dup_func, void free_func, void clear_free_func);
int pthread_setspecific(pthread_key_t key, void *pointer);
void setusershell();
int pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared);
int PEM_write_PKCS8(FILE *fp, X509_SIG *x);
int i2d_of_void(void *arg0, unsigned *arg1);
int BIO_dump(BIO *b, char *bytes, int len);
int EVP_DecodeBlock(unsigned *t, unsigned *f, int n);
int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx);
int SSL_set_purpose(SSL *s, int purpose);
BIGNUM *SSL_get_srp_g(SSL *s);
int dn_skipname(u_char *arg0, u_char *arg1);
char *nl_langinfo_l(nl_item item, locale_t l);
int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r);
void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned flags);
void pthread_testcancel();
long get_avphys_pages();
void regfree(regex_t *preg);
EVP_CIPHER *EVP_rc4_40();
wchar_t *wmemset(wchar_t *s, wchar_t c, size_t n);
int inflateInit2_(z_streamp strm, int windowBits, char *version, int stream_size);
void endpwent();
int i2b_PublicKey_bio(BIO *out, EVP_PKEY *pk);
void X509_REQ_INFO_free(X509_REQ_INFO *a);
DH *DHparams_dup(DH *arg0);
void argp_state_help(argp_state *state, FILE *stream, unsigned flags);
void EVP_PKEY_meth_set_init(EVP_PKEY_METHOD *pmeth, int init);
BIGNUM *SSL_get_srp_N(SSL *s);
void sincosl(long x, long *sinx, long *cosx);
pthread_t pthread_self();
char *X509_get_default_cert_area();
stack_st_X509_POLICY_NODE *X509_policy_tree_get0_policies(X509_POLICY_TREE *tree);
void sincosf(float x, float *sinx, float *cosx);
int PEM_write_ECPKParameters(FILE *fp, EC_GROUP *x);
size_t mbsnrtowcs(wchar_t *dst, char *src, size_t nmc, size_t len, mbstate_t *ps);
long asinhl(long x);
